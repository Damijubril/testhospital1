{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Inject, Directive, EventEmitter, HostBinding, Output, Input, HostListener, ContentChildren, Component, ChangeDetectionStrategy, TemplateRef, ContentChild, ViewContainerRef, ViewChild, SkipSelf, ViewEncapsulation, Optional, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Subject, fromEvent, BehaviorSubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { __decorate } from 'tslib';\n/**\n * Gets the width of the scrollbar.  Nesc for windows\n * http://stackoverflow.com/a/13382873/888165\n */\n\nconst _c0 = [\"*\"];\nconst _c1 = [\"cellTemplate\"];\n\nfunction DataTableBodyCellComponent_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"label\", 4)(1, \"input\", 5);\n    i0.ɵɵlistener(\"click\", function DataTableBodyCellComponent_label_1_Template_input_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onCheckboxChange($event);\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", ctx_r0.isSelected);\n  }\n}\n\nfunction DataTableBodyCellComponent_ng_container_2_button_1_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 11);\n  }\n}\n\nfunction DataTableBodyCellComponent_ng_container_2_button_1_i_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 12);\n  }\n}\n\nfunction DataTableBodyCellComponent_ng_container_2_button_1_i_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 13);\n  }\n}\n\nfunction DataTableBodyCellComponent_ng_container_2_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function DataTableBodyCellComponent_ng_container_2_button_1_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return ctx_r11.onTreeAction();\n    });\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵtemplate(2, DataTableBodyCellComponent_ng_container_2_button_1_i_2_Template, 1, 0, \"i\", 8);\n    i0.ɵɵtemplate(3, DataTableBodyCellComponent_ng_container_2_button_1_i_3_Template, 1, 0, \"i\", 9);\n    i0.ɵɵtemplate(4, DataTableBodyCellComponent_ng_container_2_button_1_i_4_Template, 1, 0, \"i\", 10);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r6.treeStatus === \"disabled\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.treeStatus === \"loading\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.treeStatus === \"collapsed\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.treeStatus === \"expanded\" || ctx_r6.treeStatus === \"disabled\");\n  }\n}\n\nfunction DataTableBodyCellComponent_ng_container_2_2_ng_template_0_Template(rf, ctx) {}\n\nconst _c2 = function (a0) {\n  return {\n    cellContext: a0\n  };\n};\n\nfunction DataTableBodyCellComponent_ng_container_2_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, DataTableBodyCellComponent_ng_container_2_2_ng_template_0_Template, 0, 0, \"ng-template\", 14);\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r7.column.treeToggleTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c2, ctx_r7.cellContext));\n  }\n}\n\nfunction DataTableBodyCellComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, DataTableBodyCellComponent_ng_container_2_button_1_Template, 5, 4, \"button\", 6);\n    i0.ɵɵtemplate(2, DataTableBodyCellComponent_ng_container_2_2_Template, 1, 4, null, 2);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.column.treeToggleTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.column.treeToggleTemplate);\n  }\n}\n\nfunction DataTableBodyCellComponent_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 15);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"title\", ctx_r2.sanitizedValue)(\"innerHTML\", ctx_r2.value, i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction DataTableBodyCellComponent_4_ng_template_0_Template(rf, ctx) {}\n\nfunction DataTableBodyCellComponent_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, DataTableBodyCellComponent_4_ng_template_0_Template, 0, 0, \"ng-template\", 14, 16, i0.ɵɵtemplateRefExtractor);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.column.cellTemplate)(\"ngTemplateOutletContext\", ctx_r3.cellContext);\n  }\n}\n\nfunction DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"datatable-body-cell\", 3);\n    i0.ɵɵlistener(\"activate\", function DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template_datatable_body_cell_activate_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const ii_r5 = restoredCtx.index;\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return ctx_r6.onActivate($event, ii_r5);\n    })(\"treeAction\", function DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template_datatable_body_cell_treeAction_0_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return ctx_r8.onTreeAction();\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const column_r4 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"row\", ctx_r3.row)(\"group\", ctx_r3.group)(\"expanded\", ctx_r3.expanded)(\"isSelected\", ctx_r3.isSelected)(\"rowIndex\", ctx_r3.rowIndex)(\"column\", column_r4)(\"rowHeight\", ctx_r3.rowHeight)(\"displayCheck\", ctx_r3.displayCheck)(\"treeStatus\", ctx_r3.treeStatus);\n  }\n}\n\nfunction DataTableBodyRowComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template, 1, 9, \"datatable-body-cell\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const colGroup_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMapInterpolate1(\"datatable-row-\", colGroup_r1.type, \" datatable-row-group\");\n    i0.ɵɵproperty(\"ngStyle\", ctx_r0._groupStyles[colGroup_r1.type]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", colGroup_r1.columns)(\"ngForTrackBy\", ctx_r0.columnTrackingFn);\n  }\n}\n\nfunction DataTableSummaryRowComponent_datatable_body_row_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"datatable-body-row\", 1);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"innerWidth\", ctx_r0.innerWidth)(\"offsetX\", ctx_r0.offsetX)(\"columns\", ctx_r0._internalColumns)(\"rowHeight\", ctx_r0.rowHeight)(\"row\", ctx_r0.summaryRow)(\"rowIndex\", -1);\n  }\n}\n\nfunction DataTableRowWrapperComponent_div_0_1_ng_template_0_Template(rf, ctx) {}\n\nfunction DataTableRowWrapperComponent_div_0_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, DataTableRowWrapperComponent_div_0_1_ng_template_0_Template, 0, 0, \"ng-template\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.groupHeader.template)(\"ngTemplateOutletContext\", ctx_r3.groupContext);\n  }\n}\n\nfunction DataTableRowWrapperComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵtemplate(1, DataTableRowWrapperComponent_div_0_1_Template, 1, 2, null, 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", ctx_r0.getGroupHeaderStyle());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.groupHeader && ctx_r0.groupHeader.template);\n  }\n}\n\nfunction DataTableRowWrapperComponent_ng_content_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 0, [\"*ngIf\", \"(groupHeader && groupHeader.template && expanded) || !groupHeader || !groupHeader.template\"]);\n  }\n}\n\nfunction DataTableRowWrapperComponent_div_2_1_ng_template_0_Template(rf, ctx) {}\n\nfunction DataTableRowWrapperComponent_div_2_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, DataTableRowWrapperComponent_div_2_1_ng_template_0_Template, 0, 0, \"ng-template\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r5.rowDetail.template)(\"ngTemplateOutletContext\", ctx_r5.rowContext);\n  }\n}\n\nfunction DataTableRowWrapperComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtemplate(1, DataTableRowWrapperComponent_div_2_1_Template, 1, 2, null, 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"height\", ctx_r2.detailRowHeight, \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.rowDetail && ctx_r2.rowDetail.template);\n  }\n}\n\nfunction DataTableBodyComponent_datatable_progress_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"datatable-progress\");\n  }\n}\n\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"datatable-summary-row\", 9);\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"rowHeight\", ctx_r4.summaryHeight)(\"offsetX\", ctx_r4.offsetX)(\"innerWidth\", ctx_r4.innerWidth)(\"rows\", ctx_r4.rows)(\"columns\", ctx_r4.columns);\n  }\n}\n\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"datatable-body-row\", 13);\n    i0.ɵɵlistener(\"treeAction\", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template_datatable_body_row_treeAction_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const group_r7 = i0.ɵɵnextContext().$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.onTreeAction(group_r7);\n    })(\"activate\", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template_datatable_body_row_activate_0_listener($event) {\n      i0.ɵɵrestoreView(_r14);\n      const i_r8 = i0.ɵɵnextContext().index;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n\n      const _r1 = i0.ɵɵreference(2);\n\n      return _r1.onActivate($event, ctx_r15.indexes.first + i_r8);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r7 = i0.ɵɵnextContext().$implicit;\n    const ctx_r9 = i0.ɵɵnextContext(2);\n\n    const _r1 = i0.ɵɵreference(2);\n\n    i0.ɵɵproperty(\"isSelected\", _r1.getRowSelected(group_r7))(\"innerWidth\", ctx_r9.innerWidth)(\"offsetX\", ctx_r9.offsetX)(\"columns\", ctx_r9.columns)(\"rowHeight\", ctx_r9.getRowHeight(group_r7))(\"row\", group_r7)(\"rowIndex\", ctx_r9.getRowIndex(group_r7))(\"expanded\", ctx_r9.getRowExpanded(group_r7))(\"rowClass\", ctx_r9.rowClass)(\"displayCheck\", ctx_r9.displayCheck)(\"treeStatus\", group_r7 && group_r7.treeStatus);\n  }\n}\n\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_datatable_body_row_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"datatable-body-row\", 15);\n    i0.ɵɵlistener(\"activate\", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_datatable_body_row_0_Template_datatable_body_row_activate_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r22);\n      const i_r20 = restoredCtx.index;\n      i0.ɵɵnextContext(4);\n\n      const _r1 = i0.ɵɵreference(2);\n\n      return _r1.onActivate($event, i_r20);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r19 = ctx.$implicit;\n    const group_r7 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r18 = i0.ɵɵnextContext(2);\n\n    const _r1 = i0.ɵɵreference(2);\n\n    i0.ɵɵproperty(\"isSelected\", _r1.getRowSelected(row_r19))(\"innerWidth\", ctx_r18.innerWidth)(\"offsetX\", ctx_r18.offsetX)(\"columns\", ctx_r18.columns)(\"rowHeight\", ctx_r18.getRowHeight(row_r19))(\"row\", row_r19)(\"group\", group_r7.value)(\"rowIndex\", ctx_r18.getRowIndex(row_r19))(\"expanded\", ctx_r18.getRowExpanded(row_r19))(\"rowClass\", ctx_r18.rowClass);\n  }\n}\n\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_datatable_body_row_0_Template, 1, 10, \"datatable-body-row\", 14);\n  }\n\n  if (rf & 2) {\n    const group_r7 = i0.ɵɵnextContext().$implicit;\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngForOf\", group_r7.value)(\"ngForTrackBy\", ctx_r11.rowTrackingFn);\n  }\n}\n\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"datatable-row-wrapper\", 10);\n    i0.ɵɵlistener(\"rowContextmenu\", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_Template_datatable_row_wrapper_rowContextmenu_0_listener($event) {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r25 = i0.ɵɵnextContext(2);\n      return ctx_r25.rowContextmenu.emit($event);\n    });\n    i0.ɵɵtemplate(1, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template, 1, 11, \"datatable-body-row\", 11);\n    i0.ɵɵtemplate(2, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_Template, 1, 2, \"ng-template\", null, 12, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r7 = ctx.$implicit;\n    const i_r8 = ctx.index;\n\n    const _r10 = i0.ɵɵreference(3);\n\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"groupedRows\", ctx_r5.groupedRows)(\"innerWidth\", ctx_r5.innerWidth)(\"ngStyle\", ctx_r5.getRowsStyles(group_r7))(\"rowDetail\", ctx_r5.rowDetail)(\"groupHeader\", ctx_r5.groupHeader)(\"offsetX\", ctx_r5.offsetX)(\"detailRowHeight\", ctx_r5.getDetailRowHeight(group_r7 && group_r7[i_r8], i_r8))(\"row\", group_r7)(\"expanded\", ctx_r5.getRowExpanded(group_r7))(\"rowIndex\", ctx_r5.getRowIndex(group_r7 && group_r7[i_r8]));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r5.groupedRows)(\"ngIfElse\", _r10);\n  }\n}\n\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"datatable-summary-row\", 16);\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r6.getBottomSummaryRowStyles())(\"rowHeight\", ctx_r6.summaryHeight)(\"offsetX\", ctx_r6.offsetX)(\"innerWidth\", ctx_r6.innerWidth)(\"rows\", ctx_r6.rows)(\"columns\", ctx_r6.columns);\n  }\n}\n\nfunction DataTableBodyComponent_datatable_scroller_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r28 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"datatable-scroller\", 5);\n    i0.ɵɵlistener(\"scroll\", function DataTableBodyComponent_datatable_scroller_3_Template_datatable_scroller_scroll_0_listener($event) {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r27 = i0.ɵɵnextContext();\n      return ctx_r27.onBodyScroll($event);\n    });\n    i0.ɵɵtemplate(1, DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_1_Template, 1, 5, \"datatable-summary-row\", 6);\n    i0.ɵɵtemplate(2, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_Template, 4, 12, \"datatable-row-wrapper\", 7);\n    i0.ɵɵtemplate(3, DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_3_Template, 1, 6, \"datatable-summary-row\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"scrollbarV\", ctx_r2.scrollbarV)(\"scrollbarH\", ctx_r2.scrollbarH)(\"scrollHeight\", ctx_r2.scrollHeight)(\"scrollWidth\", ctx_r2.columnGroupWidths == null ? null : ctx_r2.columnGroupWidths.total);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.summaryRow && ctx_r2.summaryPosition === \"top\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.temp)(\"ngForTrackBy\", ctx_r2.rowTrackingFn);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.summaryRow && ctx_r2.summaryPosition === \"bottom\");\n  }\n}\n\nfunction DataTableBodyComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 17);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"innerHTML\", ctx_r3.emptyMessage, i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction DataTableHeaderCellComponent_1_ng_template_0_Template(rf, ctx) {}\n\nfunction DataTableHeaderCellComponent_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, DataTableHeaderCellComponent_1_ng_template_0_Template, 0, 0, \"ng-template\", 5);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.targetMarkerTemplate)(\"ngTemplateOutletContext\", ctx_r0.targetMarkerContext);\n  }\n}\n\nfunction DataTableHeaderCellComponent_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"label\", 6)(1, \"input\", 7);\n    i0.ɵɵlistener(\"change\", function DataTableHeaderCellComponent_label_2_Template_input_change_1_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.select.emit(!ctx_r5.allRowsSelected);\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"checked\", ctx_r1.allRowsSelected);\n  }\n}\n\nfunction DataTableHeaderCellComponent_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 8)(1, \"span\", 9);\n    i0.ɵɵlistener(\"click\", function DataTableHeaderCellComponent_span_3_Template_span_click_1_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.onSort();\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r2.name, i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction DataTableHeaderCellComponent_4_ng_template_0_Template(rf, ctx) {}\n\nfunction DataTableHeaderCellComponent_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, DataTableHeaderCellComponent_4_ng_template_0_Template, 0, 0, \"ng-template\", 5);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.column.headerTemplate)(\"ngTemplateOutletContext\", ctx_r3.cellContext);\n  }\n}\n\nfunction DataTableHeaderComponent_div_1_datatable_header_cell_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"datatable-header-cell\", 4);\n    i0.ɵɵlistener(\"resize\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_resize_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const column_r3 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return ctx_r4.onColumnResized($event, column_r3);\n    })(\"longPressStart\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_longPressStart_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return ctx_r6.onLongPressStart($event);\n    })(\"longPressEnd\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_longPressEnd_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return ctx_r7.onLongPressEnd($event);\n    })(\"sort\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_sort_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return ctx_r8.onSort($event);\n    })(\"select\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return ctx_r9.select.emit($event);\n    })(\"columnContextmenu\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_columnContextmenu_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return ctx_r10.columnContextmenu.emit($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const column_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"resizeEnabled\", column_r3.resizeable)(\"pressModel\", column_r3)(\"pressEnabled\", ctx_r2.reorderable && column_r3.draggable)(\"dragX\", ctx_r2.reorderable && column_r3.draggable && column_r3.dragging)(\"dragY\", false)(\"dragModel\", column_r3)(\"dragEventTarget\", ctx_r2.dragEventTarget)(\"headerHeight\", ctx_r2.headerHeight)(\"isTarget\", column_r3.isTarget)(\"targetMarkerTemplate\", ctx_r2.targetMarkerTemplate)(\"targetMarkerContext\", column_r3.targetMarkerContext)(\"column\", column_r3)(\"sortType\", ctx_r2.sortType)(\"sorts\", ctx_r2.sorts)(\"selectionType\", ctx_r2.selectionType)(\"sortAscendingIcon\", ctx_r2.sortAscendingIcon)(\"sortDescendingIcon\", ctx_r2.sortDescendingIcon)(\"sortUnsetIcon\", ctx_r2.sortUnsetIcon)(\"allRowsSelected\", ctx_r2.allRowsSelected);\n  }\n}\n\nfunction DataTableHeaderComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵtemplate(1, DataTableHeaderComponent_div_1_datatable_header_cell_1_Template, 1, 19, \"datatable-header-cell\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const colGroup_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(\"datatable-row-\" + colGroup_r1.type);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r0._styleByGroup[colGroup_r1.type]);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", colGroup_r1.columns)(\"ngForTrackBy\", ctx_r0.columnTrackingFn);\n  }\n}\n\nfunction DataTablePagerComponent_li_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 6)(1, \"a\", 7);\n    i0.ɵɵlistener(\"click\", function DataTablePagerComponent_li_7_Template_a_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const pg_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.selectPage(pg_r1.number);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const pg_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"active\", pg_r1.number === ctx_r0.page);\n    i0.ɵɵattribute(\"aria-label\", \"page \" + pg_r1.number);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", pg_r1.text, \" \");\n  }\n}\n\nfunction DataTableFooterComponent_1_ng_template_0_Template(rf, ctx) {}\n\nconst _c3 = function (a0, a1, a2, a3, a4) {\n  return {\n    rowCount: a0,\n    pageSize: a1,\n    selectedCount: a2,\n    curPage: a3,\n    offset: a4\n  };\n};\n\nfunction DataTableFooterComponent_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, DataTableFooterComponent_1_ng_template_0_Template, 0, 0, \"ng-template\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.footerTemplate.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction5(2, _c3, ctx_r0.rowCount, ctx_r0.pageSize, ctx_r0.selectedCount, ctx_r0.curPage, ctx_r0.offset));\n  }\n}\n\nfunction DataTableFooterComponent_div_2_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", ctx_r4.selectedCount == null ? null : ctx_r4.selectedCount.toLocaleString(), \" \", ctx_r4.selectedMessage, \" / \");\n  }\n}\n\nfunction DataTableFooterComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtemplate(1, DataTableFooterComponent_div_2_span_1_Template, 2, 2, \"span\", 1);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.selectedMessage);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", ctx_r1.rowCount == null ? null : ctx_r1.rowCount.toLocaleString(), \" \", ctx_r1.totalMessage, \" \");\n  }\n}\n\nfunction DataTableFooterComponent_datatable_pager_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"datatable-pager\", 6);\n    i0.ɵɵlistener(\"change\", function DataTableFooterComponent_datatable_pager_3_Template_datatable_pager_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.page.emit($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"pagerLeftArrowIcon\", ctx_r2.pagerLeftArrowIcon)(\"pagerRightArrowIcon\", ctx_r2.pagerRightArrowIcon)(\"pagerPreviousIcon\", ctx_r2.pagerPreviousIcon)(\"pagerNextIcon\", ctx_r2.pagerNextIcon)(\"page\", ctx_r2.curPage)(\"size\", ctx_r2.pageSize)(\"count\", ctx_r2.rowCount)(\"hidden\", !ctx_r2.isVisible);\n  }\n}\n\nconst _c4 = function (a0) {\n  return {\n    \"selected-count\": a0\n  };\n};\n\nfunction DatatableComponent_datatable_header_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"datatable-header\", 4);\n    i0.ɵɵlistener(\"sort\", function DatatableComponent_datatable_header_1_Template_datatable_header_sort_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.onColumnSort($event);\n    })(\"resize\", function DatatableComponent_datatable_header_1_Template_datatable_header_resize_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onColumnResize($event);\n    })(\"reorder\", function DatatableComponent_datatable_header_1_Template_datatable_header_reorder_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.onColumnReorder($event);\n    })(\"select\", function DatatableComponent_datatable_header_1_Template_datatable_header_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.onHeaderSelect($event);\n    })(\"columnContextmenu\", function DatatableComponent_datatable_header_1_Template_datatable_header_columnContextmenu_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.onColumnContextmenu($event);\n    });\n    i0.ɵɵpipe(1, \"async\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"sorts\", ctx_r0.sorts)(\"sortType\", ctx_r0.sortType)(\"scrollbarH\", ctx_r0.scrollbarH)(\"innerWidth\", ctx_r0._innerWidth)(\"offsetX\", i0.ɵɵpipeBind1(1, 15, ctx_r0._offsetX))(\"dealsWithGroup\", ctx_r0.groupedRows !== undefined)(\"columns\", ctx_r0._internalColumns)(\"headerHeight\", ctx_r0.headerHeight)(\"reorderable\", ctx_r0.reorderable)(\"targetMarkerTemplate\", ctx_r0.targetMarkerTemplate)(\"sortAscendingIcon\", ctx_r0.cssClasses.sortAscending)(\"sortDescendingIcon\", ctx_r0.cssClasses.sortDescending)(\"sortUnsetIcon\", ctx_r0.cssClasses.sortUnset)(\"allRowsSelected\", ctx_r0.allRowsSelected)(\"selectionType\", ctx_r0.selectionType);\n  }\n}\n\nfunction DatatableComponent_datatable_footer_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"datatable-footer\", 5);\n    i0.ɵɵlistener(\"page\", function DatatableComponent_datatable_footer_4_Template_datatable_footer_page_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.onFooterPage($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"rowCount\", ctx_r1.rowCount)(\"pageSize\", ctx_r1.pageSize)(\"offset\", ctx_r1.offset)(\"footerHeight\", ctx_r1.footerHeight)(\"footerTemplate\", ctx_r1.footer)(\"totalMessage\", ctx_r1.messages.totalMessage)(\"pagerLeftArrowIcon\", ctx_r1.cssClasses.pagerLeftArrow)(\"pagerRightArrowIcon\", ctx_r1.cssClasses.pagerRightArrow)(\"pagerPreviousIcon\", ctx_r1.cssClasses.pagerPrevious)(\"selectedCount\", ctx_r1.selected.length)(\"selectedMessage\", !!ctx_r1.selectionType && ctx_r1.messages.selectedMessage)(\"pagerNextIcon\", ctx_r1.cssClasses.pagerNext);\n  }\n}\n\nclass ScrollbarHelper {\n  constructor(document) {\n    this.document = document;\n    this.width = this.getWidth();\n  }\n\n  getWidth() {\n    const outer = this.document.createElement('div');\n    outer.style.visibility = 'hidden';\n    outer.style.width = '100px';\n    outer.style.msOverflowStyle = 'scrollbar';\n    this.document.body.appendChild(outer);\n    const widthNoScroll = outer.offsetWidth;\n    outer.style.overflow = 'scroll';\n    const inner = this.document.createElement('div');\n    inner.style.width = '100%';\n    outer.appendChild(inner);\n    const widthWithScroll = inner.offsetWidth;\n    outer.parentNode.removeChild(outer);\n    return widthNoScroll - widthWithScroll;\n  }\n\n}\n\nScrollbarHelper.ɵfac = function ScrollbarHelper_Factory(t) {\n  return new (t || ScrollbarHelper)(i0.ɵɵinject(DOCUMENT));\n};\n\nScrollbarHelper.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ScrollbarHelper,\n  factory: ScrollbarHelper.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScrollbarHelper, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Gets the width of the scrollbar.  Nesc for windows\n * http://stackoverflow.com/a/13382873/888165\n */\n\n\nclass DimensionsHelper {\n  getDimensions(element) {\n    return element.getBoundingClientRect();\n  }\n\n}\n\nDimensionsHelper.ɵfac = function DimensionsHelper_Factory(t) {\n  return new (t || DimensionsHelper)();\n};\n\nDimensionsHelper.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DimensionsHelper,\n  factory: DimensionsHelper.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DimensionsHelper, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * service to make DatatableComponent aware of changes to\n * input bindings of DataTableColumnDirective\n */\n\n\nclass ColumnChangesService {\n  constructor() {\n    this.columnInputChanges = new Subject();\n  }\n\n  get columnInputChanges$() {\n    return this.columnInputChanges.asObservable();\n  }\n\n  onInputChange() {\n    this.columnInputChanges.next();\n  }\n\n}\n\nColumnChangesService.ɵfac = function ColumnChangesService_Factory(t) {\n  return new (t || ColumnChangesService)();\n};\n\nColumnChangesService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ColumnChangesService,\n  factory: ColumnChangesService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ColumnChangesService, [{\n    type: Injectable\n  }], null, null);\n})();\n\nclass DataTableFooterTemplateDirective {\n  constructor(template) {\n    this.template = template;\n  }\n\n}\n\nDataTableFooterTemplateDirective.ɵfac = function DataTableFooterTemplateDirective_Factory(t) {\n  return new (t || DataTableFooterTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nDataTableFooterTemplateDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: DataTableFooterTemplateDirective,\n  selectors: [[\"\", \"ngx-datatable-footer-template\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataTableFooterTemplateDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngx-datatable-footer-template]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\n/**\n * Visibility Observer Directive\n *\n * Usage:\n *\n * \t\t<div\n * \t\t\tvisibilityObserver\n * \t\t\t(visible)=\"onVisible($event)\">\n * \t\t</div>\n *\n */\n\n\nclass VisibilityDirective {\n  constructor(element, zone) {\n    this.element = element;\n    this.zone = zone;\n    this.isVisible = false;\n    this.visible = new EventEmitter();\n  }\n\n  ngOnInit() {\n    this.runCheck();\n  }\n\n  ngOnDestroy() {\n    clearTimeout(this.timeout);\n  }\n\n  onVisibilityChange() {\n    // trigger zone recalc for columns\n    this.zone.run(() => {\n      this.isVisible = true;\n      this.visible.emit(true);\n    });\n  }\n\n  runCheck() {\n    const check = () => {\n      // https://davidwalsh.name/offsetheight-visibility\n      const {\n        offsetHeight,\n        offsetWidth\n      } = this.element.nativeElement;\n\n      if (offsetHeight && offsetWidth) {\n        clearTimeout(this.timeout);\n        this.onVisibilityChange();\n      } else {\n        clearTimeout(this.timeout);\n        this.zone.runOutsideAngular(() => {\n          this.timeout = setTimeout(() => check(), 50);\n        });\n      }\n    };\n\n    this.timeout = setTimeout(() => check());\n  }\n\n}\n\nVisibilityDirective.ɵfac = function VisibilityDirective_Factory(t) {\n  return new (t || VisibilityDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nVisibilityDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: VisibilityDirective,\n  selectors: [[\"\", \"visibilityObserver\", \"\"]],\n  hostVars: 2,\n  hostBindings: function VisibilityDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"visible\", ctx.isVisible);\n    }\n  },\n  outputs: {\n    visible: \"visible\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(VisibilityDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[visibilityObserver]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    isVisible: [{\n      type: HostBinding,\n      args: ['class.visible']\n    }],\n    visible: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * Draggable Directive for Angular2\n *\n * Inspiration:\n *   https://github.com/AngularClass/angular2-examples/blob/master/rx-draggable/directives/draggable.ts\n *   http://stackoverflow.com/questions/35662530/how-to-implement-drag-and-drop-in-angular2\n *\n */\n\n\nclass DraggableDirective {\n  constructor(element) {\n    this.dragX = true;\n    this.dragY = true;\n    this.dragStart = new EventEmitter();\n    this.dragging = new EventEmitter();\n    this.dragEnd = new EventEmitter();\n    this.isDragging = false;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    if (changes['dragEventTarget'] && changes['dragEventTarget'].currentValue && this.dragModel.dragging) {\n      this.onMousedown(changes['dragEventTarget'].currentValue);\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroySubscription();\n  }\n\n  onMouseup(event) {\n    if (!this.isDragging) return;\n    this.isDragging = false;\n    this.element.classList.remove('dragging');\n\n    if (this.subscription) {\n      this._destroySubscription();\n\n      this.dragEnd.emit({\n        event,\n        element: this.element,\n        model: this.dragModel\n      });\n    }\n  }\n\n  onMousedown(event) {\n    // we only want to drag the inner header text\n    const isDragElm = event.target.classList.contains('draggable');\n\n    if (isDragElm && (this.dragX || this.dragY)) {\n      event.preventDefault();\n      this.isDragging = true;\n      const mouseDownPos = {\n        x: event.clientX,\n        y: event.clientY\n      };\n      const mouseup = fromEvent(document, 'mouseup');\n      this.subscription = mouseup.subscribe(ev => this.onMouseup(ev));\n      const mouseMoveSub = fromEvent(document, 'mousemove').pipe(takeUntil(mouseup)).subscribe(ev => this.move(ev, mouseDownPos));\n      this.subscription.add(mouseMoveSub);\n      this.dragStart.emit({\n        event,\n        element: this.element,\n        model: this.dragModel\n      });\n    }\n  }\n\n  move(event, mouseDownPos) {\n    if (!this.isDragging) return;\n    const x = event.clientX - mouseDownPos.x;\n    const y = event.clientY - mouseDownPos.y;\n    if (this.dragX) this.element.style.left = `${x}px`;\n    if (this.dragY) this.element.style.top = `${y}px`;\n    this.element.classList.add('dragging');\n    this.dragging.emit({\n      event,\n      element: this.element,\n      model: this.dragModel\n    });\n  }\n\n  _destroySubscription() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n  }\n\n}\n\nDraggableDirective.ɵfac = function DraggableDirective_Factory(t) {\n  return new (t || DraggableDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nDraggableDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: DraggableDirective,\n  selectors: [[\"\", \"draggable\", \"\"]],\n  inputs: {\n    dragEventTarget: \"dragEventTarget\",\n    dragModel: \"dragModel\",\n    dragX: \"dragX\",\n    dragY: \"dragY\"\n  },\n  outputs: {\n    dragStart: \"dragStart\",\n    dragging: \"dragging\",\n    dragEnd: \"dragEnd\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DraggableDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[draggable]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    dragEventTarget: [{\n      type: Input\n    }],\n    dragModel: [{\n      type: Input\n    }],\n    dragX: [{\n      type: Input\n    }],\n    dragY: [{\n      type: Input\n    }],\n    dragStart: [{\n      type: Output\n    }],\n    dragging: [{\n      type: Output\n    }],\n    dragEnd: [{\n      type: Output\n    }]\n  });\n})();\n\nclass ResizeableDirective {\n  constructor(element, renderer) {\n    this.renderer = renderer;\n    this.resizeEnabled = true;\n    this.resize = new EventEmitter();\n    this.resizing = false;\n    this.element = element.nativeElement;\n  }\n\n  ngAfterViewInit() {\n    const renderer2 = this.renderer;\n    this.resizeHandle = renderer2.createElement('span');\n\n    if (this.resizeEnabled) {\n      renderer2.addClass(this.resizeHandle, 'resize-handle');\n    } else {\n      renderer2.addClass(this.resizeHandle, 'resize-handle--not-resizable');\n    }\n\n    renderer2.appendChild(this.element, this.resizeHandle);\n  }\n\n  ngOnDestroy() {\n    this._destroySubscription();\n\n    if (this.renderer.destroyNode) {\n      this.renderer.destroyNode(this.resizeHandle);\n    } else if (this.resizeHandle) {\n      this.renderer.removeChild(this.renderer.parentNode(this.resizeHandle), this.resizeHandle);\n    }\n  }\n\n  onMouseup() {\n    this.resizing = false;\n\n    if (this.subscription && !this.subscription.closed) {\n      this._destroySubscription();\n\n      this.resize.emit(this.element.clientWidth);\n    }\n  }\n\n  onMousedown(event) {\n    const isHandle = event.target.classList.contains('resize-handle');\n    const initialWidth = this.element.clientWidth;\n    const mouseDownScreenX = event.screenX;\n\n    if (isHandle) {\n      event.stopPropagation();\n      this.resizing = true;\n      const mouseup = fromEvent(document, 'mouseup');\n      this.subscription = mouseup.subscribe(ev => this.onMouseup());\n      const mouseMoveSub = fromEvent(document, 'mousemove').pipe(takeUntil(mouseup)).subscribe(e => this.move(e, initialWidth, mouseDownScreenX));\n      this.subscription.add(mouseMoveSub);\n    }\n  }\n\n  move(event, initialWidth, mouseDownScreenX) {\n    const movementX = event.screenX - mouseDownScreenX;\n    const newWidth = initialWidth + movementX;\n    const overMinWidth = !this.minWidth || newWidth >= this.minWidth;\n    const underMaxWidth = !this.maxWidth || newWidth <= this.maxWidth;\n\n    if (overMinWidth && underMaxWidth) {\n      this.element.style.width = `${newWidth}px`;\n    }\n  }\n\n  _destroySubscription() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n  }\n\n}\n\nResizeableDirective.ɵfac = function ResizeableDirective_Factory(t) {\n  return new (t || ResizeableDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n};\n\nResizeableDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: ResizeableDirective,\n  selectors: [[\"\", \"resizeable\", \"\"]],\n  hostVars: 2,\n  hostBindings: function ResizeableDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mousedown\", function ResizeableDirective_mousedown_HostBindingHandler($event) {\n        return ctx.onMousedown($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"resizeable\", ctx.resizeEnabled);\n    }\n  },\n  inputs: {\n    resizeEnabled: \"resizeEnabled\",\n    minWidth: \"minWidth\",\n    maxWidth: \"maxWidth\"\n  },\n  outputs: {\n    resize: \"resize\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ResizeableDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[resizeable]',\n      host: {\n        '[class.resizeable]': 'resizeEnabled'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }];\n  }, {\n    resizeEnabled: [{\n      type: Input\n    }],\n    minWidth: [{\n      type: Input\n    }],\n    maxWidth: [{\n      type: Input\n    }],\n    resize: [{\n      type: Output\n    }],\n    onMousedown: [{\n      type: HostListener,\n      args: ['mousedown', ['$event']]\n    }]\n  });\n})();\n\nclass OrderableDirective {\n  constructor(differs, document) {\n    this.document = document;\n    this.reorder = new EventEmitter();\n    this.targetChanged = new EventEmitter();\n    this.differ = differs.find({}).create();\n  }\n\n  ngAfterContentInit() {\n    // HACK: Investigate Better Way\n    this.updateSubscriptions();\n    this.draggables.changes.subscribe(this.updateSubscriptions.bind(this));\n  }\n\n  ngOnDestroy() {\n    this.draggables.forEach(d => {\n      d.dragStart.unsubscribe();\n      d.dragging.unsubscribe();\n      d.dragEnd.unsubscribe();\n    });\n  }\n\n  updateSubscriptions() {\n    const diffs = this.differ.diff(this.createMapDiffs());\n\n    if (diffs) {\n      const subscribe = ({\n        currentValue,\n        previousValue\n      }) => {\n        unsubscribe({\n          previousValue\n        });\n\n        if (currentValue) {\n          currentValue.dragStart.subscribe(this.onDragStart.bind(this));\n          currentValue.dragging.subscribe(this.onDragging.bind(this));\n          currentValue.dragEnd.subscribe(this.onDragEnd.bind(this));\n        }\n      };\n\n      const unsubscribe = ({\n        previousValue\n      }) => {\n        if (previousValue) {\n          previousValue.dragStart.unsubscribe();\n          previousValue.dragging.unsubscribe();\n          previousValue.dragEnd.unsubscribe();\n        }\n      };\n\n      diffs.forEachAddedItem(subscribe); // diffs.forEachChangedItem(subscribe.bind(this));\n\n      diffs.forEachRemovedItem(unsubscribe);\n    }\n  }\n\n  onDragStart() {\n    this.positions = {};\n    let i = 0;\n\n    for (const dragger of this.draggables.toArray()) {\n      const elm = dragger.element;\n      const left = parseInt(elm.offsetLeft.toString(), 0);\n      this.positions[dragger.dragModel.prop] = {\n        left,\n        right: left + parseInt(elm.offsetWidth.toString(), 0),\n        index: i++,\n        element: elm\n      };\n    }\n  }\n\n  onDragging({\n    element,\n    model,\n    event\n  }) {\n    const prevPos = this.positions[model.prop];\n    const target = this.isTarget(model, event);\n\n    if (target) {\n      if (this.lastDraggingIndex !== target.i) {\n        this.targetChanged.emit({\n          prevIndex: this.lastDraggingIndex,\n          newIndex: target.i,\n          initialIndex: prevPos.index\n        });\n        this.lastDraggingIndex = target.i;\n      }\n    } else if (this.lastDraggingIndex !== prevPos.index) {\n      this.targetChanged.emit({\n        prevIndex: this.lastDraggingIndex,\n        initialIndex: prevPos.index\n      });\n      this.lastDraggingIndex = prevPos.index;\n    }\n  }\n\n  onDragEnd({\n    element,\n    model,\n    event\n  }) {\n    const prevPos = this.positions[model.prop];\n    const target = this.isTarget(model, event);\n\n    if (target) {\n      this.reorder.emit({\n        prevIndex: prevPos.index,\n        newIndex: target.i,\n        model\n      });\n    }\n\n    this.lastDraggingIndex = undefined;\n    element.style.left = 'auto';\n  }\n\n  isTarget(model, event) {\n    let i = 0;\n    const x = event.x || event.clientX;\n    const y = event.y || event.clientY;\n    const targets = this.document.elementsFromPoint(x, y);\n\n    for (const prop in this.positions) {\n      // current column position which throws event.\n      const pos = this.positions[prop]; // since we drag the inner span, we need to find it in the elements at the cursor\n\n      if (model.prop !== prop && targets.find(el => el === pos.element)) {\n        return {\n          pos,\n          i\n        };\n      }\n\n      i++;\n    }\n  }\n\n  createMapDiffs() {\n    return this.draggables.toArray().reduce((acc, curr) => {\n      acc[curr.dragModel.$$id] = curr;\n      return acc;\n    }, {});\n  }\n\n}\n\nOrderableDirective.ɵfac = function OrderableDirective_Factory(t) {\n  return new (t || OrderableDirective)(i0.ɵɵdirectiveInject(i0.KeyValueDiffers), i0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nOrderableDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: OrderableDirective,\n  selectors: [[\"\", \"orderable\", \"\"]],\n  contentQueries: function OrderableDirective_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, DraggableDirective, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.draggables = _t);\n    }\n  },\n  outputs: {\n    reorder: \"reorder\",\n    targetChanged: \"targetChanged\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OrderableDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[orderable]'\n    }]\n  }], function () {\n    return [{\n      type: i0.KeyValueDiffers\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    reorder: [{\n      type: Output\n    }],\n    targetChanged: [{\n      type: Output\n    }],\n    draggables: [{\n      type: ContentChildren,\n      args: [DraggableDirective, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n\nclass LongPressDirective {\n  constructor() {\n    this.pressEnabled = true;\n    this.duration = 500;\n    this.longPressStart = new EventEmitter();\n    this.longPressing = new EventEmitter();\n    this.longPressEnd = new EventEmitter();\n    this.mouseX = 0;\n    this.mouseY = 0;\n  }\n\n  get press() {\n    return this.pressing;\n  }\n\n  get isLongPress() {\n    return this.isLongPressing;\n  }\n\n  onMouseDown(event) {\n    // don't do right/middle clicks\n    if (event.which !== 1 || !this.pressEnabled) return; // don't start drag if its on resize handle\n\n    const target = event.target;\n    if (target.classList.contains('resize-handle')) return;\n    this.mouseX = event.clientX;\n    this.mouseY = event.clientY;\n    this.pressing = true;\n    this.isLongPressing = false;\n    const mouseup = fromEvent(document, 'mouseup');\n    this.subscription = mouseup.subscribe(ev => this.onMouseup());\n    this.timeout = setTimeout(() => {\n      this.isLongPressing = true;\n      this.longPressStart.emit({\n        event,\n        model: this.pressModel\n      });\n      this.subscription.add(fromEvent(document, 'mousemove').pipe(takeUntil(mouseup)).subscribe(mouseEvent => this.onMouseMove(mouseEvent)));\n      this.loop(event);\n    }, this.duration);\n    this.loop(event);\n  }\n\n  onMouseMove(event) {\n    if (this.pressing && !this.isLongPressing) {\n      const xThres = Math.abs(event.clientX - this.mouseX) > 10;\n      const yThres = Math.abs(event.clientY - this.mouseY) > 10;\n\n      if (xThres || yThres) {\n        this.endPress();\n      }\n    }\n  }\n\n  loop(event) {\n    if (this.isLongPressing) {\n      this.timeout = setTimeout(() => {\n        this.longPressing.emit({\n          event,\n          model: this.pressModel\n        });\n        this.loop(event);\n      }, 50);\n    }\n  }\n\n  endPress() {\n    clearTimeout(this.timeout);\n    this.isLongPressing = false;\n    this.pressing = false;\n\n    this._destroySubscription();\n\n    this.longPressEnd.emit({\n      model: this.pressModel\n    });\n  }\n\n  onMouseup() {\n    this.endPress();\n  }\n\n  ngOnDestroy() {\n    this._destroySubscription();\n  }\n\n  _destroySubscription() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n      this.subscription = undefined;\n    }\n  }\n\n}\n\nLongPressDirective.ɵfac = function LongPressDirective_Factory(t) {\n  return new (t || LongPressDirective)();\n};\n\nLongPressDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: LongPressDirective,\n  selectors: [[\"\", \"long-press\", \"\"]],\n  hostVars: 4,\n  hostBindings: function LongPressDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mousedown\", function LongPressDirective_mousedown_HostBindingHandler($event) {\n        return ctx.onMouseDown($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"press\", ctx.press)(\"longpress\", ctx.isLongPress);\n    }\n  },\n  inputs: {\n    pressEnabled: \"pressEnabled\",\n    pressModel: \"pressModel\",\n    duration: \"duration\"\n  },\n  outputs: {\n    longPressStart: \"longPressStart\",\n    longPressing: \"longPressing\",\n    longPressEnd: \"longPressEnd\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LongPressDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[long-press]'\n    }]\n  }], null, {\n    pressEnabled: [{\n      type: Input\n    }],\n    pressModel: [{\n      type: Input\n    }],\n    duration: [{\n      type: Input\n    }],\n    longPressStart: [{\n      type: Output\n    }],\n    longPressing: [{\n      type: Output\n    }],\n    longPressEnd: [{\n      type: Output\n    }],\n    press: [{\n      type: HostBinding,\n      args: ['class.press']\n    }],\n    isLongPress: [{\n      type: HostBinding,\n      args: ['class.longpress']\n    }],\n    onMouseDown: [{\n      type: HostListener,\n      args: ['mousedown', ['$event']]\n    }]\n  });\n})();\n\nclass ScrollerComponent {\n  constructor(ngZone, element, renderer) {\n    this.ngZone = ngZone;\n    this.renderer = renderer;\n    this.scrollbarV = false;\n    this.scrollbarH = false;\n    this.scroll = new EventEmitter();\n    this.scrollYPos = 0;\n    this.scrollXPos = 0;\n    this.prevScrollYPos = 0;\n    this.prevScrollXPos = 0;\n    this._scrollEventListener = null;\n    this.element = element.nativeElement;\n  }\n\n  ngOnInit() {\n    // manual bind so we don't always listen\n    if (this.scrollbarV || this.scrollbarH) {\n      const renderer = this.renderer;\n      this.parentElement = renderer.parentNode(renderer.parentNode(this.element));\n      this._scrollEventListener = this.onScrolled.bind(this);\n      this.parentElement.addEventListener('scroll', this._scrollEventListener);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._scrollEventListener) {\n      this.parentElement.removeEventListener('scroll', this._scrollEventListener);\n      this._scrollEventListener = null;\n    }\n  }\n\n  setOffset(offsetY) {\n    if (this.parentElement) {\n      this.parentElement.scrollTop = offsetY;\n    }\n  }\n\n  onScrolled(event) {\n    const dom = event.currentTarget;\n    requestAnimationFrame(() => {\n      this.scrollYPos = dom.scrollTop;\n      this.scrollXPos = dom.scrollLeft;\n      this.updateOffset();\n    });\n  }\n\n  updateOffset() {\n    let direction;\n\n    if (this.scrollYPos < this.prevScrollYPos) {\n      direction = 'down';\n    } else if (this.scrollYPos > this.prevScrollYPos) {\n      direction = 'up';\n    }\n\n    this.scroll.emit({\n      direction,\n      scrollYPos: this.scrollYPos,\n      scrollXPos: this.scrollXPos\n    });\n    this.prevScrollYPos = this.scrollYPos;\n    this.prevScrollXPos = this.scrollXPos;\n  }\n\n}\n\nScrollerComponent.ɵfac = function ScrollerComponent_Factory(t) {\n  return new (t || ScrollerComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n};\n\nScrollerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ScrollerComponent,\n  selectors: [[\"datatable-scroller\"]],\n  hostAttrs: [1, \"datatable-scroll\"],\n  hostVars: 4,\n  hostBindings: function ScrollerComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"height\", ctx.scrollHeight, \"px\")(\"width\", ctx.scrollWidth, \"px\");\n    }\n  },\n  inputs: {\n    scrollbarV: \"scrollbarV\",\n    scrollbarH: \"scrollbarH\",\n    scrollHeight: \"scrollHeight\",\n    scrollWidth: \"scrollWidth\"\n  },\n  outputs: {\n    scroll: \"scroll\"\n  },\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function ScrollerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScrollerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'datatable-scroller',\n      template: ` <ng-content></ng-content> `,\n      host: {\n        class: 'datatable-scroll'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }];\n  }, {\n    scrollbarV: [{\n      type: Input\n    }],\n    scrollbarH: [{\n      type: Input\n    }],\n    scrollHeight: [{\n      type: HostBinding,\n      args: ['style.height.px']\n    }, {\n      type: Input\n    }],\n    scrollWidth: [{\n      type: HostBinding,\n      args: ['style.width.px']\n    }, {\n      type: Input\n    }],\n    scroll: [{\n      type: Output\n    }]\n  });\n})();\n\nclass DatatableGroupHeaderTemplateDirective {\n  constructor(template) {\n    this.template = template;\n  }\n\n}\n\nDatatableGroupHeaderTemplateDirective.ɵfac = function DatatableGroupHeaderTemplateDirective_Factory(t) {\n  return new (t || DatatableGroupHeaderTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nDatatableGroupHeaderTemplateDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: DatatableGroupHeaderTemplateDirective,\n  selectors: [[\"\", \"ngx-datatable-group-header-template\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DatatableGroupHeaderTemplateDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngx-datatable-group-header-template]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\n\nclass DatatableGroupHeaderDirective {\n  constructor() {\n    /**\n     * Row height is required when virtual scroll is enabled.\n     */\n    this.rowHeight = 0;\n    /**\n     * Track toggling of group visibility\n     */\n\n    this.toggle = new EventEmitter();\n  }\n\n  get template() {\n    return this._templateInput || this._templateQuery;\n  }\n  /**\n   * Toggle the expansion of a group\n   */\n\n\n  toggleExpandGroup(group) {\n    this.toggle.emit({\n      type: 'group',\n      value: group\n    });\n  }\n  /**\n   * Expand all groups\n   */\n\n\n  expandAllGroups() {\n    this.toggle.emit({\n      type: 'all',\n      value: true\n    });\n  }\n  /**\n   * Collapse all groups\n   */\n\n\n  collapseAllGroups() {\n    this.toggle.emit({\n      type: 'all',\n      value: false\n    });\n  }\n\n}\n\nDatatableGroupHeaderDirective.ɵfac = function DatatableGroupHeaderDirective_Factory(t) {\n  return new (t || DatatableGroupHeaderDirective)();\n};\n\nDatatableGroupHeaderDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: DatatableGroupHeaderDirective,\n  selectors: [[\"ngx-datatable-group-header\"]],\n  contentQueries: function DatatableGroupHeaderDirective_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, DatatableGroupHeaderTemplateDirective, 7, TemplateRef);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._templateQuery = _t.first);\n    }\n  },\n  inputs: {\n    rowHeight: \"rowHeight\",\n    _templateInput: [\"template\", \"_templateInput\"]\n  },\n  outputs: {\n    toggle: \"toggle\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DatatableGroupHeaderDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'ngx-datatable-group-header'\n    }]\n  }], null, {\n    rowHeight: [{\n      type: Input\n    }],\n    _templateInput: [{\n      type: Input,\n      args: ['template']\n    }],\n    _templateQuery: [{\n      type: ContentChild,\n      args: [DatatableGroupHeaderTemplateDirective, {\n        read: TemplateRef,\n        static: true\n      }]\n    }],\n    toggle: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * Always returns the empty string ''\n */\n\n\nfunction emptyStringGetter() {\n  return '';\n}\n/**\n * Returns the appropriate getter function for this kind of prop.\n * If prop == null, returns the emptyStringGetter.\n */\n\n\nfunction getterForProp(prop) {\n  if (prop == null) {\n    return emptyStringGetter;\n  }\n\n  if (typeof prop === 'number') {\n    return numericIndexGetter;\n  } else {\n    // deep or simple\n    if (prop.indexOf('.') !== -1) {\n      return deepValueGetter;\n    } else {\n      return shallowValueGetter;\n    }\n  }\n}\n/**\n * Returns the value at this numeric index.\n * @param row array of values\n * @param index numeric index\n * @returns any or '' if invalid index\n */\n\n\nfunction numericIndexGetter(row, index) {\n  if (row == null) {\n    return '';\n  } // mimic behavior of deepValueGetter\n\n\n  if (!row || index == null) {\n    return row;\n  }\n\n  const value = row[index];\n\n  if (value == null) {\n    return '';\n  }\n\n  return value;\n}\n/**\n * Returns the value of a field.\n * (more efficient than deepValueGetter)\n * @param obj object containing the field\n * @param fieldName field name string\n */\n\n\nfunction shallowValueGetter(obj, fieldName) {\n  if (obj == null) {\n    return '';\n  }\n\n  if (!obj || !fieldName) {\n    return obj;\n  }\n\n  const value = obj[fieldName];\n\n  if (value == null) {\n    return '';\n  }\n\n  return value;\n}\n/**\n * Returns a deep object given a string. zoo['animal.type']\n */\n\n\nfunction deepValueGetter(obj, path) {\n  if (obj == null) {\n    return '';\n  }\n\n  if (!obj || !path) {\n    return obj;\n  } // check if path matches a root-level field\n  // { \"a.b.c\": 123 }\n\n\n  let current = obj[path];\n\n  if (current !== undefined) {\n    return current;\n  }\n\n  current = obj;\n  const split = path.split('.');\n\n  if (split.length) {\n    for (let i = 0; i < split.length; i++) {\n      current = current[split[i]]; // if found undefined, return empty string\n\n      if (current === undefined || current === null) {\n        return '';\n      }\n    }\n  }\n\n  return current;\n}\n\nfunction optionalGetterForProp(prop) {\n  return prop && (row => getterForProp(prop)(row, prop));\n}\n/**\n * This functions rearrange items by their parents\n * Also sets the level value to each of the items\n *\n * Note: Expecting each item has a property called parentId\n * Note: This algorithm will fail if a list has two or more items with same ID\n * NOTE: This algorithm will fail if there is a deadlock of relationship\n *\n * For example,\n *\n * Input\n *\n * id -> parent\n * 1  -> 0\n * 2  -> 0\n * 3  -> 1\n * 4  -> 1\n * 5  -> 2\n * 7  -> 8\n * 6  -> 3\n *\n *\n * Output\n * id -> level\n * 1      -> 0\n * --3    -> 1\n * ----6  -> 2\n * --4    -> 1\n * 2      -> 0\n * --5    -> 1\n * 7     -> 8\n *\n *\n * @param rows\n *\n */\n\n\nfunction groupRowsByParents(rows, from, to) {\n  if (from && to) {\n    const nodeById = {};\n    const l = rows.length;\n    let node = null;\n    nodeById[0] = new TreeNode(); // that's the root node\n\n    const uniqIDs = rows.reduce((arr, item) => {\n      const toValue = to(item);\n\n      if (arr.indexOf(toValue) === -1) {\n        arr.push(toValue);\n      }\n\n      return arr;\n    }, []);\n\n    for (let i = 0; i < l; i++) {\n      // make TreeNode objects for each item\n      nodeById[to(rows[i])] = new TreeNode(rows[i]);\n    }\n\n    for (let i = 0; i < l; i++) {\n      // link all TreeNode objects\n      node = nodeById[to(rows[i])];\n      let parent = 0;\n      const fromValue = from(node.row);\n\n      if (!!fromValue && uniqIDs.indexOf(fromValue) > -1) {\n        parent = fromValue;\n      }\n\n      node.parent = nodeById[parent];\n      node.row['level'] = node.parent.row['level'] + 1;\n      node.parent.children.push(node);\n    }\n\n    let resolvedRows = [];\n    nodeById[0].flatten(function () {\n      resolvedRows = [...resolvedRows, this.row];\n    }, true);\n    return resolvedRows;\n  } else {\n    return rows;\n  }\n}\n\nclass TreeNode {\n  constructor(row = null) {\n    if (!row) {\n      row = {\n        level: -1,\n        treeStatus: 'expanded'\n      };\n    }\n\n    this.row = row;\n    this.parent = null;\n    this.children = [];\n  }\n\n  flatten(f, recursive) {\n    if (this.row['treeStatus'] === 'expanded') {\n      for (let i = 0, l = this.children.length; i < l; i++) {\n        const child = this.children[i];\n        f.apply(child, Array.prototype.slice.call(arguments, 2));\n        if (recursive) child.flatten.apply(child, arguments);\n      }\n    }\n  }\n\n}\n/**\n * Converts strings from something to camel case\n * http://stackoverflow.com/questions/10425287/convert-dash-separated-string-to-camelcase\n */\n\n\nfunction camelCase(str) {\n  // Replace special characters with a space\n  str = str.replace(/[^a-zA-Z0-9 ]/g, ' '); // put a space before an uppercase letter\n\n  str = str.replace(/([a-z](?=[A-Z]))/g, '$1 '); // Lower case first character and some other stuff\n\n  str = str.replace(/([^a-zA-Z0-9 ])|^[0-9]+/g, '').trim().toLowerCase(); // uppercase characters preceded by a space or number\n\n  str = str.replace(/([ 0-9]+)([a-zA-Z])/g, function (a, b, c) {\n    return b.trim() + c.toUpperCase();\n  });\n  return str;\n}\n/**\n * Converts strings from camel case to words\n * http://stackoverflow.com/questions/7225407/convert-camelcasetext-to-camel-case-text\n */\n\n\nfunction deCamelCase(str) {\n  return str.replace(/([A-Z])/g, match => ` ${match}`).replace(/^./, match => match.toUpperCase());\n}\n/**\n * Creates a unique object id.\n * http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n */\n\n\nfunction id() {\n  return ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);\n}\n/**\n * Sets the column defaults\n */\n\n\nfunction setColumnDefaults(columns) {\n  if (!columns) return; // Only one column should hold the tree view\n  // Thus if multiple columns are provided with\n  // isTreeColumn as true we take only the first one\n\n  let treeColumnFound = false;\n\n  for (const column of columns) {\n    if (!column.$$id) {\n      column.$$id = id();\n    } // prop can be numeric; zero is valid not a missing prop\n    // translate name => prop\n\n\n    if (isNullOrUndefined(column.prop) && column.name) {\n      column.prop = camelCase(column.name);\n    }\n\n    if (!column.$$valueGetter) {\n      column.$$valueGetter = getterForProp(column.prop);\n    } // format props if no name passed\n\n\n    if (!isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\n      column.name = deCamelCase(String(column.prop));\n    }\n\n    if (isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\n      column.name = ''; // Fixes IE and Edge displaying `null`\n    }\n\n    if (!column.hasOwnProperty('resizeable')) {\n      column.resizeable = true;\n    }\n\n    if (!column.hasOwnProperty('sortable')) {\n      column.sortable = true;\n    }\n\n    if (!column.hasOwnProperty('draggable')) {\n      column.draggable = true;\n    }\n\n    if (!column.hasOwnProperty('canAutoResize')) {\n      column.canAutoResize = true;\n    }\n\n    if (!column.hasOwnProperty('width')) {\n      column.width = 150;\n    }\n\n    if (!column.hasOwnProperty('isTreeColumn')) {\n      column.isTreeColumn = false;\n    } else {\n      if (column.isTreeColumn && !treeColumnFound) {\n        // If the first column with isTreeColumn is true found\n        // we mark that treeCoulmn is found\n        treeColumnFound = true;\n      } else {\n        // After that isTreeColumn property for any other column\n        // will be set as false\n        column.isTreeColumn = false;\n      }\n    }\n  }\n}\n\nfunction isNullOrUndefined(value) {\n  return value === null || value === undefined;\n}\n/**\n * Translates templates definitions to objects\n */\n\n\nfunction translateTemplates(templates) {\n  const result = [];\n\n  for (const temp of templates) {\n    const col = {};\n    const props = Object.getOwnPropertyNames(temp);\n\n    for (const prop of props) {\n      col[prop] = temp[prop];\n    }\n\n    if (temp.headerTemplate) {\n      col.headerTemplate = temp.headerTemplate;\n    }\n\n    if (temp.cellTemplate) {\n      col.cellTemplate = temp.cellTemplate;\n    }\n\n    if (temp.summaryFunc) {\n      col.summaryFunc = temp.summaryFunc;\n    }\n\n    if (temp.summaryTemplate) {\n      col.summaryTemplate = temp.summaryTemplate;\n    }\n\n    result.push(col);\n  }\n\n  return result;\n}\n\nvar ColumnMode;\n\n(function (ColumnMode) {\n  ColumnMode[\"standard\"] = \"standard\";\n  ColumnMode[\"flex\"] = \"flex\";\n  ColumnMode[\"force\"] = \"force\";\n})(ColumnMode || (ColumnMode = {}));\n\nvar SelectionType;\n\n(function (SelectionType) {\n  SelectionType[\"single\"] = \"single\";\n  SelectionType[\"multi\"] = \"multi\";\n  SelectionType[\"multiClick\"] = \"multiClick\";\n  SelectionType[\"cell\"] = \"cell\";\n  SelectionType[\"checkbox\"] = \"checkbox\";\n})(SelectionType || (SelectionType = {}));\n\nvar SortType;\n\n(function (SortType) {\n  SortType[\"single\"] = \"single\";\n  SortType[\"multi\"] = \"multi\";\n})(SortType || (SortType = {}));\n\nvar ContextmenuType;\n\n(function (ContextmenuType) {\n  ContextmenuType[\"header\"] = \"header\";\n  ContextmenuType[\"body\"] = \"body\";\n})(ContextmenuType || (ContextmenuType = {}));\n\nclass DataTableColumnHeaderDirective {\n  constructor(template) {\n    this.template = template;\n  }\n\n}\n\nDataTableColumnHeaderDirective.ɵfac = function DataTableColumnHeaderDirective_Factory(t) {\n  return new (t || DataTableColumnHeaderDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nDataTableColumnHeaderDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: DataTableColumnHeaderDirective,\n  selectors: [[\"\", \"ngx-datatable-header-template\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataTableColumnHeaderDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngx-datatable-header-template]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\n\nclass DataTableColumnCellDirective {\n  constructor(template) {\n    this.template = template;\n  }\n\n}\n\nDataTableColumnCellDirective.ɵfac = function DataTableColumnCellDirective_Factory(t) {\n  return new (t || DataTableColumnCellDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nDataTableColumnCellDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: DataTableColumnCellDirective,\n  selectors: [[\"\", \"ngx-datatable-cell-template\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataTableColumnCellDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngx-datatable-cell-template]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\n\nclass DataTableColumnCellTreeToggle {\n  constructor(template) {\n    this.template = template;\n  }\n\n}\n\nDataTableColumnCellTreeToggle.ɵfac = function DataTableColumnCellTreeToggle_Factory(t) {\n  return new (t || DataTableColumnCellTreeToggle)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nDataTableColumnCellTreeToggle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: DataTableColumnCellTreeToggle,\n  selectors: [[\"\", \"ngx-datatable-tree-toggle\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataTableColumnCellTreeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[ngx-datatable-tree-toggle]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\n\nclass DataTableColumnDirective {\n  constructor(columnChangesService) {\n    this.columnChangesService = columnChangesService;\n    this.isFirstChange = true;\n  }\n\n  get cellTemplate() {\n    return this._cellTemplateInput || this._cellTemplateQuery;\n  }\n\n  get headerTemplate() {\n    return this._headerTemplateInput || this._headerTemplateQuery;\n  }\n\n  get treeToggleTemplate() {\n    return this._treeToggleTemplateInput || this._treeToggleTemplateQuery;\n  }\n\n  ngOnChanges() {\n    if (this.isFirstChange) {\n      this.isFirstChange = false;\n    } else {\n      this.columnChangesService.onInputChange();\n    }\n  }\n\n}\n\nDataTableColumnDirective.ɵfac = function DataTableColumnDirective_Factory(t) {\n  return new (t || DataTableColumnDirective)(i0.ɵɵdirectiveInject(ColumnChangesService));\n};\n\nDataTableColumnDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: DataTableColumnDirective,\n  selectors: [[\"ngx-datatable-column\"]],\n  contentQueries: function DataTableColumnDirective_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, DataTableColumnCellDirective, 7, TemplateRef);\n      i0.ɵɵcontentQuery(dirIndex, DataTableColumnHeaderDirective, 7, TemplateRef);\n      i0.ɵɵcontentQuery(dirIndex, DataTableColumnCellTreeToggle, 7, TemplateRef);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._cellTemplateQuery = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._headerTemplateQuery = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._treeToggleTemplateQuery = _t.first);\n    }\n  },\n  inputs: {\n    name: \"name\",\n    prop: \"prop\",\n    frozenLeft: \"frozenLeft\",\n    frozenRight: \"frozenRight\",\n    flexGrow: \"flexGrow\",\n    resizeable: \"resizeable\",\n    comparator: \"comparator\",\n    pipe: \"pipe\",\n    sortable: \"sortable\",\n    draggable: \"draggable\",\n    canAutoResize: \"canAutoResize\",\n    minWidth: \"minWidth\",\n    width: \"width\",\n    maxWidth: \"maxWidth\",\n    checkboxable: \"checkboxable\",\n    headerCheckboxable: \"headerCheckboxable\",\n    headerClass: \"headerClass\",\n    cellClass: \"cellClass\",\n    isTreeColumn: \"isTreeColumn\",\n    treeLevelIndent: \"treeLevelIndent\",\n    summaryFunc: \"summaryFunc\",\n    summaryTemplate: \"summaryTemplate\",\n    _cellTemplateInput: [\"cellTemplate\", \"_cellTemplateInput\"],\n    _headerTemplateInput: [\"headerTemplate\", \"_headerTemplateInput\"],\n    _treeToggleTemplateInput: [\"treeToggleTemplate\", \"_treeToggleTemplateInput\"]\n  },\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataTableColumnDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'ngx-datatable-column'\n    }]\n  }], function () {\n    return [{\n      type: ColumnChangesService\n    }];\n  }, {\n    name: [{\n      type: Input\n    }],\n    prop: [{\n      type: Input\n    }],\n    frozenLeft: [{\n      type: Input\n    }],\n    frozenRight: [{\n      type: Input\n    }],\n    flexGrow: [{\n      type: Input\n    }],\n    resizeable: [{\n      type: Input\n    }],\n    comparator: [{\n      type: Input\n    }],\n    pipe: [{\n      type: Input\n    }],\n    sortable: [{\n      type: Input\n    }],\n    draggable: [{\n      type: Input\n    }],\n    canAutoResize: [{\n      type: Input\n    }],\n    minWidth: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    maxWidth: [{\n      type: Input\n    }],\n    checkboxable: [{\n      type: Input\n    }],\n    headerCheckboxable: [{\n      type: Input\n    }],\n    headerClass: [{\n      type: Input\n    }],\n    cellClass: [{\n      type: Input\n    }],\n    isTreeColumn: [{\n      type: Input\n    }],\n    treeLevelIndent: [{\n      type: Input\n    }],\n    summaryFunc: [{\n      type: Input\n    }],\n    summaryTemplate: [{\n      type: Input\n    }],\n    _cellTemplateInput: [{\n      type: Input,\n      args: ['cellTemplate']\n    }],\n    _cellTemplateQuery: [{\n      type: ContentChild,\n      args: [DataTableColumnCellDirective, {\n        read: TemplateRef,\n        static: true\n      }]\n    }],\n    _headerTemplateInput: [{\n      type: Input,\n      args: ['headerTemplate']\n    }],\n    _headerTemplateQuery: [{\n      type: ContentChild,\n      args: [DataTableColumnHeaderDirective, {\n        read: TemplateRef,\n        static: true\n      }]\n    }],\n    _treeToggleTemplateInput: [{\n      type: Input,\n      args: ['treeToggleTemplate']\n    }],\n    _treeToggleTemplateQuery: [{\n      type: ContentChild,\n      args: [DataTableColumnCellTreeToggle, {\n        read: TemplateRef,\n        static: true\n      }]\n    }]\n  });\n})();\n\nclass DatatableRowDetailTemplateDirective {\n  constructor(template) {\n    this.template = template;\n  }\n\n}\n\nDatatableRowDetailTemplateDirective.ɵfac = function DatatableRowDetailTemplateDirective_Factory(t) {\n  return new (t || DatatableRowDetailTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\n\nDatatableRowDetailTemplateDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: DatatableRowDetailTemplateDirective,\n  selectors: [[\"\", \"ngx-datatable-row-detail-template\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DatatableRowDetailTemplateDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngx-datatable-row-detail-template]'\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, null);\n})();\n\nclass DatatableRowDetailDirective {\n  constructor() {\n    /**\n     * The detail row height is required especially\n     * when virtual scroll is enabled.\n     */\n    this.rowHeight = 0;\n    /**\n     * Row detail row visbility was toggled.\n     */\n\n    this.toggle = new EventEmitter();\n  }\n\n  get template() {\n    return this._templateInput || this._templateQuery;\n  }\n  /**\n   * Toggle the expansion of the row\n   */\n\n\n  toggleExpandRow(row) {\n    this.toggle.emit({\n      type: 'row',\n      value: row\n    });\n  }\n  /**\n   * API method to expand all the rows.\n   */\n\n\n  expandAllRows() {\n    this.toggle.emit({\n      type: 'all',\n      value: true\n    });\n  }\n  /**\n   * API method to collapse all the rows.\n   */\n\n\n  collapseAllRows() {\n    this.toggle.emit({\n      type: 'all',\n      value: false\n    });\n  }\n\n}\n\nDatatableRowDetailDirective.ɵfac = function DatatableRowDetailDirective_Factory(t) {\n  return new (t || DatatableRowDetailDirective)();\n};\n\nDatatableRowDetailDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: DatatableRowDetailDirective,\n  selectors: [[\"ngx-datatable-row-detail\"]],\n  contentQueries: function DatatableRowDetailDirective_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, DatatableRowDetailTemplateDirective, 7, TemplateRef);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._templateQuery = _t.first);\n    }\n  },\n  inputs: {\n    rowHeight: \"rowHeight\",\n    _templateInput: [\"template\", \"_templateInput\"]\n  },\n  outputs: {\n    toggle: \"toggle\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DatatableRowDetailDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'ngx-datatable-row-detail'\n    }]\n  }], null, {\n    rowHeight: [{\n      type: Input\n    }],\n    _templateInput: [{\n      type: Input,\n      args: ['template']\n    }],\n    _templateQuery: [{\n      type: ContentChild,\n      args: [DatatableRowDetailTemplateDirective, {\n        read: TemplateRef,\n        static: true\n      }]\n    }],\n    toggle: [{\n      type: Output\n    }]\n  });\n})();\n\nclass DatatableFooterDirective {\n  get template() {\n    return this._templateInput || this._templateQuery;\n  }\n\n}\n\nDatatableFooterDirective.ɵfac = function DatatableFooterDirective_Factory(t) {\n  return new (t || DatatableFooterDirective)();\n};\n\nDatatableFooterDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: DatatableFooterDirective,\n  selectors: [[\"ngx-datatable-footer\"]],\n  contentQueries: function DatatableFooterDirective_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, DataTableFooterTemplateDirective, 5, TemplateRef);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._templateQuery = _t.first);\n    }\n  },\n  inputs: {\n    footerHeight: \"footerHeight\",\n    totalMessage: \"totalMessage\",\n    selectedMessage: \"selectedMessage\",\n    pagerLeftArrowIcon: \"pagerLeftArrowIcon\",\n    pagerRightArrowIcon: \"pagerRightArrowIcon\",\n    pagerPreviousIcon: \"pagerPreviousIcon\",\n    pagerNextIcon: \"pagerNextIcon\",\n    _templateInput: [\"template\", \"_templateInput\"]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DatatableFooterDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'ngx-datatable-footer'\n    }]\n  }], null, {\n    footerHeight: [{\n      type: Input\n    }],\n    totalMessage: [{\n      type: Input\n    }],\n    selectedMessage: [{\n      type: Input\n    }],\n    pagerLeftArrowIcon: [{\n      type: Input\n    }],\n    pagerRightArrowIcon: [{\n      type: Input\n    }],\n    pagerPreviousIcon: [{\n      type: Input\n    }],\n    pagerNextIcon: [{\n      type: Input\n    }],\n    _templateInput: [{\n      type: Input,\n      args: ['template']\n    }],\n    _templateQuery: [{\n      type: ContentChild,\n      args: [DataTableFooterTemplateDirective, {\n        read: TemplateRef\n      }]\n    }]\n  });\n})();\n/**\n * Returns the columns by pin.\n */\n\n\nfunction columnsByPin(cols) {\n  const ret = {\n    left: [],\n    center: [],\n    right: []\n  };\n\n  if (cols) {\n    for (const col of cols) {\n      if (col.frozenLeft) {\n        ret.left.push(col);\n      } else if (col.frozenRight) {\n        ret.right.push(col);\n      } else {\n        ret.center.push(col);\n      }\n    }\n  }\n\n  return ret;\n}\n/**\n * Returns the widths of all group sets of a column\n */\n\n\nfunction columnGroupWidths(groups, all) {\n  return {\n    left: columnTotalWidth(groups.left),\n    center: columnTotalWidth(groups.center),\n    right: columnTotalWidth(groups.right),\n    total: Math.floor(columnTotalWidth(all))\n  };\n}\n/**\n * Calculates the total width of all columns and their groups\n */\n\n\nfunction columnTotalWidth(columns, prop) {\n  let totalWidth = 0;\n\n  if (columns) {\n    for (const c of columns) {\n      const has = prop && c[prop];\n      const width = has ? c[prop] : c.width;\n      totalWidth = totalWidth + parseFloat(width);\n    }\n  }\n\n  return totalWidth;\n}\n/**\n * Calculates the total width of all columns and their groups\n */\n\n\nfunction columnsTotalWidth(columns, prop) {\n  let totalWidth = 0;\n\n  for (const column of columns) {\n    const has = prop && column[prop];\n    totalWidth = totalWidth + (has ? column[prop] : column.width);\n  }\n\n  return totalWidth;\n}\n\nfunction columnsByPinArr(val) {\n  const colsByPinArr = [];\n  const colsByPin = columnsByPin(val);\n  colsByPinArr.push({\n    type: 'left',\n    columns: colsByPin['left']\n  });\n  colsByPinArr.push({\n    type: 'center',\n    columns: colsByPin['center']\n  });\n  colsByPinArr.push({\n    type: 'right',\n    columns: colsByPin['right']\n  });\n  return colsByPinArr;\n}\n/**\n * This object contains the cache of the various row heights that are present inside\n * the data table.   Its based on Fenwick tree data structure that helps with\n * querying sums that have time complexity of log n.\n *\n * Fenwick Tree Credits: http://petr-mitrichev.blogspot.com/2013/05/fenwick-tree-range-updates.html\n * https://github.com/mikolalysenko/fenwick-tree\n *\n */\n\n\nclass RowHeightCache {\n  constructor() {\n    /**\n     * Tree Array stores the cumulative information of the row heights to perform efficient\n     * range queries and updates.  Currently the tree is initialized to the base row\n     * height instead of the detail row height.\n     */\n    this.treeArray = [];\n  }\n  /**\n   * Clear the Tree array.\n   */\n\n\n  clearCache() {\n    this.treeArray = [];\n  }\n  /**\n   * Initialize the Fenwick tree with row Heights.\n   *\n   * @param rows The array of rows which contain the expanded status.\n   * @param rowHeight The row height.\n   * @param detailRowHeight The detail row height.\n   */\n\n\n  initCache(details) {\n    const {\n      rows,\n      rowHeight,\n      detailRowHeight,\n      externalVirtual,\n      rowCount,\n      rowIndexes,\n      rowExpansions\n    } = details;\n    const isFn = typeof rowHeight === 'function';\n    const isDetailFn = typeof detailRowHeight === 'function';\n\n    if (!isFn && isNaN(rowHeight)) {\n      throw new Error(`Row Height cache initialization failed. Please ensure that 'rowHeight' is a\n        valid number or function value: (${rowHeight}) when 'scrollbarV' is enabled.`);\n    } // Add this additional guard in case detailRowHeight is set to 'auto' as it wont work.\n\n\n    if (!isDetailFn && isNaN(detailRowHeight)) {\n      throw new Error(`Row Height cache initialization failed. Please ensure that 'detailRowHeight' is a\n        valid number or function value: (${detailRowHeight}) when 'scrollbarV' is enabled.`);\n    }\n\n    const n = externalVirtual ? rowCount : rows.length;\n    this.treeArray = new Array(n);\n\n    for (let i = 0; i < n; ++i) {\n      this.treeArray[i] = 0;\n    }\n\n    for (let i = 0; i < n; ++i) {\n      const row = rows[i];\n      let currentRowHeight = rowHeight;\n\n      if (isFn) {\n        currentRowHeight = rowHeight(row);\n      } // Add the detail row height to the already expanded rows.\n      // This is useful for the table that goes through a filter or sort.\n\n\n      const expanded = rowExpansions.has(row);\n\n      if (row && expanded) {\n        if (isDetailFn) {\n          const index = rowIndexes.get(row);\n          currentRowHeight += detailRowHeight(row, index);\n        } else {\n          currentRowHeight += detailRowHeight;\n        }\n      }\n\n      this.update(i, currentRowHeight);\n    }\n  }\n  /**\n   * Given the ScrollY position i.e. sum, provide the rowIndex\n   * that is present in the current view port.  Below handles edge cases.\n   */\n\n\n  getRowIndex(scrollY) {\n    if (scrollY === 0) return 0;\n    return this.calcRowIndex(scrollY);\n  }\n  /**\n   * When a row is expanded or rowHeight is changed, update the height.  This can\n   * be utilized in future when Angular Data table supports dynamic row heights.\n   */\n\n\n  update(atRowIndex, byRowHeight) {\n    if (!this.treeArray.length) {\n      throw new Error(`Update at index ${atRowIndex} with value ${byRowHeight} failed:\n        Row Height cache not initialized.`);\n    }\n\n    const n = this.treeArray.length;\n    atRowIndex |= 0;\n\n    while (atRowIndex < n) {\n      this.treeArray[atRowIndex] += byRowHeight;\n      atRowIndex |= atRowIndex + 1;\n    }\n  }\n  /**\n   * Range Sum query from 1 to the rowIndex\n   */\n\n\n  query(atIndex) {\n    if (!this.treeArray.length) {\n      throw new Error(`query at index ${atIndex} failed: Fenwick tree array not initialized.`);\n    }\n\n    let sum = 0;\n    atIndex |= 0;\n\n    while (atIndex >= 0) {\n      sum += this.treeArray[atIndex];\n      atIndex = (atIndex & atIndex + 1) - 1;\n    }\n\n    return sum;\n  }\n  /**\n   * Find the total height between 2 row indexes\n   */\n\n\n  queryBetween(atIndexA, atIndexB) {\n    return this.query(atIndexB) - this.query(atIndexA - 1);\n  }\n  /**\n   * Given the ScrollY position i.e. sum, provide the rowIndex\n   * that is present in the current view port.\n   */\n\n\n  calcRowIndex(sum) {\n    if (!this.treeArray.length) return 0;\n    let pos = -1;\n    const dataLength = this.treeArray.length; // Get the highest bit for the block size.\n\n    const highestBit = Math.pow(2, dataLength.toString(2).length - 1);\n\n    for (let blockSize = highestBit; blockSize !== 0; blockSize >>= 1) {\n      const nextPos = pos + blockSize;\n\n      if (nextPos < dataLength && sum >= this.treeArray[nextPos]) {\n        sum -= this.treeArray[nextPos];\n        pos = nextPos;\n      }\n    }\n\n    return pos + 1;\n  }\n\n}\n\nconst cache = {};\nconst testStyle = typeof document !== 'undefined' ? document.createElement('div').style : undefined; // Get Prefix\n// http://davidwalsh.name/vendor-prefix\n\nconst prefix = function () {\n  const styles = typeof window !== 'undefined' ? window.getComputedStyle(document.documentElement, '') : undefined;\n  const match = typeof styles !== 'undefined' ? Array.prototype.slice.call(styles).join('').match(/-(moz|webkit|ms)-/) : null;\n  const pre = match !== null ? match[1] : undefined; // tslint:disable-next-line: tsr-detect-non-literal-regexp\n\n  const dom = typeof pre !== 'undefined' ? 'WebKit|Moz|MS|O'.match(new RegExp('(' + pre + ')', 'i'))[1] : undefined;\n  return dom ? {\n    dom,\n    lowercase: pre,\n    css: `-${pre}-`,\n    js: pre[0].toUpperCase() + pre.substr(1)\n  } : undefined;\n}();\n\nfunction getVendorPrefixedName(property) {\n  const name = camelCase(property);\n\n  if (!cache[name]) {\n    if (prefix !== undefined && testStyle[prefix.css + property] !== undefined) {\n      cache[name] = prefix.css + property;\n    } else if (testStyle[property] !== undefined) {\n      cache[name] = property;\n    }\n  }\n\n  return cache[name];\n} // browser detection and prefixing tools\n\n\nconst transform = typeof window !== 'undefined' ? getVendorPrefixedName('transform') : undefined;\nconst backfaceVisibility = typeof window !== 'undefined' ? getVendorPrefixedName('backfaceVisibility') : undefined;\nconst hasCSSTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('transform') : undefined;\nconst hasCSS3DTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('perspective') : undefined;\nconst ua = typeof window !== 'undefined' ? window.navigator.userAgent : 'Chrome';\nconst isSafari = /Safari\\//.test(ua) && !/Chrome\\//.test(ua);\n\nfunction translateXY(styles, x, y) {\n  if (typeof transform !== 'undefined' && hasCSSTransforms) {\n    if (!isSafari && hasCSS3DTransforms) {\n      styles[transform] = `translate3d(${x}px, ${y}px, 0)`;\n      styles[backfaceVisibility] = 'hidden';\n    } else {\n      styles[camelCase(transform)] = `translate(${x}px, ${y}px)`;\n    }\n  } else {\n    styles.top = `${y}px`;\n    styles.left = `${x}px`;\n  }\n}\n\nclass ProgressBarComponent {}\n\nProgressBarComponent.ɵfac = function ProgressBarComponent_Factory(t) {\n  return new (t || ProgressBarComponent)();\n};\n\nProgressBarComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ProgressBarComponent,\n  selectors: [[\"datatable-progress\"]],\n  decls: 3,\n  vars: 0,\n  consts: [[\"role\", \"progressbar\", 1, \"progress-linear\"], [1, \"container\"], [1, \"bar\"]],\n  template: function ProgressBarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵelement(2, \"div\", 2);\n      i0.ɵɵelementEnd()();\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ProgressBarComponent, [{\n    type: Component,\n    args: [{\n      selector: 'datatable-progress',\n      template: `\n    <div class=\"progress-linear\" role=\"progressbar\">\n      <div class=\"container\">\n        <div class=\"bar\"></div>\n      </div>\n    </div>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, null);\n})();\n\nfunction selectRows(selected, row, comparefn) {\n  const selectedIndex = comparefn(row, selected);\n\n  if (selectedIndex > -1) {\n    selected.splice(selectedIndex, 1);\n  } else {\n    selected.push(row);\n  }\n\n  return selected;\n}\n\nfunction selectRowsBetween(selected, rows, index, prevIndex, comparefn) {\n  const reverse = index < prevIndex;\n\n  for (let i = 0; i < rows.length; i++) {\n    const row = rows[i];\n    const greater = i >= prevIndex && i <= index;\n    const lesser = i <= prevIndex && i >= index;\n    let range = {\n      start: 0,\n      end: 0\n    };\n\n    if (reverse) {\n      range = {\n        start: index,\n        end: prevIndex\n      };\n    } else {\n      range = {\n        start: prevIndex,\n        end: index + 1\n      };\n    }\n\n    if (reverse && lesser || !reverse && greater) {\n      // if in the positive range to be added to `selected`, and\n      // not already in the selected array, add it\n      if (i >= range.start && i <= range.end) {\n        selected.push(row);\n      }\n    }\n  }\n\n  return selected;\n}\n\nvar Keys;\n\n(function (Keys) {\n  Keys[Keys[\"up\"] = 38] = \"up\";\n  Keys[Keys[\"down\"] = 40] = \"down\";\n  Keys[Keys[\"return\"] = 13] = \"return\";\n  Keys[Keys[\"escape\"] = 27] = \"escape\";\n  Keys[Keys[\"left\"] = 37] = \"left\";\n  Keys[Keys[\"right\"] = 39] = \"right\";\n})(Keys || (Keys = {}));\n\nclass DataTableSelectionComponent {\n  constructor() {\n    this.activate = new EventEmitter();\n    this.select = new EventEmitter();\n  }\n\n  selectRow(event, index, row) {\n    if (!this.selectEnabled) return;\n    const chkbox = this.selectionType === SelectionType.checkbox;\n    const multi = this.selectionType === SelectionType.multi;\n    const multiClick = this.selectionType === SelectionType.multiClick;\n    let selected = [];\n\n    if (multi || chkbox || multiClick) {\n      if (event.shiftKey) {\n        selected = selectRowsBetween([], this.rows, index, this.prevIndex, this.getRowSelectedIdx.bind(this));\n      } else if (event.ctrlKey || event.metaKey || multiClick || chkbox) {\n        selected = selectRows([...this.selected], row, this.getRowSelectedIdx.bind(this));\n      } else {\n        selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\n      }\n    } else {\n      selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\n    }\n\n    if (typeof this.selectCheck === 'function') {\n      selected = selected.filter(this.selectCheck.bind(this));\n    }\n\n    this.selected.splice(0, this.selected.length);\n    this.selected.push(...selected);\n    this.prevIndex = index;\n    this.select.emit({\n      selected\n    });\n  }\n\n  onActivate(model, index) {\n    const {\n      type,\n      event,\n      row\n    } = model;\n    const chkbox = this.selectionType === SelectionType.checkbox;\n    const select = !chkbox && (type === 'click' || type === 'dblclick') || chkbox && type === 'checkbox';\n\n    if (select) {\n      this.selectRow(event, index, row);\n    } else if (type === 'keydown') {\n      if (event.keyCode === Keys.return) {\n        this.selectRow(event, index, row);\n      } else {\n        this.onKeyboardFocus(model);\n      }\n    }\n\n    this.activate.emit(model);\n  }\n\n  onKeyboardFocus(model) {\n    const {\n      keyCode\n    } = model.event;\n    const shouldFocus = keyCode === Keys.up || keyCode === Keys.down || keyCode === Keys.right || keyCode === Keys.left;\n\n    if (shouldFocus) {\n      const isCellSelection = this.selectionType === SelectionType.cell;\n\n      if (!model.cellElement || !isCellSelection) {\n        this.focusRow(model.rowElement, keyCode);\n      } else if (isCellSelection) {\n        this.focusCell(model.cellElement, model.rowElement, keyCode, model.cellIndex);\n      }\n    }\n  }\n\n  focusRow(rowElement, keyCode) {\n    const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\n    if (nextRowElement) nextRowElement.focus();\n  }\n\n  getPrevNextRow(rowElement, keyCode) {\n    const parentElement = rowElement.parentElement;\n\n    if (parentElement) {\n      let focusElement;\n\n      if (keyCode === Keys.up) {\n        focusElement = parentElement.previousElementSibling;\n      } else if (keyCode === Keys.down) {\n        focusElement = parentElement.nextElementSibling;\n      }\n\n      if (focusElement && focusElement.children.length) {\n        return focusElement.children[0];\n      }\n    }\n  }\n\n  focusCell(cellElement, rowElement, keyCode, cellIndex) {\n    let nextCellElement;\n\n    if (keyCode === Keys.left) {\n      nextCellElement = cellElement.previousElementSibling;\n    } else if (keyCode === Keys.right) {\n      nextCellElement = cellElement.nextElementSibling;\n    } else if (keyCode === Keys.up || keyCode === Keys.down) {\n      const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\n\n      if (nextRowElement) {\n        const children = nextRowElement.getElementsByClassName('datatable-body-cell');\n        if (children.length) nextCellElement = children[cellIndex];\n      }\n    }\n\n    if (nextCellElement) nextCellElement.focus();\n  }\n\n  getRowSelected(row) {\n    return this.getRowSelectedIdx(row, this.selected) > -1;\n  }\n\n  getRowSelectedIdx(row, selected) {\n    if (!selected || !selected.length) return -1;\n    const rowId = this.rowIdentity(row);\n    return selected.findIndex(r => {\n      const id = this.rowIdentity(r);\n      return id === rowId;\n    });\n  }\n\n}\n\nDataTableSelectionComponent.ɵfac = function DataTableSelectionComponent_Factory(t) {\n  return new (t || DataTableSelectionComponent)();\n};\n\nDataTableSelectionComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DataTableSelectionComponent,\n  selectors: [[\"datatable-selection\"]],\n  inputs: {\n    rows: \"rows\",\n    selected: \"selected\",\n    selectEnabled: \"selectEnabled\",\n    selectionType: \"selectionType\",\n    rowIdentity: \"rowIdentity\",\n    selectCheck: \"selectCheck\"\n  },\n  outputs: {\n    activate: \"activate\",\n    select: \"select\"\n  },\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function DataTableSelectionComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataTableSelectionComponent, [{\n    type: Component,\n    args: [{\n      selector: 'datatable-selection',\n      template: ` <ng-content></ng-content> `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    rows: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    selectEnabled: [{\n      type: Input\n    }],\n    selectionType: [{\n      type: Input\n    }],\n    rowIdentity: [{\n      type: Input\n    }],\n    selectCheck: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nvar SortDirection;\n\n(function (SortDirection) {\n  SortDirection[\"asc\"] = \"asc\";\n  SortDirection[\"desc\"] = \"desc\";\n})(SortDirection || (SortDirection = {}));\n\nclass DataTableBodyCellComponent {\n  constructor(element, cd) {\n    this.cd = cd;\n    this.activate = new EventEmitter();\n    this.treeAction = new EventEmitter();\n    this.isFocused = false;\n    this.onCheckboxChangeFn = this.onCheckboxChange.bind(this);\n    this.activateFn = this.activate.emit.bind(this.activate);\n    this.cellContext = {\n      onCheckboxChangeFn: this.onCheckboxChangeFn,\n      activateFn: this.activateFn,\n      row: this.row,\n      group: this.group,\n      value: this.value,\n      column: this.column,\n      rowHeight: this.rowHeight,\n      isSelected: this.isSelected,\n      rowIndex: this.rowIndex,\n      treeStatus: this.treeStatus,\n      onTreeAction: this.onTreeAction.bind(this)\n    };\n    this._element = element.nativeElement;\n  }\n\n  set group(group) {\n    this._group = group;\n    this.cellContext.group = group;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get group() {\n    return this._group;\n  }\n\n  set rowHeight(val) {\n    this._rowHeight = val;\n    this.cellContext.rowHeight = val;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get rowHeight() {\n    return this._rowHeight;\n  }\n\n  set isSelected(val) {\n    this._isSelected = val;\n    this.cellContext.isSelected = val;\n    this.cd.markForCheck();\n  }\n\n  get isSelected() {\n    return this._isSelected;\n  }\n\n  set expanded(val) {\n    this._expanded = val;\n    this.cellContext.expanded = val;\n    this.cd.markForCheck();\n  }\n\n  get expanded() {\n    return this._expanded;\n  }\n\n  set rowIndex(val) {\n    this._rowIndex = val;\n    this.cellContext.rowIndex = val;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get rowIndex() {\n    return this._rowIndex;\n  }\n\n  set column(column) {\n    this._column = column;\n    this.cellContext.column = column;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get column() {\n    return this._column;\n  }\n\n  set row(row) {\n    this._row = row;\n    this.cellContext.row = row;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get row() {\n    return this._row;\n  }\n\n  set sorts(val) {\n    this._sorts = val;\n    this.calcSortDir = this.calcSortDir(val);\n  }\n\n  get sorts() {\n    return this._sorts;\n  }\n\n  set treeStatus(status) {\n    if (status !== 'collapsed' && status !== 'expanded' && status !== 'loading' && status !== 'disabled') {\n      this._treeStatus = 'collapsed';\n    } else {\n      this._treeStatus = status;\n    }\n\n    this.cellContext.treeStatus = this._treeStatus;\n    this.checkValueUpdates();\n    this.cd.markForCheck();\n  }\n\n  get treeStatus() {\n    return this._treeStatus;\n  }\n\n  get columnCssClasses() {\n    let cls = 'datatable-body-cell';\n\n    if (this.column.cellClass) {\n      if (typeof this.column.cellClass === 'string') {\n        cls += ' ' + this.column.cellClass;\n      } else if (typeof this.column.cellClass === 'function') {\n        const res = this.column.cellClass({\n          row: this.row,\n          group: this.group,\n          column: this.column,\n          value: this.value,\n          rowHeight: this.rowHeight\n        });\n\n        if (typeof res === 'string') {\n          cls += ' ' + res;\n        } else if (typeof res === 'object') {\n          const keys = Object.keys(res);\n\n          for (const k of keys) {\n            if (res[k] === true) {\n              cls += ` ${k}`;\n            }\n          }\n        }\n      }\n    }\n\n    if (!this.sortDir) {\n      cls += ' sort-active';\n    }\n\n    if (this.isFocused) {\n      cls += ' active';\n    }\n\n    if (this.sortDir === SortDirection.asc) {\n      cls += ' sort-asc';\n    }\n\n    if (this.sortDir === SortDirection.desc) {\n      cls += ' sort-desc';\n    }\n\n    return cls;\n  }\n\n  get width() {\n    return this.column.width;\n  }\n\n  get minWidth() {\n    return this.column.minWidth;\n  }\n\n  get maxWidth() {\n    return this.column.maxWidth;\n  }\n\n  get height() {\n    const height = this.rowHeight;\n\n    if (isNaN(height)) {\n      return height;\n    }\n\n    return height + 'px';\n  }\n\n  ngDoCheck() {\n    this.checkValueUpdates();\n  }\n\n  ngOnDestroy() {\n    if (this.cellTemplate) {\n      this.cellTemplate.clear();\n    }\n  }\n\n  checkValueUpdates() {\n    let value = '';\n\n    if (!this.row || !this.column) {\n      value = '';\n    } else {\n      const val = this.column.$$valueGetter(this.row, this.column.prop);\n      const userPipe = this.column.pipe;\n\n      if (userPipe) {\n        value = userPipe.transform(val);\n      } else if (value !== undefined) {\n        value = val;\n      }\n    }\n\n    if (this.value !== value) {\n      this.value = value;\n      this.cellContext.value = value;\n      this.sanitizedValue = value !== null && value !== undefined ? this.stripHtml(value) : value;\n      this.cd.markForCheck();\n    }\n  }\n\n  onFocus() {\n    this.isFocused = true;\n  }\n\n  onBlur() {\n    this.isFocused = false;\n  }\n\n  onClick(event) {\n    this.activate.emit({\n      type: 'click',\n      event,\n      row: this.row,\n      group: this.group,\n      rowHeight: this.rowHeight,\n      column: this.column,\n      value: this.value,\n      cellElement: this._element\n    });\n  }\n\n  onDblClick(event) {\n    this.activate.emit({\n      type: 'dblclick',\n      event,\n      row: this.row,\n      group: this.group,\n      rowHeight: this.rowHeight,\n      column: this.column,\n      value: this.value,\n      cellElement: this._element\n    });\n  }\n\n  onKeyDown(event) {\n    const keyCode = event.keyCode;\n    const isTargetCell = event.target === this._element;\n    const isAction = keyCode === Keys.return || keyCode === Keys.down || keyCode === Keys.up || keyCode === Keys.left || keyCode === Keys.right;\n\n    if (isAction && isTargetCell) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.activate.emit({\n        type: 'keydown',\n        event,\n        row: this.row,\n        group: this.group,\n        rowHeight: this.rowHeight,\n        column: this.column,\n        value: this.value,\n        cellElement: this._element\n      });\n    }\n  }\n\n  onCheckboxChange(event) {\n    this.activate.emit({\n      type: 'checkbox',\n      event,\n      row: this.row,\n      group: this.group,\n      rowHeight: this.rowHeight,\n      column: this.column,\n      value: this.value,\n      cellElement: this._element,\n      treeStatus: 'collapsed'\n    });\n  }\n\n  calcSortDir(sorts) {\n    if (!sorts) {\n      return;\n    }\n\n    const sort = sorts.find(s => {\n      return s.prop === this.column.prop;\n    });\n\n    if (sort) {\n      return sort.dir;\n    }\n  }\n\n  stripHtml(html) {\n    if (!html.replace) {\n      return html;\n    }\n\n    return html.replace(/<\\/?[^>]+(>|$)/g, '');\n  }\n\n  onTreeAction() {\n    this.treeAction.emit(this.row);\n  }\n\n  calcLeftMargin(column, row) {\n    const levelIndent = column.treeLevelIndent != null ? column.treeLevelIndent : 50;\n    return column.isTreeColumn ? row.level * levelIndent : 0;\n  }\n\n}\n\nDataTableBodyCellComponent.ɵfac = function DataTableBodyCellComponent_Factory(t) {\n  return new (t || DataTableBodyCellComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nDataTableBodyCellComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DataTableBodyCellComponent,\n  selectors: [[\"datatable-body-cell\"]],\n  viewQuery: function DataTableBodyCellComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c1, 7, ViewContainerRef);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.cellTemplate = _t.first);\n    }\n  },\n  hostVars: 10,\n  hostBindings: function DataTableBodyCellComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focus\", function DataTableBodyCellComponent_focus_HostBindingHandler() {\n        return ctx.onFocus();\n      })(\"blur\", function DataTableBodyCellComponent_blur_HostBindingHandler() {\n        return ctx.onBlur();\n      })(\"click\", function DataTableBodyCellComponent_click_HostBindingHandler($event) {\n        return ctx.onClick($event);\n      })(\"dblclick\", function DataTableBodyCellComponent_dblclick_HostBindingHandler($event) {\n        return ctx.onDblClick($event);\n      })(\"keydown\", function DataTableBodyCellComponent_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.columnCssClasses);\n      i0.ɵɵstyleProp(\"width\", ctx.width, \"px\")(\"min-width\", ctx.minWidth, \"px\")(\"max-width\", ctx.maxWidth, \"px\")(\"height\", ctx.height);\n    }\n  },\n  inputs: {\n    displayCheck: \"displayCheck\",\n    group: \"group\",\n    rowHeight: \"rowHeight\",\n    isSelected: \"isSelected\",\n    expanded: \"expanded\",\n    rowIndex: \"rowIndex\",\n    column: \"column\",\n    row: \"row\",\n    sorts: \"sorts\",\n    treeStatus: \"treeStatus\"\n  },\n  outputs: {\n    activate: \"activate\",\n    treeAction: \"treeAction\"\n  },\n  decls: 5,\n  vars: 6,\n  consts: [[1, \"datatable-body-cell-label\"], [\"class\", \"datatable-checkbox\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"title\", \"innerHTML\", 4, \"ngIf\"], [1, \"datatable-checkbox\"], [\"type\", \"checkbox\", 3, \"checked\", \"click\"], [\"class\", \"datatable-tree-button\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [1, \"datatable-tree-button\", 3, \"disabled\", \"click\"], [\"class\", \"icon datatable-icon-collapse\", 4, \"ngIf\"], [\"class\", \"icon datatable-icon-up\", 4, \"ngIf\"], [\"class\", \"icon datatable-icon-down\", 4, \"ngIf\"], [1, \"icon\", \"datatable-icon-collapse\"], [1, \"icon\", \"datatable-icon-up\"], [1, \"icon\", \"datatable-icon-down\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"title\", \"innerHTML\"], [\"cellTemplate\", \"\"]],\n  template: function DataTableBodyCellComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, DataTableBodyCellComponent_label_1_Template, 2, 1, \"label\", 1);\n      i0.ɵɵtemplate(2, DataTableBodyCellComponent_ng_container_2_Template, 3, 2, \"ng-container\", 2);\n      i0.ɵɵtemplate(3, DataTableBodyCellComponent_span_3_Template, 1, 2, \"span\", 3);\n      i0.ɵɵtemplate(4, DataTableBodyCellComponent_4_Template, 2, 2, null, 2);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"margin-left\", ctx.calcLeftMargin(ctx.column, ctx.row), \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.column.checkboxable && (!ctx.displayCheck || ctx.displayCheck(ctx.row, ctx.column, ctx.value)));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.column.isTreeColumn);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.column.cellTemplate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.column.cellTemplate);\n    }\n  },\n  directives: [i1.NgIf, i1.NgTemplateOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataTableBodyCellComponent, [{\n    type: Component,\n    args: [{\n      selector: 'datatable-body-cell',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: `\n    <div class=\"datatable-body-cell-label\" [style.margin-left.px]=\"calcLeftMargin(column, row)\">\n      <label\n        *ngIf=\"column.checkboxable && (!displayCheck || displayCheck(row, column, value))\"\n        class=\"datatable-checkbox\"\n      >\n        <input type=\"checkbox\" [checked]=\"isSelected\" (click)=\"onCheckboxChange($event)\" />\n      </label>\n      <ng-container *ngIf=\"column.isTreeColumn\">\n        <button\n          *ngIf=\"!column.treeToggleTemplate\"\n          class=\"datatable-tree-button\"\n          [disabled]=\"treeStatus === 'disabled'\"\n          (click)=\"onTreeAction()\"\n        >\n          <span>\n            <i *ngIf=\"treeStatus === 'loading'\" class=\"icon datatable-icon-collapse\"></i>\n            <i *ngIf=\"treeStatus === 'collapsed'\" class=\"icon datatable-icon-up\"></i>\n            <i *ngIf=\"treeStatus === 'expanded' || treeStatus === 'disabled'\" class=\"icon datatable-icon-down\"></i>\n          </span>\n        </button>\n        <ng-template\n          *ngIf=\"column.treeToggleTemplate\"\n          [ngTemplateOutlet]=\"column.treeToggleTemplate\"\n          [ngTemplateOutletContext]=\"{ cellContext: cellContext }\"\n        >\n        </ng-template>\n      </ng-container>\n\n      <span *ngIf=\"!column.cellTemplate\" [title]=\"sanitizedValue\" [innerHTML]=\"value\"> </span>\n      <ng-template\n        #cellTemplate\n        *ngIf=\"column.cellTemplate\"\n        [ngTemplateOutlet]=\"column.cellTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n    </div>\n  `\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    displayCheck: [{\n      type: Input\n    }],\n    group: [{\n      type: Input\n    }],\n    rowHeight: [{\n      type: Input\n    }],\n    isSelected: [{\n      type: Input\n    }],\n    expanded: [{\n      type: Input\n    }],\n    rowIndex: [{\n      type: Input\n    }],\n    column: [{\n      type: Input\n    }],\n    row: [{\n      type: Input\n    }],\n    sorts: [{\n      type: Input\n    }],\n    treeStatus: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    treeAction: [{\n      type: Output\n    }],\n    cellTemplate: [{\n      type: ViewChild,\n      args: ['cellTemplate', {\n        read: ViewContainerRef,\n        static: true\n      }]\n    }],\n    columnCssClasses: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    width: [{\n      type: HostBinding,\n      args: ['style.width.px']\n    }],\n    minWidth: [{\n      type: HostBinding,\n      args: ['style.minWidth.px']\n    }],\n    maxWidth: [{\n      type: HostBinding,\n      args: ['style.maxWidth.px']\n    }],\n    height: [{\n      type: HostBinding,\n      args: ['style.height']\n    }],\n    onFocus: [{\n      type: HostListener,\n      args: ['focus']\n    }],\n    onBlur: [{\n      type: HostListener,\n      args: ['blur']\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    onDblClick: [{\n      type: HostListener,\n      args: ['dblclick', ['$event']]\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }]\n  });\n})();\n\nclass DataTableBodyRowComponent {\n  constructor(differs, scrollbarHelper, cd, element) {\n    this.differs = differs;\n    this.scrollbarHelper = scrollbarHelper;\n    this.cd = cd;\n    this.treeStatus = 'collapsed';\n    this.activate = new EventEmitter();\n    this.treeAction = new EventEmitter();\n    this._groupStyles = {\n      left: {},\n      center: {},\n      right: {}\n    };\n    this._element = element.nativeElement;\n    this._rowDiffer = differs.find({}).create();\n  }\n\n  set columns(val) {\n    this._columns = val;\n    this.recalculateColumns(val);\n    this.buildStylesByGroup();\n  }\n\n  get columns() {\n    return this._columns;\n  }\n\n  set innerWidth(val) {\n    if (this._columns) {\n      const colByPin = columnsByPin(this._columns);\n      this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\n    }\n\n    this._innerWidth = val;\n    this.recalculateColumns();\n    this.buildStylesByGroup();\n  }\n\n  get innerWidth() {\n    return this._innerWidth;\n  }\n\n  set offsetX(val) {\n    this._offsetX = val;\n    this.buildStylesByGroup();\n  }\n\n  get offsetX() {\n    return this._offsetX;\n  }\n\n  get cssClass() {\n    let cls = 'datatable-body-row';\n\n    if (this.isSelected) {\n      cls += ' active';\n    }\n\n    if (this.rowIndex % 2 !== 0) {\n      cls += ' datatable-row-odd';\n    }\n\n    if (this.rowIndex % 2 === 0) {\n      cls += ' datatable-row-even';\n    }\n\n    if (this.rowClass) {\n      const res = this.rowClass(this.row);\n\n      if (typeof res === 'string') {\n        cls += ` ${res}`;\n      } else if (typeof res === 'object') {\n        const keys = Object.keys(res);\n\n        for (const k of keys) {\n          if (res[k] === true) {\n            cls += ` ${k}`;\n          }\n        }\n      }\n    }\n\n    return cls;\n  }\n\n  get columnsTotalWidths() {\n    return this._columnGroupWidths.total;\n  }\n\n  ngDoCheck() {\n    if (this._rowDiffer.diff(this.row)) {\n      this.cd.markForCheck();\n    }\n  }\n\n  trackByGroups(index, colGroup) {\n    return colGroup.type;\n  }\n\n  columnTrackingFn(index, column) {\n    return column.$$id;\n  }\n\n  buildStylesByGroup() {\n    this._groupStyles.left = this.calcStylesByGroup('left');\n    this._groupStyles.center = this.calcStylesByGroup('center');\n    this._groupStyles.right = this.calcStylesByGroup('right');\n    this.cd.markForCheck();\n  }\n\n  calcStylesByGroup(group) {\n    const widths = this._columnGroupWidths;\n    const offsetX = this.offsetX;\n    const styles = {\n      width: `${widths[group]}px`\n    };\n\n    if (group === 'left') {\n      translateXY(styles, offsetX, 0);\n    } else if (group === 'right') {\n      const bodyWidth = parseInt(this.innerWidth + '', 0);\n      const totalDiff = widths.total - bodyWidth;\n      const offsetDiff = totalDiff - offsetX;\n      const offset = (offsetDiff + this.scrollbarHelper.width) * -1;\n      translateXY(styles, offset, 0);\n    }\n\n    return styles;\n  }\n\n  onActivate(event, index) {\n    event.cellIndex = index;\n    event.rowElement = this._element;\n    this.activate.emit(event);\n  }\n\n  onKeyDown(event) {\n    const keyCode = event.keyCode;\n    const isTargetRow = event.target === this._element;\n    const isAction = keyCode === Keys.return || keyCode === Keys.down || keyCode === Keys.up || keyCode === Keys.left || keyCode === Keys.right;\n\n    if (isAction && isTargetRow) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.activate.emit({\n        type: 'keydown',\n        event,\n        row: this.row,\n        rowElement: this._element\n      });\n    }\n  }\n\n  onMouseenter(event) {\n    this.activate.emit({\n      type: 'mouseenter',\n      event,\n      row: this.row,\n      rowElement: this._element\n    });\n  }\n\n  recalculateColumns(val = this.columns) {\n    this._columns = val;\n    const colsByPin = columnsByPin(this._columns);\n    this._columnsByPin = columnsByPinArr(this._columns);\n    this._columnGroupWidths = columnGroupWidths(colsByPin, this._columns);\n  }\n\n  onTreeAction() {\n    this.treeAction.emit();\n  }\n\n}\n\nDataTableBodyRowComponent.ɵfac = function DataTableBodyRowComponent_Factory(t) {\n  return new (t || DataTableBodyRowComponent)(i0.ɵɵdirectiveInject(i0.KeyValueDiffers), i0.ɵɵdirectiveInject(ScrollbarHelper, 4), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nDataTableBodyRowComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DataTableBodyRowComponent,\n  selectors: [[\"datatable-body-row\"]],\n  hostVars: 6,\n  hostBindings: function DataTableBodyRowComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function DataTableBodyRowComponent_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      })(\"mouseenter\", function DataTableBodyRowComponent_mouseenter_HostBindingHandler($event) {\n        return ctx.onMouseenter($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.cssClass);\n      i0.ɵɵstyleProp(\"height\", ctx.rowHeight, \"px\")(\"width\", ctx.columnsTotalWidths, \"px\");\n    }\n  },\n  inputs: {\n    columns: \"columns\",\n    innerWidth: \"innerWidth\",\n    expanded: \"expanded\",\n    rowClass: \"rowClass\",\n    row: \"row\",\n    group: \"group\",\n    isSelected: \"isSelected\",\n    rowIndex: \"rowIndex\",\n    displayCheck: \"displayCheck\",\n    treeStatus: \"treeStatus\",\n    offsetX: \"offsetX\",\n    rowHeight: \"rowHeight\"\n  },\n  outputs: {\n    activate: \"activate\",\n    treeAction: \"treeAction\"\n  },\n  decls: 1,\n  vars: 2,\n  consts: [[3, \"class\", \"ngStyle\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"ngStyle\"], [\"role\", \"cell\", \"tabindex\", \"-1\", 3, \"row\", \"group\", \"expanded\", \"isSelected\", \"rowIndex\", \"column\", \"rowHeight\", \"displayCheck\", \"treeStatus\", \"activate\", \"treeAction\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"role\", \"cell\", \"tabindex\", \"-1\", 3, \"row\", \"group\", \"expanded\", \"isSelected\", \"rowIndex\", \"column\", \"rowHeight\", \"displayCheck\", \"treeStatus\", \"activate\", \"treeAction\"]],\n  template: function DataTableBodyRowComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, DataTableBodyRowComponent_div_0_Template, 2, 6, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx._columnsByPin)(\"ngForTrackBy\", ctx.trackByGroups);\n    }\n  },\n  directives: [DataTableBodyCellComponent, i1.NgForOf, i1.NgStyle],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataTableBodyRowComponent, [{\n    type: Component,\n    args: [{\n      selector: 'datatable-body-row',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: `\n    <div\n      *ngFor=\"let colGroup of _columnsByPin; let i = index; trackBy: trackByGroups\"\n      class=\"datatable-row-{{ colGroup.type }} datatable-row-group\"\n      [ngStyle]=\"_groupStyles[colGroup.type]\"\n    >\n      <datatable-body-cell\n        role=\"cell\"\n        *ngFor=\"let column of colGroup.columns; let ii = index; trackBy: columnTrackingFn\"\n        tabindex=\"-1\"\n        [row]=\"row\"\n        [group]=\"group\"\n        [expanded]=\"expanded\"\n        [isSelected]=\"isSelected\"\n        [rowIndex]=\"rowIndex\"\n        [column]=\"column\"\n        [rowHeight]=\"rowHeight\"\n        [displayCheck]=\"displayCheck\"\n        [treeStatus]=\"treeStatus\"\n        (activate)=\"onActivate($event, ii)\"\n        (treeAction)=\"onTreeAction()\"\n      >\n      </datatable-body-cell>\n    </div>\n  `\n    }]\n  }], function () {\n    return [{\n      type: i0.KeyValueDiffers\n    }, {\n      type: ScrollbarHelper,\n      decorators: [{\n        type: SkipSelf\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    columns: [{\n      type: Input\n    }],\n    innerWidth: [{\n      type: Input\n    }],\n    expanded: [{\n      type: Input\n    }],\n    rowClass: [{\n      type: Input\n    }],\n    row: [{\n      type: Input\n    }],\n    group: [{\n      type: Input\n    }],\n    isSelected: [{\n      type: Input\n    }],\n    rowIndex: [{\n      type: Input\n    }],\n    displayCheck: [{\n      type: Input\n    }],\n    treeStatus: [{\n      type: Input\n    }],\n    offsetX: [{\n      type: Input\n    }],\n    cssClass: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    rowHeight: [{\n      type: HostBinding,\n      args: ['style.height.px']\n    }, {\n      type: Input\n    }],\n    columnsTotalWidths: [{\n      type: HostBinding,\n      args: ['style.width.px']\n    }],\n    activate: [{\n      type: Output\n    }],\n    treeAction: [{\n      type: Output\n    }],\n    onKeyDown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }],\n    onMouseenter: [{\n      type: HostListener,\n      args: ['mouseenter', ['$event']]\n    }]\n  });\n})();\n\nfunction defaultSumFunc(cells) {\n  const cellsWithValues = cells.filter(cell => !!cell);\n\n  if (!cellsWithValues.length) {\n    return null;\n  }\n\n  if (cellsWithValues.some(cell => typeof cell !== 'number')) {\n    return null;\n  }\n\n  return cellsWithValues.reduce((res, cell) => res + cell);\n}\n\nfunction noopSumFunc(cells) {\n  return null;\n}\n\nclass DataTableSummaryRowComponent {\n  constructor() {\n    this.summaryRow = {};\n  }\n\n  ngOnChanges() {\n    if (!this.columns || !this.rows) {\n      return;\n    }\n\n    this.updateInternalColumns();\n    this.updateValues();\n  }\n\n  updateInternalColumns() {\n    this._internalColumns = this.columns.map(col => Object.assign(Object.assign({}, col), {\n      cellTemplate: col.summaryTemplate\n    }));\n  }\n\n  updateValues() {\n    this.summaryRow = {};\n    this.columns.filter(col => !col.summaryTemplate).forEach(col => {\n      const cellsFromSingleColumn = this.rows.map(row => row[col.prop]);\n      const sumFunc = this.getSummaryFunction(col);\n      this.summaryRow[col.prop] = col.pipe ? col.pipe.transform(sumFunc(cellsFromSingleColumn)) : sumFunc(cellsFromSingleColumn);\n    });\n  }\n\n  getSummaryFunction(column) {\n    if (column.summaryFunc === undefined) {\n      return defaultSumFunc;\n    } else if (column.summaryFunc === null) {\n      return noopSumFunc;\n    } else {\n      return column.summaryFunc;\n    }\n  }\n\n}\n\nDataTableSummaryRowComponent.ɵfac = function DataTableSummaryRowComponent_Factory(t) {\n  return new (t || DataTableSummaryRowComponent)();\n};\n\nDataTableSummaryRowComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DataTableSummaryRowComponent,\n  selectors: [[\"datatable-summary-row\"]],\n  hostAttrs: [1, \"datatable-summary-row\"],\n  inputs: {\n    rows: \"rows\",\n    columns: \"columns\",\n    rowHeight: \"rowHeight\",\n    offsetX: \"offsetX\",\n    innerWidth: \"innerWidth\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[\"tabindex\", \"-1\", 3, \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"rowIndex\", 4, \"ngIf\"], [\"tabindex\", \"-1\", 3, \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"rowIndex\"]],\n  template: function DataTableSummaryRowComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, DataTableSummaryRowComponent_datatable_body_row_0_Template, 1, 6, \"datatable-body-row\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.summaryRow && ctx._internalColumns);\n    }\n  },\n  directives: [DataTableBodyRowComponent, i1.NgIf],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataTableSummaryRowComponent, [{\n    type: Component,\n    args: [{\n      selector: 'datatable-summary-row',\n      template: `\n    <datatable-body-row\n      *ngIf=\"summaryRow && _internalColumns\"\n      tabindex=\"-1\"\n      [innerWidth]=\"innerWidth\"\n      [offsetX]=\"offsetX\"\n      [columns]=\"_internalColumns\"\n      [rowHeight]=\"rowHeight\"\n      [row]=\"summaryRow\"\n      [rowIndex]=\"-1\"\n    >\n    </datatable-body-row>\n  `,\n      host: {\n        class: 'datatable-summary-row'\n      }\n    }]\n  }], null, {\n    rows: [{\n      type: Input\n    }],\n    columns: [{\n      type: Input\n    }],\n    rowHeight: [{\n      type: Input\n    }],\n    offsetX: [{\n      type: Input\n    }],\n    innerWidth: [{\n      type: Input\n    }]\n  });\n})();\n\nclass DataTableRowWrapperComponent {\n  constructor(cd, differs) {\n    this.cd = cd;\n    this.differs = differs;\n    this.rowContextmenu = new EventEmitter(false);\n    this._expanded = false;\n    this.groupContext = {\n      group: this.row,\n      expanded: this.expanded,\n      rowIndex: this.rowIndex\n    };\n    this.rowContext = {\n      row: this.row,\n      expanded: this.expanded,\n      rowIndex: this.rowIndex\n    };\n    this.rowDiffer = differs.find({}).create();\n  }\n\n  set rowIndex(val) {\n    this._rowIndex = val;\n    this.rowContext.rowIndex = val;\n    this.groupContext.rowIndex = val;\n    this.cd.markForCheck();\n  }\n\n  get rowIndex() {\n    return this._rowIndex;\n  }\n\n  set expanded(val) {\n    this._expanded = val;\n    this.groupContext.expanded = val;\n    this.rowContext.expanded = val;\n    this.cd.markForCheck();\n  }\n\n  get expanded() {\n    return this._expanded;\n  }\n\n  ngDoCheck() {\n    if (this.rowDiffer.diff(this.row)) {\n      this.rowContext.row = this.row;\n      this.groupContext.group = this.row;\n      this.cd.markForCheck();\n    }\n  }\n\n  onContextmenu($event) {\n    this.rowContextmenu.emit({\n      event: $event,\n      row: this.row\n    });\n  }\n\n  getGroupHeaderStyle() {\n    const styles = {};\n    styles['transform'] = 'translate3d(' + this.offsetX + 'px, 0px, 0px)';\n    styles['backface-visibility'] = 'hidden';\n    styles['width'] = this.innerWidth;\n    return styles;\n  }\n\n}\n\nDataTableRowWrapperComponent.ɵfac = function DataTableRowWrapperComponent_Factory(t) {\n  return new (t || DataTableRowWrapperComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.KeyValueDiffers));\n};\n\nDataTableRowWrapperComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DataTableRowWrapperComponent,\n  selectors: [[\"datatable-row-wrapper\"]],\n  hostAttrs: [1, \"datatable-row-wrapper\"],\n  hostBindings: function DataTableRowWrapperComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"contextmenu\", function DataTableRowWrapperComponent_contextmenu_HostBindingHandler($event) {\n        return ctx.onContextmenu($event);\n      });\n    }\n  },\n  inputs: {\n    innerWidth: \"innerWidth\",\n    rowDetail: \"rowDetail\",\n    groupHeader: \"groupHeader\",\n    offsetX: \"offsetX\",\n    detailRowHeight: \"detailRowHeight\",\n    row: \"row\",\n    groupedRows: \"groupedRows\",\n    rowIndex: \"rowIndex\",\n    expanded: \"expanded\"\n  },\n  outputs: {\n    rowContextmenu: \"rowContextmenu\"\n  },\n  ngContentSelectors: _c0,\n  decls: 3,\n  vars: 3,\n  consts: [[\"class\", \"datatable-group-header\", 3, \"ngStyle\", 4, \"ngIf\"], [4, \"ngIf\"], [\"class\", \"datatable-row-detail\", 3, \"height\", 4, \"ngIf\"], [1, \"datatable-group-header\", 3, \"ngStyle\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"datatable-row-detail\"]],\n  template: function DataTableRowWrapperComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵtemplate(0, DataTableRowWrapperComponent_div_0_Template, 2, 2, \"div\", 0);\n      i0.ɵɵtemplate(1, DataTableRowWrapperComponent_ng_content_1_Template, 1, 0, \"ng-content\", 1);\n      i0.ɵɵtemplate(2, DataTableRowWrapperComponent_div_2_Template, 2, 3, \"div\", 2);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.groupHeader && ctx.groupHeader.template);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.groupHeader && ctx.groupHeader.template && ctx.expanded || !ctx.groupHeader || !ctx.groupHeader.template);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.rowDetail && ctx.rowDetail.template && ctx.expanded);\n    }\n  },\n  directives: [i1.NgIf, i1.NgStyle, i1.NgTemplateOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataTableRowWrapperComponent, [{\n    type: Component,\n    args: [{\n      selector: 'datatable-row-wrapper',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: `\n    <div *ngIf=\"groupHeader && groupHeader.template\" class=\"datatable-group-header\" [ngStyle]=\"getGroupHeaderStyle()\">\n      <ng-template\n        *ngIf=\"groupHeader && groupHeader.template\"\n        [ngTemplateOutlet]=\"groupHeader.template\"\n        [ngTemplateOutletContext]=\"groupContext\"\n      >\n      </ng-template>\n    </div>\n    <ng-content *ngIf=\"(groupHeader && groupHeader.template && expanded) || !groupHeader || !groupHeader.template\">\n    </ng-content>\n    <div\n      *ngIf=\"rowDetail && rowDetail.template && expanded\"\n      [style.height.px]=\"detailRowHeight\"\n      class=\"datatable-row-detail\"\n    >\n      <ng-template\n        *ngIf=\"rowDetail && rowDetail.template\"\n        [ngTemplateOutlet]=\"rowDetail.template\"\n        [ngTemplateOutletContext]=\"rowContext\"\n      >\n      </ng-template>\n    </div>\n  `,\n      host: {\n        class: 'datatable-row-wrapper'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.KeyValueDiffers\n    }];\n  }, {\n    innerWidth: [{\n      type: Input\n    }],\n    rowDetail: [{\n      type: Input\n    }],\n    groupHeader: [{\n      type: Input\n    }],\n    offsetX: [{\n      type: Input\n    }],\n    detailRowHeight: [{\n      type: Input\n    }],\n    row: [{\n      type: Input\n    }],\n    groupedRows: [{\n      type: Input\n    }],\n    rowContextmenu: [{\n      type: Output\n    }],\n    rowIndex: [{\n      type: Input\n    }],\n    expanded: [{\n      type: Input\n    }],\n    onContextmenu: [{\n      type: HostListener,\n      args: ['contextmenu', ['$event']]\n    }]\n  });\n})();\n\nclass DataTableBodyComponent {\n  /**\n   * Creates an instance of DataTableBodyComponent.\n   */\n  constructor(cd) {\n    this.cd = cd;\n    this.selected = [];\n    this.scroll = new EventEmitter();\n    this.page = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.select = new EventEmitter();\n    this.detailToggle = new EventEmitter();\n    this.rowContextmenu = new EventEmitter(false);\n    this.treeAction = new EventEmitter();\n    this.rowHeightsCache = new RowHeightCache();\n    this.temp = [];\n    this.offsetY = 0;\n    this.indexes = {};\n    this.rowIndexes = new WeakMap();\n    this.rowExpansions = [];\n    /**\n     * Get the height of the detail row.\n     */\n\n    this.getDetailRowHeight = (row, index) => {\n      if (!this.rowDetail) {\n        return 0;\n      }\n\n      const rowHeight = this.rowDetail.rowHeight;\n      return typeof rowHeight === 'function' ? rowHeight(row, index) : rowHeight;\n    }; // declare fn here so we can get access to the `this` property\n\n\n    this.rowTrackingFn = (index, row) => {\n      const idx = this.getRowIndex(row);\n\n      if (this.trackByProp) {\n        return row[this.trackByProp];\n      } else {\n        return idx;\n      }\n    };\n  }\n\n  set pageSize(val) {\n    this._pageSize = val;\n    this.recalcLayout();\n  }\n\n  get pageSize() {\n    return this._pageSize;\n  }\n\n  set rows(val) {\n    this._rows = val;\n    this.recalcLayout();\n  }\n\n  get rows() {\n    return this._rows;\n  }\n\n  set columns(val) {\n    this._columns = val;\n    const colsByPin = columnsByPin(val);\n    this.columnGroupWidths = columnGroupWidths(colsByPin, val);\n  }\n\n  get columns() {\n    return this._columns;\n  }\n\n  set offset(val) {\n    this._offset = val;\n    if (!this.scrollbarV || this.scrollbarV && !this.virtualization) this.recalcLayout();\n  }\n\n  get offset() {\n    return this._offset;\n  }\n\n  set rowCount(val) {\n    this._rowCount = val;\n    this.recalcLayout();\n  }\n\n  get rowCount() {\n    return this._rowCount;\n  }\n\n  get bodyWidth() {\n    if (this.scrollbarH) {\n      return this.innerWidth + 'px';\n    } else {\n      return '100%';\n    }\n  }\n\n  set bodyHeight(val) {\n    if (this.scrollbarV) {\n      this._bodyHeight = val + 'px';\n    } else {\n      this._bodyHeight = 'auto';\n    }\n\n    this.recalcLayout();\n  }\n\n  get bodyHeight() {\n    return this._bodyHeight;\n  }\n  /**\n   * Returns if selection is enabled.\n   */\n\n\n  get selectEnabled() {\n    return !!this.selectionType;\n  }\n  /**\n   * Property that would calculate the height of scroll bar\n   * based on the row heights cache for virtual scroll and virtualization. Other scenarios\n   * calculate scroll height automatically (as height will be undefined).\n   */\n\n\n  get scrollHeight() {\n    if (this.scrollbarV && this.virtualization && this.rowCount) {\n      return this.rowHeightsCache.query(this.rowCount - 1);\n    } // avoid TS7030: Not all code paths return a value.\n\n\n    return undefined;\n  }\n  /**\n   * Called after the constructor, initializing input properties\n   */\n\n\n  ngOnInit() {\n    if (this.rowDetail) {\n      this.listener = this.rowDetail.toggle.subscribe(({\n        type,\n        value\n      }) => {\n        if (type === 'row') {\n          this.toggleRowExpansion(value);\n        }\n\n        if (type === 'all') {\n          this.toggleAllRows(value);\n        } // Refresh rows after toggle\n        // Fixes #883\n\n\n        this.updateIndexes();\n        this.updateRows();\n        this.cd.markForCheck();\n      });\n    }\n\n    if (this.groupHeader) {\n      this.listener = this.groupHeader.toggle.subscribe(({\n        type,\n        value\n      }) => {\n        if (type === 'group') {\n          this.toggleRowExpansion(value);\n        }\n\n        if (type === 'all') {\n          this.toggleAllRows(value);\n        } // Refresh rows after toggle\n        // Fixes #883\n\n\n        this.updateIndexes();\n        this.updateRows();\n        this.cd.markForCheck();\n      });\n    }\n  }\n  /**\n   * Called once, before the instance is destroyed.\n   */\n\n\n  ngOnDestroy() {\n    if (this.rowDetail || this.groupHeader) {\n      this.listener.unsubscribe();\n    }\n  }\n  /**\n   * Updates the Y offset given a new offset.\n   */\n\n\n  updateOffsetY(offset) {\n    // scroller is missing on empty table\n    if (!this.scroller) {\n      return;\n    }\n\n    if (this.scrollbarV && this.virtualization && offset) {\n      // First get the row Index that we need to move to.\n      const rowIndex = this.pageSize * offset;\n      offset = this.rowHeightsCache.query(rowIndex - 1);\n    } else if (this.scrollbarV && !this.virtualization) {\n      offset = 0;\n    }\n\n    this.scroller.setOffset(offset || 0);\n  }\n  /**\n   * Body was scrolled, this is mainly useful for\n   * when a user is server-side pagination via virtual scroll.\n   */\n\n\n  onBodyScroll(event) {\n    const scrollYPos = event.scrollYPos;\n    const scrollXPos = event.scrollXPos; // if scroll change, trigger update\n    // this is mainly used for header cell positions\n\n    if (this.offsetY !== scrollYPos || this.offsetX !== scrollXPos) {\n      this.scroll.emit({\n        offsetY: scrollYPos,\n        offsetX: scrollXPos\n      });\n    }\n\n    this.offsetY = scrollYPos;\n    this.offsetX = scrollXPos;\n    this.updateIndexes();\n    this.updatePage(event.direction);\n    this.updateRows();\n  }\n  /**\n   * Updates the page given a direction.\n   */\n\n\n  updatePage(direction) {\n    let offset = this.indexes.first / this.pageSize;\n\n    if (direction === 'up') {\n      offset = Math.ceil(offset);\n    } else if (direction === 'down') {\n      offset = Math.floor(offset);\n    }\n\n    if (direction !== undefined && !isNaN(offset)) {\n      this.page.emit({\n        offset\n      });\n    }\n  }\n  /**\n   * Updates the rows in the view port\n   */\n\n\n  updateRows() {\n    const {\n      first,\n      last\n    } = this.indexes;\n    let rowIndex = first;\n    let idx = 0;\n    const temp = []; // if grouprowsby has been specified treat row paging\n    // parameters as group paging parameters ie if limit 10 has been\n    // specified treat it as 10 groups rather than 10 rows\n\n    if (this.groupedRows) {\n      let maxRowsPerGroup = 3; // if there is only one group set the maximum number of\n      // rows per group the same as the total number of rows\n\n      if (this.groupedRows.length === 1) {\n        maxRowsPerGroup = this.groupedRows[0].value.length;\n      }\n\n      while (rowIndex < last && rowIndex < this.groupedRows.length) {\n        // Add the groups into this page\n        const group = this.groupedRows[rowIndex];\n        this.rowIndexes.set(group, rowIndex);\n\n        if (group.value) {\n          // add indexes for each group item\n          group.value.forEach((g, i) => {\n            const _idx = `${rowIndex}-${i}`;\n            this.rowIndexes.set(g, _idx);\n          });\n        }\n\n        temp[idx] = group;\n        idx++; // Group index in this context\n\n        rowIndex++;\n      }\n    } else {\n      while (rowIndex < last && rowIndex < this.rowCount) {\n        const row = this.rows[rowIndex];\n\n        if (row) {\n          // add indexes for each row\n          this.rowIndexes.set(row, rowIndex);\n          temp[idx] = row;\n        }\n\n        idx++;\n        rowIndex++;\n      }\n    }\n\n    this.temp = temp;\n  }\n  /**\n   * Get the row height\n   */\n\n\n  getRowHeight(row) {\n    // if its a function return it\n    if (typeof this.rowHeight === 'function') {\n      return this.rowHeight(row);\n    }\n\n    return this.rowHeight;\n  }\n  /**\n   * @param group the group with all rows\n   */\n\n\n  getGroupHeight(group) {\n    let rowHeight = 0;\n\n    if (group.value) {\n      for (let index = 0; index < group.value.length; index++) {\n        rowHeight += this.getRowAndDetailHeight(group.value[index]);\n      }\n    }\n\n    return rowHeight;\n  }\n  /**\n   * Calculate row height based on the expanded state of the row.\n   */\n\n\n  getRowAndDetailHeight(row) {\n    let rowHeight = this.getRowHeight(row);\n    const expanded = this.getRowExpanded(row); // Adding detail row height if its expanded.\n\n    if (expanded) {\n      rowHeight += this.getDetailRowHeight(row);\n    }\n\n    return rowHeight;\n  }\n  /**\n   * Calculates the styles for the row so that the rows can be moved in 2D space\n   * during virtual scroll inside the DOM.   In the below case the Y position is\n   * manipulated.   As an example, if the height of row 0 is 30 px and row 1 is\n   * 100 px then following styles are generated:\n   *\n   * transform: translate3d(0px, 0px, 0px);    ->  row0\n   * transform: translate3d(0px, 30px, 0px);   ->  row1\n   * transform: translate3d(0px, 130px, 0px);  ->  row2\n   *\n   * Row heights have to be calculated based on the row heights cache as we wont\n   * be able to determine which row is of what height before hand.  In the above\n   * case the positionY of the translate3d for row2 would be the sum of all the\n   * heights of the rows before it (i.e. row0 and row1).\n   *\n   * @param rows the row that needs to be placed in the 2D space.\n   * @returns the CSS3 style to be applied\n   *\n   * @memberOf DataTableBodyComponent\n   */\n\n\n  getRowsStyles(rows) {\n    const styles = {}; // only add styles for the group if there is a group\n\n    if (this.groupedRows) {\n      styles.width = this.columnGroupWidths.total;\n    }\n\n    if (this.scrollbarV && this.virtualization) {\n      let idx = 0;\n\n      if (this.groupedRows) {\n        // Get the latest row rowindex in a group\n        const row = rows[rows.length - 1];\n        idx = row ? this.getRowIndex(row) : 0;\n      } else {\n        idx = this.getRowIndex(rows);\n      } // const pos = idx * rowHeight;\n      // The position of this row would be the sum of all row heights\n      // until the previous row position.\n\n\n      const pos = this.rowHeightsCache.query(idx - 1);\n      translateXY(styles, 0, pos);\n    }\n\n    return styles;\n  }\n  /**\n   * Calculate bottom summary row offset for scrollbar mode.\n   * For more information about cache and offset calculation\n   * see description for `getRowsStyles` method\n   *\n   * @returns the CSS3 style to be applied\n   *\n   * @memberOf DataTableBodyComponent\n   */\n\n\n  getBottomSummaryRowStyles() {\n    if (!this.scrollbarV || !this.rows || !this.rows.length) {\n      return null;\n    }\n\n    const styles = {\n      position: 'absolute'\n    };\n    const pos = this.rowHeightsCache.query(this.rows.length - 1);\n    translateXY(styles, 0, pos);\n    return styles;\n  }\n  /**\n   * Hides the loading indicator\n   */\n\n\n  hideIndicator() {\n    setTimeout(() => this.loadingIndicator = false, 500);\n  }\n  /**\n   * Updates the index of the rows in the viewport\n   */\n\n\n  updateIndexes() {\n    let first = 0;\n    let last = 0;\n\n    if (this.scrollbarV) {\n      if (this.virtualization) {\n        // Calculation of the first and last indexes will be based on where the\n        // scrollY position would be at.  The last index would be the one\n        // that shows up inside the view port the last.\n        const height = parseInt(this.bodyHeight, 0);\n        first = this.rowHeightsCache.getRowIndex(this.offsetY);\n        last = this.rowHeightsCache.getRowIndex(height + this.offsetY) + 1;\n      } else {\n        // If virtual rows are not needed\n        // We render all in one go\n        first = 0;\n        last = this.rowCount;\n      }\n    } else {\n      // The server is handling paging and will pass an array that begins with the\n      // element at a specified offset.  first should always be 0 with external paging.\n      if (!this.externalPaging) {\n        first = Math.max(this.offset * this.pageSize, 0);\n      }\n\n      last = Math.min(first + this.pageSize, this.rowCount);\n    }\n\n    this.indexes = {\n      first,\n      last\n    };\n  }\n  /**\n   * Refreshes the full Row Height cache.  Should be used\n   * when the entire row array state has changed.\n   */\n\n\n  refreshRowHeightCache() {\n    if (!this.scrollbarV || this.scrollbarV && !this.virtualization) {\n      return;\n    } // clear the previous row height cache if already present.\n    // this is useful during sorts, filters where the state of the\n    // rows array is changed.\n\n\n    this.rowHeightsCache.clearCache(); // Initialize the tree only if there are rows inside the tree.\n\n    if (this.rows && this.rows.length) {\n      const rowExpansions = new Set();\n\n      for (const row of this.rows) {\n        if (this.getRowExpanded(row)) {\n          rowExpansions.add(row);\n        }\n      }\n\n      this.rowHeightsCache.initCache({\n        rows: this.rows,\n        rowHeight: this.rowHeight,\n        detailRowHeight: this.getDetailRowHeight,\n        externalVirtual: this.scrollbarV && this.externalPaging,\n        rowCount: this.rowCount,\n        rowIndexes: this.rowIndexes,\n        rowExpansions\n      });\n    }\n  }\n  /**\n   * Gets the index for the view port\n   */\n\n\n  getAdjustedViewPortIndex() {\n    // Capture the row index of the first row that is visible on the viewport.\n    // If the scroll bar is just below the row which is highlighted then make that as the\n    // first index.\n    const viewPortFirstRowIndex = this.indexes.first;\n\n    if (this.scrollbarV && this.virtualization) {\n      const offsetScroll = this.rowHeightsCache.query(viewPortFirstRowIndex - 1);\n      return offsetScroll <= this.offsetY ? viewPortFirstRowIndex - 1 : viewPortFirstRowIndex;\n    }\n\n    return viewPortFirstRowIndex;\n  }\n  /**\n   * Toggle the Expansion of the row i.e. if the row is expanded then it will\n   * collapse and vice versa.   Note that the expanded status is stored as\n   * a part of the row object itself as we have to preserve the expanded row\n   * status in case of sorting and filtering of the row set.\n   */\n\n\n  toggleRowExpansion(row) {\n    // Capture the row index of the first row that is visible on the viewport.\n    const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\n    const rowExpandedIdx = this.getRowExpandedIdx(row, this.rowExpansions);\n    const expanded = rowExpandedIdx > -1; // If the detailRowHeight is auto --> only in case of non-virtualized scroll\n\n    if (this.scrollbarV && this.virtualization) {\n      const detailRowHeight = this.getDetailRowHeight(row) * (expanded ? -1 : 1); // const idx = this.rowIndexes.get(row) || 0;\n\n      const idx = this.getRowIndex(row);\n      this.rowHeightsCache.update(idx, detailRowHeight);\n    } // Update the toggled row and update thive nevere heights in the cache.\n\n\n    if (expanded) {\n      this.rowExpansions.splice(rowExpandedIdx, 1);\n    } else {\n      this.rowExpansions.push(row);\n    }\n\n    this.detailToggle.emit({\n      rows: [row],\n      currentIndex: viewPortFirstRowIndex\n    });\n  }\n  /**\n   * Expand/Collapse all the rows no matter what their state is.\n   */\n\n\n  toggleAllRows(expanded) {\n    // clear prev expansions\n    this.rowExpansions = []; // Capture the row index of the first row that is visible on the viewport.\n\n    const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\n\n    if (expanded) {\n      for (const row of this.rows) {\n        this.rowExpansions.push(row);\n      }\n    }\n\n    if (this.scrollbarV) {\n      // Refresh the full row heights cache since every row was affected.\n      this.recalcLayout();\n    } // Emit all rows that have been expanded.\n\n\n    this.detailToggle.emit({\n      rows: this.rows,\n      currentIndex: viewPortFirstRowIndex\n    });\n  }\n  /**\n   * Recalculates the table\n   */\n\n\n  recalcLayout() {\n    this.refreshRowHeightCache();\n    this.updateIndexes();\n    this.updateRows();\n  }\n  /**\n   * Tracks the column\n   */\n\n\n  columnTrackingFn(index, column) {\n    return column.$$id;\n  }\n  /**\n   * Gets the row pinning group styles\n   */\n\n\n  stylesByGroup(group) {\n    const widths = this.columnGroupWidths;\n    const offsetX = this.offsetX;\n    const styles = {\n      width: `${widths[group]}px`\n    };\n\n    if (group === 'left') {\n      translateXY(styles, offsetX, 0);\n    } else if (group === 'right') {\n      const bodyWidth = parseInt(this.innerWidth + '', 0);\n      const totalDiff = widths.total - bodyWidth;\n      const offsetDiff = totalDiff - offsetX;\n      const offset = offsetDiff * -1;\n      translateXY(styles, offset, 0);\n    }\n\n    return styles;\n  }\n  /**\n   * Returns if the row was expanded and set default row expansion when row expansion is empty\n   */\n\n\n  getRowExpanded(row) {\n    if (this.rowExpansions.length === 0 && this.groupExpansionDefault) {\n      for (const group of this.groupedRows) {\n        this.rowExpansions.push(group);\n      }\n    }\n\n    return this.getRowExpandedIdx(row, this.rowExpansions) > -1;\n  }\n\n  getRowExpandedIdx(row, expanded) {\n    if (!expanded || !expanded.length) return -1;\n    const rowId = this.rowIdentity(row);\n    return expanded.findIndex(r => {\n      const id = this.rowIdentity(r);\n      return id === rowId;\n    });\n  }\n  /**\n   * Gets the row index given a row\n   */\n\n\n  getRowIndex(row) {\n    return this.rowIndexes.get(row) || 0;\n  }\n\n  onTreeAction(row) {\n    this.treeAction.emit({\n      row\n    });\n  }\n\n}\n\nDataTableBodyComponent.ɵfac = function DataTableBodyComponent_Factory(t) {\n  return new (t || DataTableBodyComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nDataTableBodyComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DataTableBodyComponent,\n  selectors: [[\"datatable-body\"]],\n  viewQuery: function DataTableBodyComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(ScrollerComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scroller = _t.first);\n    }\n  },\n  hostAttrs: [1, \"datatable-body\"],\n  hostVars: 4,\n  hostBindings: function DataTableBodyComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.bodyWidth)(\"height\", ctx.bodyHeight);\n    }\n  },\n  inputs: {\n    scrollbarV: \"scrollbarV\",\n    scrollbarH: \"scrollbarH\",\n    loadingIndicator: \"loadingIndicator\",\n    externalPaging: \"externalPaging\",\n    rowHeight: \"rowHeight\",\n    offsetX: \"offsetX\",\n    emptyMessage: \"emptyMessage\",\n    selectionType: \"selectionType\",\n    selected: \"selected\",\n    rowIdentity: \"rowIdentity\",\n    rowDetail: \"rowDetail\",\n    groupHeader: \"groupHeader\",\n    selectCheck: \"selectCheck\",\n    displayCheck: \"displayCheck\",\n    trackByProp: \"trackByProp\",\n    rowClass: \"rowClass\",\n    groupedRows: \"groupedRows\",\n    groupExpansionDefault: \"groupExpansionDefault\",\n    innerWidth: \"innerWidth\",\n    groupRowsBy: \"groupRowsBy\",\n    virtualization: \"virtualization\",\n    summaryRow: \"summaryRow\",\n    summaryPosition: \"summaryPosition\",\n    summaryHeight: \"summaryHeight\",\n    pageSize: \"pageSize\",\n    rows: \"rows\",\n    columns: \"columns\",\n    offset: \"offset\",\n    rowCount: \"rowCount\",\n    bodyHeight: \"bodyHeight\"\n  },\n  outputs: {\n    scroll: \"scroll\",\n    page: \"page\",\n    activate: \"activate\",\n    select: \"select\",\n    detailToggle: \"detailToggle\",\n    rowContextmenu: \"rowContextmenu\",\n    treeAction: \"treeAction\"\n  },\n  decls: 5,\n  vars: 9,\n  consts: [[4, \"ngIf\"], [3, \"selected\", \"rows\", \"selectCheck\", \"selectEnabled\", \"selectionType\", \"rowIdentity\", \"select\", \"activate\"], [\"selector\", \"\"], [3, \"scrollbarV\", \"scrollbarH\", \"scrollHeight\", \"scrollWidth\", \"scroll\", 4, \"ngIf\"], [\"class\", \"empty-row\", 3, \"innerHTML\", 4, \"ngIf\"], [3, \"scrollbarV\", \"scrollbarH\", \"scrollHeight\", \"scrollWidth\", \"scroll\"], [3, \"rowHeight\", \"offsetX\", \"innerWidth\", \"rows\", \"columns\", 4, \"ngIf\"], [3, \"groupedRows\", \"innerWidth\", \"ngStyle\", \"rowDetail\", \"groupHeader\", \"offsetX\", \"detailRowHeight\", \"row\", \"expanded\", \"rowIndex\", \"rowContextmenu\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"role\", \"row\", 3, \"ngStyle\", \"rowHeight\", \"offsetX\", \"innerWidth\", \"rows\", \"columns\", 4, \"ngIf\"], [3, \"rowHeight\", \"offsetX\", \"innerWidth\", \"rows\", \"columns\"], [3, \"groupedRows\", \"innerWidth\", \"ngStyle\", \"rowDetail\", \"groupHeader\", \"offsetX\", \"detailRowHeight\", \"row\", \"expanded\", \"rowIndex\", \"rowContextmenu\"], [\"role\", \"row\", \"tabindex\", \"-1\", 3, \"isSelected\", \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"rowIndex\", \"expanded\", \"rowClass\", \"displayCheck\", \"treeStatus\", \"treeAction\", \"activate\", 4, \"ngIf\", \"ngIfElse\"], [\"groupedRowsTemplate\", \"\"], [\"role\", \"row\", \"tabindex\", \"-1\", 3, \"isSelected\", \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"rowIndex\", \"expanded\", \"rowClass\", \"displayCheck\", \"treeStatus\", \"treeAction\", \"activate\"], [\"role\", \"row\", \"tabindex\", \"-1\", 3, \"isSelected\", \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"group\", \"rowIndex\", \"expanded\", \"rowClass\", \"activate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"role\", \"row\", \"tabindex\", \"-1\", 3, \"isSelected\", \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"group\", \"rowIndex\", \"expanded\", \"rowClass\", \"activate\"], [\"role\", \"row\", 3, \"ngStyle\", \"rowHeight\", \"offsetX\", \"innerWidth\", \"rows\", \"columns\"], [1, \"empty-row\", 3, \"innerHTML\"]],\n  template: function DataTableBodyComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, DataTableBodyComponent_datatable_progress_0_Template, 1, 0, \"datatable-progress\", 0);\n      i0.ɵɵelementStart(1, \"datatable-selection\", 1, 2);\n      i0.ɵɵlistener(\"select\", function DataTableBodyComponent_Template_datatable_selection_select_1_listener($event) {\n        return ctx.select.emit($event);\n      })(\"activate\", function DataTableBodyComponent_Template_datatable_selection_activate_1_listener($event) {\n        return ctx.activate.emit($event);\n      });\n      i0.ɵɵtemplate(3, DataTableBodyComponent_datatable_scroller_3_Template, 4, 8, \"datatable-scroller\", 3);\n      i0.ɵɵtemplate(4, DataTableBodyComponent_div_4_Template, 1, 1, \"div\", 4);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.loadingIndicator);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"selected\", ctx.selected)(\"rows\", ctx.rows)(\"selectCheck\", ctx.selectCheck)(\"selectEnabled\", ctx.selectEnabled)(\"selectionType\", ctx.selectionType)(\"rowIdentity\", ctx.rowIdentity);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.rows == null ? null : ctx.rows.length);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !(ctx.rows == null ? null : ctx.rows.length) && !ctx.loadingIndicator);\n    }\n  },\n  directives: [ProgressBarComponent, DataTableSelectionComponent, ScrollerComponent, DataTableSummaryRowComponent, DataTableRowWrapperComponent, DataTableBodyRowComponent, i1.NgIf, i1.NgForOf, i1.NgStyle],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataTableBodyComponent, [{\n    type: Component,\n    args: [{\n      selector: 'datatable-body',\n      template: `\n    <datatable-progress *ngIf=\"loadingIndicator\"> </datatable-progress>\n    <datatable-selection\n      #selector\n      [selected]=\"selected\"\n      [rows]=\"rows\"\n      [selectCheck]=\"selectCheck\"\n      [selectEnabled]=\"selectEnabled\"\n      [selectionType]=\"selectionType\"\n      [rowIdentity]=\"rowIdentity\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n    >\n      <datatable-scroller\n        *ngIf=\"rows?.length\"\n        [scrollbarV]=\"scrollbarV\"\n        [scrollbarH]=\"scrollbarH\"\n        [scrollHeight]=\"scrollHeight\"\n        [scrollWidth]=\"columnGroupWidths?.total\"\n        (scroll)=\"onBodyScroll($event)\"\n      >\n        <datatable-summary-row\n          *ngIf=\"summaryRow && summaryPosition === 'top'\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n        <datatable-row-wrapper\n          [groupedRows]=\"groupedRows\"\n          *ngFor=\"let group of temp; let i = index; trackBy: rowTrackingFn\"\n          [innerWidth]=\"innerWidth\"\n          [ngStyle]=\"getRowsStyles(group)\"\n          [rowDetail]=\"rowDetail\"\n          [groupHeader]=\"groupHeader\"\n          [offsetX]=\"offsetX\"\n          [detailRowHeight]=\"getDetailRowHeight(group && group[i], i)\"\n          [row]=\"group\"\n          [expanded]=\"getRowExpanded(group)\"\n          [rowIndex]=\"getRowIndex(group && group[i])\"\n          (rowContextmenu)=\"rowContextmenu.emit($event)\"\n        >\n          <datatable-body-row\n            role=\"row\"\n            *ngIf=\"!groupedRows; else groupedRowsTemplate\"\n            tabindex=\"-1\"\n            [isSelected]=\"selector.getRowSelected(group)\"\n            [innerWidth]=\"innerWidth\"\n            [offsetX]=\"offsetX\"\n            [columns]=\"columns\"\n            [rowHeight]=\"getRowHeight(group)\"\n            [row]=\"group\"\n            [rowIndex]=\"getRowIndex(group)\"\n            [expanded]=\"getRowExpanded(group)\"\n            [rowClass]=\"rowClass\"\n            [displayCheck]=\"displayCheck\"\n            [treeStatus]=\"group && group.treeStatus\"\n            (treeAction)=\"onTreeAction(group)\"\n            (activate)=\"selector.onActivate($event, indexes.first + i)\"\n          >\n          </datatable-body-row>\n          <ng-template #groupedRowsTemplate>\n            <datatable-body-row\n              role=\"row\"\n              *ngFor=\"let row of group.value; let i = index; trackBy: rowTrackingFn\"\n              tabindex=\"-1\"\n              [isSelected]=\"selector.getRowSelected(row)\"\n              [innerWidth]=\"innerWidth\"\n              [offsetX]=\"offsetX\"\n              [columns]=\"columns\"\n              [rowHeight]=\"getRowHeight(row)\"\n              [row]=\"row\"\n              [group]=\"group.value\"\n              [rowIndex]=\"getRowIndex(row)\"\n              [expanded]=\"getRowExpanded(row)\"\n              [rowClass]=\"rowClass\"\n              (activate)=\"selector.onActivate($event, i)\"\n            >\n            </datatable-body-row>\n          </ng-template>\n        </datatable-row-wrapper>\n        <datatable-summary-row\n          role=\"row\"\n          *ngIf=\"summaryRow && summaryPosition === 'bottom'\"\n          [ngStyle]=\"getBottomSummaryRowStyles()\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n      </datatable-scroller>\n      <div class=\"empty-row\" *ngIf=\"!rows?.length && !loadingIndicator\" [innerHTML]=\"emptyMessage\"></div>\n    </datatable-selection>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'datatable-body'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    scrollbarV: [{\n      type: Input\n    }],\n    scrollbarH: [{\n      type: Input\n    }],\n    loadingIndicator: [{\n      type: Input\n    }],\n    externalPaging: [{\n      type: Input\n    }],\n    rowHeight: [{\n      type: Input\n    }],\n    offsetX: [{\n      type: Input\n    }],\n    emptyMessage: [{\n      type: Input\n    }],\n    selectionType: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    rowIdentity: [{\n      type: Input\n    }],\n    rowDetail: [{\n      type: Input\n    }],\n    groupHeader: [{\n      type: Input\n    }],\n    selectCheck: [{\n      type: Input\n    }],\n    displayCheck: [{\n      type: Input\n    }],\n    trackByProp: [{\n      type: Input\n    }],\n    rowClass: [{\n      type: Input\n    }],\n    groupedRows: [{\n      type: Input\n    }],\n    groupExpansionDefault: [{\n      type: Input\n    }],\n    innerWidth: [{\n      type: Input\n    }],\n    groupRowsBy: [{\n      type: Input\n    }],\n    virtualization: [{\n      type: Input\n    }],\n    summaryRow: [{\n      type: Input\n    }],\n    summaryPosition: [{\n      type: Input\n    }],\n    summaryHeight: [{\n      type: Input\n    }],\n    pageSize: [{\n      type: Input\n    }],\n    rows: [{\n      type: Input\n    }],\n    columns: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    rowCount: [{\n      type: Input\n    }],\n    bodyWidth: [{\n      type: HostBinding,\n      args: ['style.width']\n    }],\n    bodyHeight: [{\n      type: Input\n    }, {\n      type: HostBinding,\n      args: ['style.height']\n    }],\n    scroll: [{\n      type: Output\n    }],\n    page: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    select: [{\n      type: Output\n    }],\n    detailToggle: [{\n      type: Output\n    }],\n    rowContextmenu: [{\n      type: Output\n    }],\n    treeAction: [{\n      type: Output\n    }],\n    scroller: [{\n      type: ViewChild,\n      args: [ScrollerComponent]\n    }]\n  });\n})();\n/**\n * Gets the next sort direction\n */\n\n\nfunction nextSortDir(sortType, current) {\n  if (sortType === SortType.single) {\n    if (current === SortDirection.asc) {\n      return SortDirection.desc;\n    } else {\n      return SortDirection.asc;\n    }\n  } else {\n    if (!current) {\n      return SortDirection.asc;\n    } else if (current === SortDirection.asc) {\n      return SortDirection.desc;\n    } else if (current === SortDirection.desc) {\n      return undefined;\n    } // avoid TS7030: Not all code paths return a value.\n\n\n    return undefined;\n  }\n}\n/**\n * Adapted from fueld-ui on 6/216\n * https://github.com/FuelInteractive/fuel-ui/tree/master/src/pipes/OrderBy\n */\n\n\nfunction orderByComparator(a, b) {\n  if (a === null || typeof a === 'undefined') a = 0;\n  if (b === null || typeof b === 'undefined') b = 0;\n\n  if (a instanceof Date && b instanceof Date) {\n    if (a < b) return -1;\n    if (a > b) return 1;\n  } else if (isNaN(parseFloat(a)) || !isFinite(a) || isNaN(parseFloat(b)) || !isFinite(b)) {\n    // Convert to string in case of a=0 or b=0\n    a = String(a);\n    b = String(b); // Isn't a number so lowercase the string to properly compare\n\n    if (a.toLowerCase() < b.toLowerCase()) return -1;\n    if (a.toLowerCase() > b.toLowerCase()) return 1;\n  } else {\n    // Parse strings as numbers to compare properly\n    if (parseFloat(a) < parseFloat(b)) return -1;\n    if (parseFloat(a) > parseFloat(b)) return 1;\n  } // equal each other\n\n\n  return 0;\n}\n/**\n * creates a shallow copy of the `rows` input and returns the sorted copy. this function\n * does not sort the `rows` argument in place\n */\n\n\nfunction sortRows(rows, columns, dirs) {\n  if (!rows) return [];\n  if (!dirs || !dirs.length || !columns) return [...rows];\n  /**\n   * record the row ordering of results from prior sort operations (if applicable)\n   * this is necessary to guarantee stable sorting behavior\n   */\n\n  const rowToIndexMap = new Map();\n  rows.forEach((row, index) => rowToIndexMap.set(row, index));\n  const temp = [...rows];\n  const cols = columns.reduce((obj, col) => {\n    if (col.comparator && typeof col.comparator === 'function') {\n      obj[col.prop] = col.comparator;\n    }\n\n    return obj;\n  }, {}); // cache valueGetter and compareFn so that they\n  // do not need to be looked-up in the sort function body\n\n  const cachedDirs = dirs.map(dir => {\n    const prop = dir.prop;\n    return {\n      prop,\n      dir: dir.dir,\n      valueGetter: getterForProp(prop),\n      compareFn: cols[prop] || orderByComparator\n    };\n  });\n  return temp.sort(function (rowA, rowB) {\n    for (const cachedDir of cachedDirs) {\n      // Get property and valuegetters for column to be sorted\n      const {\n        prop,\n        valueGetter\n      } = cachedDir; // Get A and B cell values from rows based on properties of the columns\n\n      const propA = valueGetter(rowA, prop);\n      const propB = valueGetter(rowB, prop); // Compare function gets five parameters:\n      // Two cell values to be compared as propA and propB\n      // Two rows corresponding to the cells as rowA and rowB\n      // Direction of the sort for this column as SortDirection\n      // Compare can be a standard JS comparison function (a,b) => -1|0|1\n      // as additional parameters are silently ignored. The whole row and sort\n      // direction enable more complex sort logic.\n\n      const comparison = cachedDir.dir !== SortDirection.desc ? cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir) : -cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir); // Don't return 0 yet in case of needing to sort by next property\n\n      if (comparison !== 0) return comparison;\n    }\n\n    if (!(rowToIndexMap.has(rowA) && rowToIndexMap.has(rowB))) return 0;\n    /**\n     * all else being equal, preserve original order of the rows (stable sort)\n     */\n\n    return rowToIndexMap.get(rowA) < rowToIndexMap.get(rowB) ? -1 : 1;\n  });\n}\n\nclass DataTableHeaderCellComponent {\n  constructor(cd) {\n    this.cd = cd;\n    this.sort = new EventEmitter();\n    this.select = new EventEmitter();\n    this.columnContextmenu = new EventEmitter(false);\n    this.sortFn = this.onSort.bind(this);\n    this.selectFn = this.select.emit.bind(this.select);\n    this.cellContext = {\n      column: this.column,\n      sortDir: this.sortDir,\n      sortFn: this.sortFn,\n      allRowsSelected: this.allRowsSelected,\n      selectFn: this.selectFn\n    };\n  }\n\n  set allRowsSelected(value) {\n    this._allRowsSelected = value;\n    this.cellContext.allRowsSelected = value;\n  }\n\n  get allRowsSelected() {\n    return this._allRowsSelected;\n  }\n\n  set column(column) {\n    this._column = column;\n    this.cellContext.column = column;\n    this.cd.markForCheck();\n  }\n\n  get column() {\n    return this._column;\n  }\n\n  set sorts(val) {\n    this._sorts = val;\n    this.sortDir = this.calcSortDir(val);\n    this.cellContext.sortDir = this.sortDir;\n    this.sortClass = this.calcSortClass(this.sortDir);\n    this.cd.markForCheck();\n  }\n\n  get sorts() {\n    return this._sorts;\n  }\n\n  get columnCssClasses() {\n    let cls = 'datatable-header-cell';\n    if (this.column.sortable) cls += ' sortable';\n    if (this.column.resizeable) cls += ' resizeable';\n\n    if (this.column.headerClass) {\n      if (typeof this.column.headerClass === 'string') {\n        cls += ' ' + this.column.headerClass;\n      } else if (typeof this.column.headerClass === 'function') {\n        const res = this.column.headerClass({\n          column: this.column\n        });\n\n        if (typeof res === 'string') {\n          cls += res;\n        } else if (typeof res === 'object') {\n          const keys = Object.keys(res);\n\n          for (const k of keys) {\n            if (res[k] === true) cls += ` ${k}`;\n          }\n        }\n      }\n    }\n\n    const sortDir = this.sortDir;\n\n    if (sortDir) {\n      cls += ` sort-active sort-${sortDir}`;\n    }\n\n    return cls;\n  }\n\n  get name() {\n    // guaranteed to have a value by setColumnDefaults() in column-helper.ts\n    return this.column.headerTemplate === undefined ? this.column.name : undefined;\n  }\n\n  get minWidth() {\n    return this.column.minWidth;\n  }\n\n  get maxWidth() {\n    return this.column.maxWidth;\n  }\n\n  get width() {\n    return this.column.width;\n  }\n\n  get isCheckboxable() {\n    return this.column.checkboxable && this.column.headerCheckboxable && this.selectionType === SelectionType.checkbox;\n  }\n\n  onContextmenu($event) {\n    this.columnContextmenu.emit({\n      event: $event,\n      column: this.column\n    });\n  }\n\n  ngOnInit() {\n    this.sortClass = this.calcSortClass(this.sortDir);\n  }\n\n  calcSortDir(sorts) {\n    if (sorts && this.column) {\n      const sort = sorts.find(s => {\n        return s.prop === this.column.prop;\n      });\n      if (sort) return sort.dir;\n    }\n  }\n\n  onSort() {\n    if (!this.column.sortable) return;\n    const newValue = nextSortDir(this.sortType, this.sortDir);\n    this.sort.emit({\n      column: this.column,\n      prevValue: this.sortDir,\n      newValue\n    });\n  }\n\n  calcSortClass(sortDir) {\n    if (!this.cellContext.column.sortable) return;\n\n    if (sortDir === SortDirection.asc) {\n      return `sort-btn sort-asc ${this.sortAscendingIcon}`;\n    } else if (sortDir === SortDirection.desc) {\n      return `sort-btn sort-desc ${this.sortDescendingIcon}`;\n    } else {\n      return `sort-btn ${this.sortUnsetIcon}`;\n    }\n  }\n\n}\n\nDataTableHeaderCellComponent.ɵfac = function DataTableHeaderCellComponent_Factory(t) {\n  return new (t || DataTableHeaderCellComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nDataTableHeaderCellComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DataTableHeaderCellComponent,\n  selectors: [[\"datatable-header-cell\"]],\n  hostAttrs: [1, \"datatable-header-cell\"],\n  hostVars: 11,\n  hostBindings: function DataTableHeaderCellComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"contextmenu\", function DataTableHeaderCellComponent_contextmenu_HostBindingHandler($event) {\n        return ctx.onContextmenu($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"title\", ctx.name);\n      i0.ɵɵclassMap(ctx.columnCssClasses);\n      i0.ɵɵstyleProp(\"height\", ctx.headerHeight, \"px\")(\"min-width\", ctx.minWidth, \"px\")(\"max-width\", ctx.maxWidth, \"px\")(\"width\", ctx.width, \"px\");\n    }\n  },\n  inputs: {\n    sortType: \"sortType\",\n    sortAscendingIcon: \"sortAscendingIcon\",\n    sortDescendingIcon: \"sortDescendingIcon\",\n    sortUnsetIcon: \"sortUnsetIcon\",\n    isTarget: \"isTarget\",\n    targetMarkerTemplate: \"targetMarkerTemplate\",\n    targetMarkerContext: \"targetMarkerContext\",\n    allRowsSelected: \"allRowsSelected\",\n    selectionType: \"selectionType\",\n    column: \"column\",\n    headerHeight: \"headerHeight\",\n    sorts: \"sorts\"\n  },\n  outputs: {\n    sort: \"sort\",\n    select: \"select\",\n    columnContextmenu: \"columnContextmenu\"\n  },\n  decls: 6,\n  vars: 6,\n  consts: [[1, \"datatable-header-cell-template-wrap\"], [4, \"ngIf\"], [\"class\", \"datatable-checkbox\", 4, \"ngIf\"], [\"class\", \"datatable-header-cell-wrapper\", 4, \"ngIf\"], [3, \"click\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"datatable-checkbox\"], [\"type\", \"checkbox\", 3, \"checked\", \"change\"], [1, \"datatable-header-cell-wrapper\"], [1, \"datatable-header-cell-label\", \"draggable\", 3, \"innerHTML\", \"click\"]],\n  template: function DataTableHeaderCellComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, DataTableHeaderCellComponent_1_Template, 1, 2, null, 1);\n      i0.ɵɵtemplate(2, DataTableHeaderCellComponent_label_2_Template, 2, 1, \"label\", 2);\n      i0.ɵɵtemplate(3, DataTableHeaderCellComponent_span_3_Template, 2, 1, \"span\", 3);\n      i0.ɵɵtemplate(4, DataTableHeaderCellComponent_4_Template, 1, 2, null, 1);\n      i0.ɵɵelementStart(5, \"span\", 4);\n      i0.ɵɵlistener(\"click\", function DataTableHeaderCellComponent_Template_span_click_5_listener() {\n        return ctx.onSort();\n      });\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isTarget);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isCheckboxable);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.column.headerTemplate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.column.headerTemplate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassMap(ctx.sortClass);\n    }\n  },\n  directives: [i1.NgIf, i1.NgTemplateOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataTableHeaderCellComponent, [{\n    type: Component,\n    args: [{\n      selector: 'datatable-header-cell',\n      template: `\n    <div class=\"datatable-header-cell-template-wrap\">\n      <ng-template\n        *ngIf=\"isTarget\"\n        [ngTemplateOutlet]=\"targetMarkerTemplate\"\n        [ngTemplateOutletContext]=\"targetMarkerContext\"\n      >\n      </ng-template>\n      <label *ngIf=\"isCheckboxable\" class=\"datatable-checkbox\">\n        <input type=\"checkbox\" [checked]=\"allRowsSelected\" (change)=\"select.emit(!allRowsSelected)\" />\n      </label>\n      <span *ngIf=\"!column.headerTemplate\" class=\"datatable-header-cell-wrapper\">\n        <span class=\"datatable-header-cell-label draggable\" (click)=\"onSort()\" [innerHTML]=\"name\"> </span>\n      </span>\n      <ng-template\n        *ngIf=\"column.headerTemplate\"\n        [ngTemplateOutlet]=\"column.headerTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n      <span (click)=\"onSort()\" [class]=\"sortClass\"> </span>\n    </div>\n  `,\n      host: {\n        class: 'datatable-header-cell'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    sortType: [{\n      type: Input\n    }],\n    sortAscendingIcon: [{\n      type: Input\n    }],\n    sortDescendingIcon: [{\n      type: Input\n    }],\n    sortUnsetIcon: [{\n      type: Input\n    }],\n    isTarget: [{\n      type: Input\n    }],\n    targetMarkerTemplate: [{\n      type: Input\n    }],\n    targetMarkerContext: [{\n      type: Input\n    }],\n    allRowsSelected: [{\n      type: Input\n    }],\n    selectionType: [{\n      type: Input\n    }],\n    column: [{\n      type: Input\n    }],\n    headerHeight: [{\n      type: HostBinding,\n      args: ['style.height.px']\n    }, {\n      type: Input\n    }],\n    sorts: [{\n      type: Input\n    }],\n    sort: [{\n      type: Output\n    }],\n    select: [{\n      type: Output\n    }],\n    columnContextmenu: [{\n      type: Output\n    }],\n    columnCssClasses: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    name: [{\n      type: HostBinding,\n      args: ['attr.title']\n    }],\n    minWidth: [{\n      type: HostBinding,\n      args: ['style.minWidth.px']\n    }],\n    maxWidth: [{\n      type: HostBinding,\n      args: ['style.maxWidth.px']\n    }],\n    width: [{\n      type: HostBinding,\n      args: ['style.width.px']\n    }],\n    onContextmenu: [{\n      type: HostListener,\n      args: ['contextmenu', ['$event']]\n    }]\n  });\n})();\n\nclass DataTableHeaderComponent {\n  constructor(cd) {\n    this.cd = cd;\n    this.sort = new EventEmitter();\n    this.reorder = new EventEmitter();\n    this.resize = new EventEmitter();\n    this.select = new EventEmitter();\n    this.columnContextmenu = new EventEmitter(false);\n    this._columnGroupWidths = {\n      total: 100\n    };\n    this._styleByGroup = {\n      left: {},\n      center: {},\n      right: {}\n    };\n    this.destroyed = false;\n  }\n\n  set innerWidth(val) {\n    this._innerWidth = val;\n    setTimeout(() => {\n      if (this._columns) {\n        const colByPin = columnsByPin(this._columns);\n        this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\n        this.setStylesByGroup();\n      }\n    });\n  }\n\n  get innerWidth() {\n    return this._innerWidth;\n  }\n\n  set headerHeight(val) {\n    if (val !== 'auto') {\n      this._headerHeight = `${val}px`;\n    } else {\n      this._headerHeight = val;\n    }\n  }\n\n  get headerHeight() {\n    return this._headerHeight;\n  }\n\n  set columns(val) {\n    this._columns = val;\n    const colsByPin = columnsByPin(val);\n    this._columnsByPin = columnsByPinArr(val);\n    setTimeout(() => {\n      this._columnGroupWidths = columnGroupWidths(colsByPin, val);\n      this.setStylesByGroup();\n    });\n  }\n\n  get columns() {\n    return this._columns;\n  }\n\n  set offsetX(val) {\n    this._offsetX = val;\n    this.setStylesByGroup();\n  }\n\n  get offsetX() {\n    return this._offsetX;\n  }\n\n  ngOnDestroy() {\n    this.destroyed = true;\n  }\n\n  onLongPressStart({\n    event,\n    model\n  }) {\n    model.dragging = true;\n    this.dragEventTarget = event;\n  }\n\n  onLongPressEnd({\n    event,\n    model\n  }) {\n    this.dragEventTarget = event; // delay resetting so sort can be\n    // prevented if we were dragging\n\n    setTimeout(() => {\n      // datatable component creates copies from columns on reorder\n      // set dragging to false on new objects\n      const column = this._columns.find(c => c.$$id === model.$$id);\n\n      if (column) {\n        column.dragging = false;\n      }\n    }, 5);\n  }\n\n  get headerWidth() {\n    if (this.scrollbarH) {\n      return this.innerWidth + 'px';\n    }\n\n    return '100%';\n  }\n\n  trackByGroups(index, colGroup) {\n    return colGroup.type;\n  }\n\n  columnTrackingFn(index, column) {\n    return column.$$id;\n  }\n\n  onColumnResized(width, column) {\n    if (width <= column.minWidth) {\n      width = column.minWidth;\n    } else if (width >= column.maxWidth) {\n      width = column.maxWidth;\n    }\n\n    this.resize.emit({\n      column,\n      prevValue: column.width,\n      newValue: width\n    });\n  }\n\n  onColumnReordered({\n    prevIndex,\n    newIndex,\n    model\n  }) {\n    const column = this.getColumn(newIndex);\n    column.isTarget = false;\n    column.targetMarkerContext = undefined;\n    this.reorder.emit({\n      column: model,\n      prevValue: prevIndex,\n      newValue: newIndex\n    });\n  }\n\n  onTargetChanged({\n    prevIndex,\n    newIndex,\n    initialIndex\n  }) {\n    if (prevIndex || prevIndex === 0) {\n      const oldColumn = this.getColumn(prevIndex);\n      oldColumn.isTarget = false;\n      oldColumn.targetMarkerContext = undefined;\n    }\n\n    if (newIndex || newIndex === 0) {\n      const newColumn = this.getColumn(newIndex);\n      newColumn.isTarget = true;\n\n      if (initialIndex !== newIndex) {\n        newColumn.targetMarkerContext = {\n          class: 'targetMarker '.concat(initialIndex > newIndex ? 'dragFromRight' : 'dragFromLeft')\n        };\n      }\n    }\n  }\n\n  getColumn(index) {\n    const leftColumnCount = this._columnsByPin[0].columns.length;\n\n    if (index < leftColumnCount) {\n      return this._columnsByPin[0].columns[index];\n    }\n\n    const centerColumnCount = this._columnsByPin[1].columns.length;\n\n    if (index < leftColumnCount + centerColumnCount) {\n      return this._columnsByPin[1].columns[index - leftColumnCount];\n    }\n\n    return this._columnsByPin[2].columns[index - leftColumnCount - centerColumnCount];\n  }\n\n  onSort({\n    column,\n    prevValue,\n    newValue\n  }) {\n    // if we are dragging don't sort!\n    if (column.dragging) {\n      return;\n    }\n\n    const sorts = this.calcNewSorts(column, prevValue, newValue);\n    this.sort.emit({\n      sorts,\n      column,\n      prevValue,\n      newValue\n    });\n  }\n\n  calcNewSorts(column, prevValue, newValue) {\n    let idx = 0;\n\n    if (!this.sorts) {\n      this.sorts = [];\n    }\n\n    const sorts = this.sorts.map((s, i) => {\n      s = Object.assign({}, s);\n\n      if (s.prop === column.prop) {\n        idx = i;\n      }\n\n      return s;\n    });\n\n    if (newValue === undefined) {\n      sorts.splice(idx, 1);\n    } else if (prevValue) {\n      sorts[idx].dir = newValue;\n    } else {\n      if (this.sortType === SortType.single) {\n        sorts.splice(0, this.sorts.length);\n      }\n\n      sorts.push({\n        dir: newValue,\n        prop: column.prop\n      });\n    }\n\n    return sorts;\n  }\n\n  setStylesByGroup() {\n    this._styleByGroup.left = this.calcStylesByGroup('left');\n    this._styleByGroup.center = this.calcStylesByGroup('center');\n    this._styleByGroup.right = this.calcStylesByGroup('right');\n\n    if (!this.destroyed) {\n      this.cd.detectChanges();\n    }\n  }\n\n  calcStylesByGroup(group) {\n    const widths = this._columnGroupWidths;\n    const offsetX = this.offsetX;\n    const styles = {\n      width: `${widths[group]}px`\n    };\n\n    if (group === 'center') {\n      translateXY(styles, offsetX * -1, 0);\n    } else if (group === 'right') {\n      const totalDiff = widths.total - this.innerWidth;\n      const offset = totalDiff * -1;\n      translateXY(styles, offset, 0);\n    }\n\n    return styles;\n  }\n\n}\n\nDataTableHeaderComponent.ɵfac = function DataTableHeaderComponent_Factory(t) {\n  return new (t || DataTableHeaderComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nDataTableHeaderComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DataTableHeaderComponent,\n  selectors: [[\"datatable-header\"]],\n  hostAttrs: [1, \"datatable-header\"],\n  hostVars: 4,\n  hostBindings: function DataTableHeaderComponent_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"height\", ctx.headerHeight)(\"width\", ctx.headerWidth);\n    }\n  },\n  inputs: {\n    sortAscendingIcon: \"sortAscendingIcon\",\n    sortDescendingIcon: \"sortDescendingIcon\",\n    sortUnsetIcon: \"sortUnsetIcon\",\n    scrollbarH: \"scrollbarH\",\n    dealsWithGroup: \"dealsWithGroup\",\n    targetMarkerTemplate: \"targetMarkerTemplate\",\n    innerWidth: \"innerWidth\",\n    sorts: \"sorts\",\n    sortType: \"sortType\",\n    allRowsSelected: \"allRowsSelected\",\n    selectionType: \"selectionType\",\n    reorderable: \"reorderable\",\n    headerHeight: \"headerHeight\",\n    columns: \"columns\",\n    offsetX: \"offsetX\"\n  },\n  outputs: {\n    sort: \"sort\",\n    reorder: \"reorder\",\n    resize: \"resize\",\n    select: \"select\",\n    columnContextmenu: \"columnContextmenu\"\n  },\n  decls: 2,\n  vars: 4,\n  consts: [[\"role\", \"row\", \"orderable\", \"\", 1, \"datatable-header-inner\", 3, \"reorder\", \"targetChanged\"], [3, \"class\", \"ngStyle\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"ngStyle\"], [\"role\", \"columnheader\", \"resizeable\", \"\", \"long-press\", \"\", \"draggable\", \"\", 3, \"resizeEnabled\", \"pressModel\", \"pressEnabled\", \"dragX\", \"dragY\", \"dragModel\", \"dragEventTarget\", \"headerHeight\", \"isTarget\", \"targetMarkerTemplate\", \"targetMarkerContext\", \"column\", \"sortType\", \"sorts\", \"selectionType\", \"sortAscendingIcon\", \"sortDescendingIcon\", \"sortUnsetIcon\", \"allRowsSelected\", \"resize\", \"longPressStart\", \"longPressEnd\", \"sort\", \"select\", \"columnContextmenu\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"role\", \"columnheader\", \"resizeable\", \"\", \"long-press\", \"\", \"draggable\", \"\", 3, \"resizeEnabled\", \"pressModel\", \"pressEnabled\", \"dragX\", \"dragY\", \"dragModel\", \"dragEventTarget\", \"headerHeight\", \"isTarget\", \"targetMarkerTemplate\", \"targetMarkerContext\", \"column\", \"sortType\", \"sorts\", \"selectionType\", \"sortAscendingIcon\", \"sortDescendingIcon\", \"sortUnsetIcon\", \"allRowsSelected\", \"resize\", \"longPressStart\", \"longPressEnd\", \"sort\", \"select\", \"columnContextmenu\"]],\n  template: function DataTableHeaderComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵlistener(\"reorder\", function DataTableHeaderComponent_Template_div_reorder_0_listener($event) {\n        return ctx.onColumnReordered($event);\n      })(\"targetChanged\", function DataTableHeaderComponent_Template_div_targetChanged_0_listener($event) {\n        return ctx.onTargetChanged($event);\n      });\n      i0.ɵɵtemplate(1, DataTableHeaderComponent_div_1_Template, 2, 5, \"div\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx._columnGroupWidths.total, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx._columnsByPin)(\"ngForTrackBy\", ctx.trackByGroups);\n    }\n  },\n  directives: [DataTableHeaderCellComponent, OrderableDirective, i1.NgForOf, i1.NgStyle, ResizeableDirective, LongPressDirective, DraggableDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataTableHeaderComponent, [{\n    type: Component,\n    args: [{\n      selector: 'datatable-header',\n      template: `\n    <div\n      role=\"row\"\n      orderable\n      (reorder)=\"onColumnReordered($event)\"\n      (targetChanged)=\"onTargetChanged($event)\"\n      [style.width.px]=\"_columnGroupWidths.total\"\n      class=\"datatable-header-inner\"\n    >\n      <div\n        *ngFor=\"let colGroup of _columnsByPin; trackBy: trackByGroups\"\n        [class]=\"'datatable-row-' + colGroup.type\"\n        [ngStyle]=\"_styleByGroup[colGroup.type]\"\n      >\n        <datatable-header-cell\n          role=\"columnheader\"\n          *ngFor=\"let column of colGroup.columns; trackBy: columnTrackingFn\"\n          resizeable\n          [resizeEnabled]=\"column.resizeable\"\n          (resize)=\"onColumnResized($event, column)\"\n          long-press\n          [pressModel]=\"column\"\n          [pressEnabled]=\"reorderable && column.draggable\"\n          (longPressStart)=\"onLongPressStart($event)\"\n          (longPressEnd)=\"onLongPressEnd($event)\"\n          draggable\n          [dragX]=\"reorderable && column.draggable && column.dragging\"\n          [dragY]=\"false\"\n          [dragModel]=\"column\"\n          [dragEventTarget]=\"dragEventTarget\"\n          [headerHeight]=\"headerHeight\"\n          [isTarget]=\"column.isTarget\"\n          [targetMarkerTemplate]=\"targetMarkerTemplate\"\n          [targetMarkerContext]=\"column.targetMarkerContext\"\n          [column]=\"column\"\n          [sortType]=\"sortType\"\n          [sorts]=\"sorts\"\n          [selectionType]=\"selectionType\"\n          [sortAscendingIcon]=\"sortAscendingIcon\"\n          [sortDescendingIcon]=\"sortDescendingIcon\"\n          [sortUnsetIcon]=\"sortUnsetIcon\"\n          [allRowsSelected]=\"allRowsSelected\"\n          (sort)=\"onSort($event)\"\n          (select)=\"select.emit($event)\"\n          (columnContextmenu)=\"columnContextmenu.emit($event)\"\n        >\n        </datatable-header-cell>\n      </div>\n    </div>\n  `,\n      host: {\n        class: 'datatable-header'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    sortAscendingIcon: [{\n      type: Input\n    }],\n    sortDescendingIcon: [{\n      type: Input\n    }],\n    sortUnsetIcon: [{\n      type: Input\n    }],\n    scrollbarH: [{\n      type: Input\n    }],\n    dealsWithGroup: [{\n      type: Input\n    }],\n    targetMarkerTemplate: [{\n      type: Input\n    }],\n    innerWidth: [{\n      type: Input\n    }],\n    sorts: [{\n      type: Input\n    }],\n    sortType: [{\n      type: Input\n    }],\n    allRowsSelected: [{\n      type: Input\n    }],\n    selectionType: [{\n      type: Input\n    }],\n    reorderable: [{\n      type: Input\n    }],\n    headerHeight: [{\n      type: HostBinding,\n      args: ['style.height']\n    }, {\n      type: Input\n    }],\n    columns: [{\n      type: Input\n    }],\n    offsetX: [{\n      type: Input\n    }],\n    sort: [{\n      type: Output\n    }],\n    reorder: [{\n      type: Output\n    }],\n    resize: [{\n      type: Output\n    }],\n    select: [{\n      type: Output\n    }],\n    columnContextmenu: [{\n      type: Output\n    }],\n    headerWidth: [{\n      type: HostBinding,\n      args: ['style.width']\n    }]\n  });\n})();\n/**\n * Throttle a function\n */\n\n\nfunction throttle(func, wait, options) {\n  options = options || {};\n  let context;\n  let args;\n  let result;\n  let timeout = null;\n  let previous = 0;\n\n  function later() {\n    previous = options.leading === false ? 0 : +new Date();\n    timeout = null;\n    result = func.apply(context, args);\n  }\n\n  return function () {\n    const now = +new Date();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    const remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\n\n\nfunction throttleable(duration, options) {\n  return function innerDecorator(target, key, descriptor) {\n    return {\n      configurable: true,\n      enumerable: descriptor.enumerable,\n      get: function getter() {\n        Object.defineProperty(this, key, {\n          configurable: true,\n          enumerable: descriptor.enumerable,\n          value: throttle(descriptor.value, duration, options)\n        });\n        return this[key];\n      }\n    };\n  };\n}\n/**\n * Calculates the Total Flex Grow\n */\n\n\nfunction getTotalFlexGrow(columns) {\n  let totalFlexGrow = 0;\n\n  for (const c of columns) {\n    totalFlexGrow += c.flexGrow || 0;\n  }\n\n  return totalFlexGrow;\n}\n/**\n * Adjusts the column widths.\n * Inspired by: https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableWidthHelper.js\n */\n\n\nfunction adjustColumnWidths(allColumns, expectedWidth) {\n  const columnsWidth = columnsTotalWidth(allColumns);\n  const totalFlexGrow = getTotalFlexGrow(allColumns);\n  const colsByGroup = columnsByPin(allColumns);\n\n  if (columnsWidth !== expectedWidth) {\n    scaleColumns(colsByGroup, expectedWidth, totalFlexGrow);\n  }\n}\n/**\n * Resizes columns based on the flexGrow property, while respecting manually set widths\n */\n\n\nfunction scaleColumns(colsByGroup, maxWidth, totalFlexGrow) {\n  // calculate total width and flexgrow points for coulumns that can be resized\n  for (const attr in colsByGroup) {\n    for (const column of colsByGroup[attr]) {\n      if (!column.canAutoResize) {\n        maxWidth -= column.width;\n        totalFlexGrow -= column.flexGrow ? column.flexGrow : 0;\n      } else {\n        column.width = 0;\n      }\n    }\n  }\n\n  const hasMinWidth = {};\n  let remainingWidth = maxWidth; // resize columns until no width is left to be distributed\n\n  do {\n    const widthPerFlexPoint = remainingWidth / totalFlexGrow;\n    remainingWidth = 0;\n\n    for (const attr in colsByGroup) {\n      for (const column of colsByGroup[attr]) {\n        // if the column can be resize and it hasn't reached its minimum width yet\n        if (column.canAutoResize && !hasMinWidth[column.prop]) {\n          const newWidth = column.width + column.flexGrow * widthPerFlexPoint;\n\n          if (column.minWidth !== undefined && newWidth < column.minWidth) {\n            remainingWidth += newWidth - column.minWidth;\n            column.width = column.minWidth;\n            hasMinWidth[column.prop] = true;\n          } else {\n            column.width = newWidth;\n          }\n        }\n      }\n    }\n  } while (remainingWidth !== 0);\n}\n/**\n * Forces the width of the columns to\n * distribute equally but overflowing when necessary\n *\n * Rules:\n *\n *  - If combined withs are less than the total width of the grid,\n *    proportion the widths given the min / max / normal widths to fill the width.\n *\n *  - If the combined widths, exceed the total width of the grid,\n *    use the standard widths.\n *\n *  - If a column is resized, it should always use that width\n *\n *  - The proportional widths should never fall below min size if specified.\n *\n *  - If the grid starts off small but then becomes greater than the size ( + / - )\n *    the width should use the original width; not the newly proportioned widths.\n */\n\n\nfunction forceFillColumnWidths(allColumns, expectedWidth, startIdx, allowBleed, defaultColWidth = 300) {\n  const columnsToResize = allColumns.slice(startIdx + 1, allColumns.length).filter(c => {\n    return c.canAutoResize !== false;\n  });\n\n  for (const column of columnsToResize) {\n    if (!column.$$oldWidth) {\n      column.$$oldWidth = column.width;\n    }\n  }\n\n  let additionWidthPerColumn = 0;\n  let exceedsWindow = false;\n  let contentWidth = getContentWidth(allColumns, defaultColWidth);\n  let remainingWidth = expectedWidth - contentWidth;\n  const columnsProcessed = [];\n  const remainingWidthLimit = 1; // when to stop\n  // This loop takes care of the\n\n  do {\n    additionWidthPerColumn = remainingWidth / columnsToResize.length;\n    exceedsWindow = contentWidth >= expectedWidth;\n\n    for (const column of columnsToResize) {\n      if (exceedsWindow && allowBleed) {\n        column.width = column.$$oldWidth || column.width || defaultColWidth;\n      } else {\n        const newSize = (column.width || defaultColWidth) + additionWidthPerColumn;\n\n        if (column.minWidth && newSize < column.minWidth) {\n          column.width = column.minWidth;\n          columnsProcessed.push(column);\n        } else if (column.maxWidth && newSize > column.maxWidth) {\n          column.width = column.maxWidth;\n          columnsProcessed.push(column);\n        } else {\n          column.width = newSize;\n        }\n      }\n\n      column.width = Math.max(0, column.width);\n    }\n\n    contentWidth = getContentWidth(allColumns);\n    remainingWidth = expectedWidth - contentWidth;\n    removeProcessedColumns(columnsToResize, columnsProcessed);\n  } while (remainingWidth > remainingWidthLimit && columnsToResize.length !== 0);\n}\n/**\n * Remove the processed columns from the current active columns.\n */\n\n\nfunction removeProcessedColumns(columnsToResize, columnsProcessed) {\n  for (const column of columnsProcessed) {\n    const index = columnsToResize.indexOf(column);\n    columnsToResize.splice(index, 1);\n  }\n}\n/**\n * Gets the width of the columns\n */\n\n\nfunction getContentWidth(allColumns, defaultColWidth = 300) {\n  let contentWidth = 0;\n\n  for (const column of allColumns) {\n    contentWidth += column.width || defaultColWidth;\n  }\n\n  return contentWidth;\n}\n\nclass DataTablePagerComponent {\n  constructor() {\n    this.change = new EventEmitter();\n    this._count = 0;\n    this._page = 1;\n    this._size = 0;\n  }\n\n  set size(val) {\n    this._size = val;\n    this.pages = this.calcPages();\n  }\n\n  get size() {\n    return this._size;\n  }\n\n  set count(val) {\n    this._count = val;\n    this.pages = this.calcPages();\n  }\n\n  get count() {\n    return this._count;\n  }\n\n  set page(val) {\n    this._page = val;\n    this.pages = this.calcPages();\n  }\n\n  get page() {\n    return this._page;\n  }\n\n  get totalPages() {\n    const count = this.size < 1 ? 1 : Math.ceil(this.count / this.size);\n    return Math.max(count || 0, 1);\n  }\n\n  canPrevious() {\n    return this.page > 1;\n  }\n\n  canNext() {\n    return this.page < this.totalPages;\n  }\n\n  prevPage() {\n    this.selectPage(this.page - 1);\n  }\n\n  nextPage() {\n    this.selectPage(this.page + 1);\n  }\n\n  selectPage(page) {\n    if (page > 0 && page <= this.totalPages && page !== this.page) {\n      this.page = page;\n      this.change.emit({\n        page\n      });\n    }\n  }\n\n  calcPages(page) {\n    const pages = [];\n    let startPage = 1;\n    let endPage = this.totalPages;\n    const maxSize = 5;\n    const isMaxSized = maxSize < this.totalPages;\n    page = page || this.page;\n\n    if (isMaxSized) {\n      startPage = page - Math.floor(maxSize / 2);\n      endPage = page + Math.floor(maxSize / 2);\n\n      if (startPage < 1) {\n        startPage = 1;\n        endPage = Math.min(startPage + maxSize - 1, this.totalPages);\n      } else if (endPage > this.totalPages) {\n        startPage = Math.max(this.totalPages - maxSize + 1, 1);\n        endPage = this.totalPages;\n      }\n    }\n\n    for (let num = startPage; num <= endPage; num++) {\n      pages.push({\n        number: num,\n        text: num\n      });\n    }\n\n    return pages;\n  }\n\n}\n\nDataTablePagerComponent.ɵfac = function DataTablePagerComponent_Factory(t) {\n  return new (t || DataTablePagerComponent)();\n};\n\nDataTablePagerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DataTablePagerComponent,\n  selectors: [[\"datatable-pager\"]],\n  hostAttrs: [1, \"datatable-pager\"],\n  inputs: {\n    pagerLeftArrowIcon: \"pagerLeftArrowIcon\",\n    pagerRightArrowIcon: \"pagerRightArrowIcon\",\n    pagerPreviousIcon: \"pagerPreviousIcon\",\n    pagerNextIcon: \"pagerNextIcon\",\n    size: \"size\",\n    count: \"count\",\n    page: \"page\"\n  },\n  outputs: {\n    change: \"change\"\n  },\n  decls: 14,\n  vars: 21,\n  consts: [[1, \"pager\"], [\"role\", \"button\", \"aria-label\", \"go to first page\", \"href\", \"javascript:void(0)\", 3, \"click\"], [\"role\", \"button\", \"aria-label\", \"go to previous page\", \"href\", \"javascript:void(0)\", 3, \"click\"], [\"role\", \"button\", \"class\", \"pages\", 3, \"active\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"button\", \"aria-label\", \"go to next page\", \"href\", \"javascript:void(0)\", 3, \"click\"], [\"role\", \"button\", \"aria-label\", \"go to last page\", \"href\", \"javascript:void(0)\", 3, \"click\"], [\"role\", \"button\", 1, \"pages\"], [\"href\", \"javascript:void(0)\", 3, \"click\"]],\n  template: function DataTablePagerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ul\", 0)(1, \"li\")(2, \"a\", 1);\n      i0.ɵɵlistener(\"click\", function DataTablePagerComponent_Template_a_click_2_listener() {\n        return ctx.selectPage(1);\n      });\n      i0.ɵɵelement(3, \"i\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"li\")(5, \"a\", 2);\n      i0.ɵɵlistener(\"click\", function DataTablePagerComponent_Template_a_click_5_listener() {\n        return ctx.prevPage();\n      });\n      i0.ɵɵelement(6, \"i\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(7, DataTablePagerComponent_li_7_Template, 3, 4, \"li\", 3);\n      i0.ɵɵelementStart(8, \"li\")(9, \"a\", 4);\n      i0.ɵɵlistener(\"click\", function DataTablePagerComponent_Template_a_click_9_listener() {\n        return ctx.nextPage();\n      });\n      i0.ɵɵelement(10, \"i\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"li\")(12, \"a\", 5);\n      i0.ɵɵlistener(\"click\", function DataTablePagerComponent_Template_a_click_12_listener() {\n        return ctx.selectPage(ctx.totalPages);\n      });\n      i0.ɵɵelement(13, \"i\");\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"disabled\", !ctx.canPrevious());\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassMap(ctx.pagerPreviousIcon);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"disabled\", !ctx.canPrevious());\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassMap(ctx.pagerLeftArrowIcon);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.pages);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"disabled\", !ctx.canNext());\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassMap(ctx.pagerRightArrowIcon);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"disabled\", !ctx.canNext());\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassMap(ctx.pagerNextIcon);\n    }\n  },\n  directives: [i1.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataTablePagerComponent, [{\n    type: Component,\n    args: [{\n      selector: 'datatable-pager',\n      template: `\n    <ul class=\"pager\">\n      <li [class.disabled]=\"!canPrevious()\">\n        <a role=\"button\" aria-label=\"go to first page\" href=\"javascript:void(0)\" (click)=\"selectPage(1)\">\n          <i class=\"{{ pagerPreviousIcon }}\"></i>\n        </a>\n      </li>\n      <li [class.disabled]=\"!canPrevious()\">\n        <a role=\"button\" aria-label=\"go to previous page\" href=\"javascript:void(0)\" (click)=\"prevPage()\">\n          <i class=\"{{ pagerLeftArrowIcon }}\"></i>\n        </a>\n      </li>\n      <li\n        role=\"button\"\n        [attr.aria-label]=\"'page ' + pg.number\"\n        class=\"pages\"\n        *ngFor=\"let pg of pages\"\n        [class.active]=\"pg.number === page\"\n      >\n        <a href=\"javascript:void(0)\" (click)=\"selectPage(pg.number)\">\n          {{ pg.text }}\n        </a>\n      </li>\n      <li [class.disabled]=\"!canNext()\">\n        <a role=\"button\" aria-label=\"go to next page\" href=\"javascript:void(0)\" (click)=\"nextPage()\">\n          <i class=\"{{ pagerRightArrowIcon }}\"></i>\n        </a>\n      </li>\n      <li [class.disabled]=\"!canNext()\">\n        <a role=\"button\" aria-label=\"go to last page\" href=\"javascript:void(0)\" (click)=\"selectPage(totalPages)\">\n          <i class=\"{{ pagerNextIcon }}\"></i>\n        </a>\n      </li>\n    </ul>\n  `,\n      host: {\n        class: 'datatable-pager'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    pagerLeftArrowIcon: [{\n      type: Input\n    }],\n    pagerRightArrowIcon: [{\n      type: Input\n    }],\n    pagerPreviousIcon: [{\n      type: Input\n    }],\n    pagerNextIcon: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    count: [{\n      type: Input\n    }],\n    page: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }]\n  });\n})();\n\nclass DataTableFooterComponent {\n  constructor() {\n    this.selectedCount = 0;\n    this.page = new EventEmitter();\n  }\n\n  get isVisible() {\n    return this.rowCount / this.pageSize > 1;\n  }\n\n  get curPage() {\n    return this.offset + 1;\n  }\n\n}\n\nDataTableFooterComponent.ɵfac = function DataTableFooterComponent_Factory(t) {\n  return new (t || DataTableFooterComponent)();\n};\n\nDataTableFooterComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DataTableFooterComponent,\n  selectors: [[\"datatable-footer\"]],\n  hostAttrs: [1, \"datatable-footer\"],\n  inputs: {\n    footerHeight: \"footerHeight\",\n    rowCount: \"rowCount\",\n    pageSize: \"pageSize\",\n    offset: \"offset\",\n    pagerLeftArrowIcon: \"pagerLeftArrowIcon\",\n    pagerRightArrowIcon: \"pagerRightArrowIcon\",\n    pagerPreviousIcon: \"pagerPreviousIcon\",\n    pagerNextIcon: \"pagerNextIcon\",\n    totalMessage: \"totalMessage\",\n    footerTemplate: \"footerTemplate\",\n    selectedCount: \"selectedCount\",\n    selectedMessage: \"selectedMessage\"\n  },\n  outputs: {\n    page: \"page\"\n  },\n  decls: 4,\n  vars: 8,\n  consts: [[1, \"datatable-footer-inner\", 3, \"ngClass\"], [4, \"ngIf\"], [\"class\", \"page-count\", 4, \"ngIf\"], [3, \"pagerLeftArrowIcon\", \"pagerRightArrowIcon\", \"pagerPreviousIcon\", \"pagerNextIcon\", \"page\", \"size\", \"count\", \"hidden\", \"change\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"page-count\"], [3, \"pagerLeftArrowIcon\", \"pagerRightArrowIcon\", \"pagerPreviousIcon\", \"pagerNextIcon\", \"page\", \"size\", \"count\", \"hidden\", \"change\"]],\n  template: function DataTableFooterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, DataTableFooterComponent_1_Template, 1, 8, null, 1);\n      i0.ɵɵtemplate(2, DataTableFooterComponent_div_2_Template, 3, 3, \"div\", 2);\n      i0.ɵɵtemplate(3, DataTableFooterComponent_datatable_pager_3_Template, 1, 8, \"datatable-pager\", 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"height\", ctx.footerHeight, \"px\");\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(6, _c4, ctx.selectedMessage));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.footerTemplate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.footerTemplate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.footerTemplate);\n    }\n  },\n  directives: [DataTablePagerComponent, i1.NgClass, i1.NgIf, i1.NgTemplateOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DataTableFooterComponent, [{\n    type: Component,\n    args: [{\n      selector: 'datatable-footer',\n      template: `\n    <div\n      class=\"datatable-footer-inner\"\n      [ngClass]=\"{ 'selected-count': selectedMessage }\"\n      [style.height.px]=\"footerHeight\"\n    >\n      <ng-template\n        *ngIf=\"footerTemplate\"\n        [ngTemplateOutlet]=\"footerTemplate.template\"\n        [ngTemplateOutletContext]=\"{\n          rowCount: rowCount,\n          pageSize: pageSize,\n          selectedCount: selectedCount,\n          curPage: curPage,\n          offset: offset\n        }\"\n      >\n      </ng-template>\n      <div class=\"page-count\" *ngIf=\"!footerTemplate\">\n        <span *ngIf=\"selectedMessage\"> {{ selectedCount?.toLocaleString() }} {{ selectedMessage }} / </span>\n        {{ rowCount?.toLocaleString() }} {{ totalMessage }}\n      </div>\n      <datatable-pager\n        *ngIf=\"!footerTemplate\"\n        [pagerLeftArrowIcon]=\"pagerLeftArrowIcon\"\n        [pagerRightArrowIcon]=\"pagerRightArrowIcon\"\n        [pagerPreviousIcon]=\"pagerPreviousIcon\"\n        [pagerNextIcon]=\"pagerNextIcon\"\n        [page]=\"curPage\"\n        [size]=\"pageSize\"\n        [count]=\"rowCount\"\n        [hidden]=\"!isVisible\"\n        (change)=\"page.emit($event)\"\n      >\n      </datatable-pager>\n    </div>\n  `,\n      host: {\n        class: 'datatable-footer'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    footerHeight: [{\n      type: Input\n    }],\n    rowCount: [{\n      type: Input\n    }],\n    pageSize: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    pagerLeftArrowIcon: [{\n      type: Input\n    }],\n    pagerRightArrowIcon: [{\n      type: Input\n    }],\n    pagerPreviousIcon: [{\n      type: Input\n    }],\n    pagerNextIcon: [{\n      type: Input\n    }],\n    totalMessage: [{\n      type: Input\n    }],\n    footerTemplate: [{\n      type: Input\n    }],\n    selectedCount: [{\n      type: Input\n    }],\n    selectedMessage: [{\n      type: Input\n    }],\n    page: [{\n      type: Output\n    }]\n  });\n})();\n\nclass DatatableComponent {\n  constructor(scrollbarHelper, dimensionsHelper, cd, element, differs, columnChangesService, configuration) {\n    this.scrollbarHelper = scrollbarHelper;\n    this.dimensionsHelper = dimensionsHelper;\n    this.cd = cd;\n    this.columnChangesService = columnChangesService;\n    this.configuration = configuration;\n    /**\n     * List of row objects that should be\n     * represented as selected in the grid.\n     * Default value: `[]`\n     */\n\n    this.selected = [];\n    /**\n     * Enable vertical scrollbars\n     */\n\n    this.scrollbarV = false;\n    /**\n     * Enable horz scrollbars\n     */\n\n    this.scrollbarH = false;\n    /**\n     * The row height; which is necessary\n     * to calculate the height for the lazy rendering.\n     */\n\n    this.rowHeight = 30;\n    /**\n     * Type of column width distribution formula.\n     * Example: flex, force, standard\n     */\n\n    this.columnMode = ColumnMode.standard;\n    /**\n     * The minimum header height in pixels.\n     * Pass a falsey for no header\n     */\n\n    this.headerHeight = 30;\n    /**\n     * The minimum footer height in pixels.\n     * Pass falsey for no footer\n     */\n\n    this.footerHeight = 0;\n    /**\n     * If the table should use external paging\n     * otherwise its assumed that all data is preloaded.\n     */\n\n    this.externalPaging = false;\n    /**\n     * If the table should use external sorting or\n     * the built-in basic sorting.\n     */\n\n    this.externalSorting = false;\n    /**\n     * Show the linear loading bar.\n     * Default value: `false`\n     */\n\n    this.loadingIndicator = false;\n    /**\n     * Enable/Disable ability to re-order columns\n     * by dragging them.\n     */\n\n    this.reorderable = true;\n    /**\n     * Swap columns on re-order columns or\n     * move them.\n     */\n\n    this.swapColumns = true;\n    /**\n     * The type of sorting\n     */\n\n    this.sortType = SortType.single;\n    /**\n     * Array of sorted columns by property and type.\n     * Default value: `[]`\n     */\n\n    this.sorts = [];\n    /**\n     * Css class overrides\n     */\n\n    this.cssClasses = {\n      sortAscending: 'datatable-icon-up',\n      sortDescending: 'datatable-icon-down',\n      sortUnset: 'datatable-icon-sort-unset',\n      pagerLeftArrow: 'datatable-icon-left',\n      pagerRightArrow: 'datatable-icon-right',\n      pagerPrevious: 'datatable-icon-prev',\n      pagerNext: 'datatable-icon-skip'\n    };\n    /**\n     * Message overrides for localization\n     *\n     * emptyMessage     [default] = 'No data to display'\n     * totalMessage     [default] = 'total'\n     * selectedMessage  [default] = 'selected'\n     */\n\n    this.messages = {\n      // Message to show when array is presented\n      // but contains no values\n      emptyMessage: 'No data to display',\n      // Footer total message\n      totalMessage: 'total',\n      // Footer selected message\n      selectedMessage: 'selected'\n    };\n    /**\n     * A boolean you can use to set the detault behaviour of rows and groups\n     * whether they will start expanded or not. If ommited the default is NOT expanded.\n     *\n     */\n\n    this.groupExpansionDefault = false;\n    /**\n     * Property to which you can use for determining select all\n     * rows on current page or not.\n     *\n     * @memberOf DatatableComponent\n     */\n\n    this.selectAllRowsOnPage = false;\n    /**\n     * A flag for row virtualization on / off\n     */\n\n    this.virtualization = true;\n    /**\n     * A flag for switching summary row on / off\n     */\n\n    this.summaryRow = false;\n    /**\n     * A height of summary row\n     */\n\n    this.summaryHeight = 30;\n    /**\n     * A property holds a summary row position: top/bottom\n     */\n\n    this.summaryPosition = 'top';\n    /**\n     * Body was scrolled typically in a `scrollbarV:true` scenario.\n     */\n\n    this.scroll = new EventEmitter();\n    /**\n     * A cell or row was focused via keyboard or mouse click.\n     */\n\n    this.activate = new EventEmitter();\n    /**\n     * A cell or row was selected.\n     */\n\n    this.select = new EventEmitter();\n    /**\n     * Column sort was invoked.\n     */\n\n    this.sort = new EventEmitter();\n    /**\n     * The table was paged either triggered by the pager or the body scroll.\n     */\n\n    this.page = new EventEmitter();\n    /**\n     * Columns were re-ordered.\n     */\n\n    this.reorder = new EventEmitter();\n    /**\n     * Column was resized.\n     */\n\n    this.resize = new EventEmitter();\n    /**\n     * The context menu was invoked on the table.\n     * type indicates whether the header or the body was clicked.\n     * content contains either the column or the row that was clicked.\n     */\n\n    this.tableContextmenu = new EventEmitter(false);\n    /**\n     * A row was expanded ot collapsed for tree\n     */\n\n    this.treeAction = new EventEmitter();\n    this.rowCount = 0;\n    this._offsetX = new BehaviorSubject(0);\n    this._count = 0;\n    this._offset = 0;\n    this._subscriptions = [];\n    /**\n     * This will be used when displaying or selecting rows.\n     * when tracking/comparing them, we'll use the value of this fn,\n     *\n     * (`fn(x) === fn(y)` instead of `x === y`)\n     */\n\n    this.rowIdentity = x => {\n      if (this._groupRowsBy) {\n        // each group in groupedRows are stored as {key, value: [rows]},\n        // where key is the groupRowsBy index\n        return x.key;\n      } else {\n        return x;\n      }\n    }; // get ref to elm for measuring\n\n\n    this.element = element.nativeElement;\n    this.rowDiffer = differs.find({}).create(); // apply global settings from Module.forRoot\n\n    if (this.configuration && this.configuration.messages) {\n      this.messages = Object.assign({}, this.configuration.messages);\n    }\n  }\n  /**\n   * Rows that are displayed in the table.\n   */\n\n\n  set rows(val) {\n    this._rows = val;\n\n    if (val) {\n      this._internalRows = [...val];\n    } // auto sort on new updates\n\n\n    if (!this.externalSorting) {\n      this.sortInternalRows();\n    } // auto group by parent on new update\n\n\n    this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation)); // recalculate sizes/etc\n\n    this.recalculate();\n\n    if (this._rows && this._groupRowsBy) {\n      // If a column has been specified in _groupRowsBy created a new array with the data grouped by that row\n      this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\n    }\n\n    this.cd.markForCheck();\n  }\n  /**\n   * Gets the rows.\n   */\n\n\n  get rows() {\n    return this._rows;\n  }\n  /**\n   * This attribute allows the user to set the name of the column to group the data with\n   */\n\n\n  set groupRowsBy(val) {\n    if (val) {\n      this._groupRowsBy = val;\n\n      if (this._rows && this._groupRowsBy) {\n        // cretes a new array with the data grouped\n        this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\n      }\n    }\n  }\n\n  get groupRowsBy() {\n    return this._groupRowsBy;\n  }\n  /**\n   * Columns to be displayed.\n   */\n\n\n  set columns(val) {\n    if (val) {\n      this._internalColumns = [...val];\n      setColumnDefaults(this._internalColumns);\n      this.recalculateColumns();\n    }\n\n    this._columns = val;\n  }\n  /**\n   * Get the columns.\n   */\n\n\n  get columns() {\n    return this._columns;\n  }\n  /**\n   * The page size to be shown.\n   * Default value: `undefined`\n   */\n\n\n  set limit(val) {\n    this._limit = val; // recalculate sizes/etc\n\n    this.recalculate();\n  }\n  /**\n   * Gets the limit.\n   */\n\n\n  get limit() {\n    return this._limit;\n  }\n  /**\n   * The total count of all rows.\n   * Default value: `0`\n   */\n\n\n  set count(val) {\n    this._count = val; // recalculate sizes/etc\n\n    this.recalculate();\n  }\n  /**\n   * Gets the count.\n   */\n\n\n  get count() {\n    return this._count;\n  }\n  /**\n   * The current offset ( page - 1 ) shown.\n   * Default value: `0`\n   */\n\n\n  set offset(val) {\n    this._offset = val;\n  }\n\n  get offset() {\n    return Math.max(Math.min(this._offset, Math.ceil(this.rowCount / this.pageSize) - 1), 0);\n  }\n  /**\n   * CSS class applied if the header height if fixed height.\n   */\n\n\n  get isFixedHeader() {\n    const headerHeight = this.headerHeight;\n    return typeof headerHeight === 'string' ? headerHeight !== 'auto' : true;\n  }\n  /**\n   * CSS class applied to the root element if\n   * the row heights are fixed heights.\n   */\n\n\n  get isFixedRow() {\n    return this.rowHeight !== 'auto';\n  }\n  /**\n   * CSS class applied to root element if\n   * vertical scrolling is enabled.\n   */\n\n\n  get isVertScroll() {\n    return this.scrollbarV;\n  }\n  /**\n   * CSS class applied to root element if\n   * virtualization is enabled.\n   */\n\n\n  get isVirtualized() {\n    return this.virtualization;\n  }\n  /**\n   * CSS class applied to the root element\n   * if the horziontal scrolling is enabled.\n   */\n\n\n  get isHorScroll() {\n    return this.scrollbarH;\n  }\n  /**\n   * CSS class applied to root element is selectable.\n   */\n\n\n  get isSelectable() {\n    return this.selectionType !== undefined;\n  }\n  /**\n   * CSS class applied to root is checkbox selection.\n   */\n\n\n  get isCheckboxSelection() {\n    return this.selectionType === SelectionType.checkbox;\n  }\n  /**\n   * CSS class applied to root if cell selection.\n   */\n\n\n  get isCellSelection() {\n    return this.selectionType === SelectionType.cell;\n  }\n  /**\n   * CSS class applied to root if single select.\n   */\n\n\n  get isSingleSelection() {\n    return this.selectionType === SelectionType.single;\n  }\n  /**\n   * CSS class added to root element if mulit select\n   */\n\n\n  get isMultiSelection() {\n    return this.selectionType === SelectionType.multi;\n  }\n  /**\n   * CSS class added to root element if mulit click select\n   */\n\n\n  get isMultiClickSelection() {\n    return this.selectionType === SelectionType.multiClick;\n  }\n  /**\n   * Column templates gathered from `ContentChildren`\n   * if described in your markup.\n   */\n\n\n  set columnTemplates(val) {\n    this._columnTemplates = val;\n    this.translateColumns(val);\n  }\n  /**\n   * Returns the column templates.\n   */\n\n\n  get columnTemplates() {\n    return this._columnTemplates;\n  }\n  /**\n   * Returns if all rows are selected.\n   */\n\n\n  get allRowsSelected() {\n    let allRowsSelected = this.rows && this.selected && this.selected.length === this.rows.length;\n\n    if (this.bodyComponent && this.selectAllRowsOnPage) {\n      const indexes = this.bodyComponent.indexes;\n      const rowsOnPage = indexes.last - indexes.first;\n      allRowsSelected = this.selected.length === rowsOnPage;\n    }\n\n    return this.selected && this.rows && this.rows.length !== 0 && allRowsSelected;\n  }\n  /**\n   * Lifecycle hook that is called after data-bound\n   * properties of a directive are initialized.\n   */\n\n\n  ngOnInit() {\n    // need to call this immediatly to size\n    // if the table is hidden the visibility\n    // listener will invoke this itself upon show\n    this.recalculate();\n  }\n  /**\n   * Lifecycle hook that is called after a component's\n   * view has been fully initialized.\n   */\n\n\n  ngAfterViewInit() {\n    if (!this.externalSorting) {\n      this.sortInternalRows();\n    } // this has to be done to prevent the change detection\n    // tree from freaking out because we are readjusting\n\n\n    if (typeof requestAnimationFrame === 'undefined') {\n      return;\n    }\n\n    requestAnimationFrame(() => {\n      this.recalculate(); // emit page for virtual server-side kickoff\n\n      if (this.externalPaging && this.scrollbarV) {\n        this.page.emit({\n          count: this.count,\n          pageSize: this.pageSize,\n          limit: this.limit,\n          offset: 0\n        });\n      }\n    });\n  }\n  /**\n   * Lifecycle hook that is called after a component's\n   * content has been fully initialized.\n   */\n\n\n  ngAfterContentInit() {\n    this.columnTemplates.changes.subscribe(v => this.translateColumns(v));\n    this.listenForColumnInputChanges();\n  }\n  /**\n   * Translates the templates to the column objects\n   */\n\n\n  translateColumns(val) {\n    if (val) {\n      const arr = val.toArray();\n\n      if (arr.length) {\n        this._internalColumns = translateTemplates(arr);\n        setColumnDefaults(this._internalColumns);\n        this.recalculateColumns();\n        this.sortInternalRows();\n        this.cd.markForCheck();\n      }\n    }\n  }\n  /**\n   * Creates a map with the data grouped by the user choice of grouping index\n   *\n   * @param originalArray the original array passed via parameter\n   * @param groupByIndex  the index of the column to group the data by\n   */\n\n\n  groupArrayBy(originalArray, groupBy) {\n    // create a map to hold groups with their corresponding results\n    const map = new Map();\n    let i = 0;\n    originalArray.forEach(item => {\n      const key = item[groupBy];\n\n      if (!map.has(key)) {\n        map.set(key, [item]);\n      } else {\n        map.get(key).push(item);\n      }\n\n      i++;\n    });\n\n    const addGroup = (key, value) => {\n      return {\n        key,\n        value\n      };\n    }; // convert map back to a simple array of objects\n\n\n    return Array.from(map, x => addGroup(x[0], x[1]));\n  }\n  /*\n   * Lifecycle hook that is called when Angular dirty checks a directive.\n   */\n\n\n  ngDoCheck() {\n    if (this.rowDiffer.diff(this.rows)) {\n      if (!this.externalSorting) {\n        this.sortInternalRows();\n      } else {\n        this._internalRows = [...this.rows];\n      } // auto group by parent on new update\n\n\n      this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation));\n      this.recalculatePages();\n      this.cd.markForCheck();\n    }\n  }\n  /**\n   * Recalc's the sizes of the grid.\n   *\n   * Updated automatically on changes to:\n   *\n   *  - Columns\n   *  - Rows\n   *  - Paging related\n   *\n   * Also can be manually invoked or upon window resize.\n   */\n\n\n  recalculate() {\n    this.recalculateDims();\n    this.recalculateColumns();\n    this.cd.markForCheck();\n  }\n  /**\n   * Window resize handler to update sizes.\n   */\n\n\n  onWindowResize() {\n    this.recalculate();\n  }\n  /**\n   * Recalulcates the column widths based on column width\n   * distribution mode and scrollbar offsets.\n   */\n\n\n  recalculateColumns(columns = this._internalColumns, forceIdx = -1, allowBleed = this.scrollbarH) {\n    if (!columns) return undefined;\n    let width = this._innerWidth;\n\n    if (this.scrollbarV) {\n      width = width - this.scrollbarHelper.width;\n    }\n\n    if (this.columnMode === ColumnMode.force) {\n      forceFillColumnWidths(columns, width, forceIdx, allowBleed);\n    } else if (this.columnMode === ColumnMode.flex) {\n      adjustColumnWidths(columns, width);\n    }\n\n    return columns;\n  }\n  /**\n   * Recalculates the dimensions of the table size.\n   * Internally calls the page size and row count calcs too.\n   *\n   */\n\n\n  recalculateDims() {\n    const dims = this.dimensionsHelper.getDimensions(this.element);\n    this._innerWidth = Math.floor(dims.width);\n\n    if (this.scrollbarV) {\n      let height = dims.height;\n      if (this.headerHeight) height = height - this.headerHeight;\n      if (this.footerHeight) height = height - this.footerHeight;\n      this.bodyHeight = height;\n    }\n\n    this.recalculatePages();\n  }\n  /**\n   * Recalculates the pages after a update.\n   */\n\n\n  recalculatePages() {\n    this.pageSize = this.calcPageSize();\n    this.rowCount = this.calcRowCount();\n  }\n  /**\n   * Body triggered a page event.\n   */\n\n\n  onBodyPage({\n    offset\n  }) {\n    // Avoid pagination caming from body events like scroll when the table\n    // has no virtualization and the external paging is enable.\n    // This means, let's the developer handle pagination by my him(her) self\n    if (this.externalPaging && !this.virtualization) {\n      return;\n    }\n\n    this.offset = offset;\n    this.page.emit({\n      count: this.count,\n      pageSize: this.pageSize,\n      limit: this.limit,\n      offset: this.offset\n    });\n  }\n  /**\n   * The body triggered a scroll event.\n   */\n\n\n  onBodyScroll(event) {\n    this._offsetX.next(event.offsetX);\n\n    this.scroll.emit(event);\n    this.cd.detectChanges();\n  }\n  /**\n   * The footer triggered a page event.\n   */\n\n\n  onFooterPage(event) {\n    this.offset = event.page - 1;\n    this.bodyComponent.updateOffsetY(this.offset);\n    this.page.emit({\n      count: this.count,\n      pageSize: this.pageSize,\n      limit: this.limit,\n      offset: this.offset\n    });\n\n    if (this.selectAllRowsOnPage) {\n      this.selected = [];\n      this.select.emit({\n        selected: this.selected\n      });\n    }\n  }\n  /**\n   * Recalculates the sizes of the page\n   */\n\n\n  calcPageSize(val = this.rows) {\n    // Keep the page size constant even if the row has been expanded.\n    // This is because an expanded row is still considered to be a child of\n    // the original row.  Hence calculation would use rowHeight only.\n    if (this.scrollbarV && this.virtualization) {\n      const size = Math.ceil(this.bodyHeight / this.rowHeight);\n      return Math.max(size, 0);\n    } // if limit is passed, we are paging\n\n\n    if (this.limit !== undefined) {\n      return this.limit;\n    } // otherwise use row length\n\n\n    if (val) {\n      return val.length;\n    } // other empty :(\n\n\n    return 0;\n  }\n  /**\n   * Calculates the row count.\n   */\n\n\n  calcRowCount(val = this.rows) {\n    if (!this.externalPaging) {\n      if (!val) return 0;\n\n      if (this.groupedRows) {\n        return this.groupedRows.length;\n      } else if (this.treeFromRelation != null && this.treeToRelation != null) {\n        return this._internalRows.length;\n      } else {\n        return val.length;\n      }\n    }\n\n    return this.count;\n  }\n  /**\n   * The header triggered a contextmenu event.\n   */\n\n\n  onColumnContextmenu({\n    event,\n    column\n  }) {\n    this.tableContextmenu.emit({\n      event,\n      type: ContextmenuType.header,\n      content: column\n    });\n  }\n  /**\n   * The body triggered a contextmenu event.\n   */\n\n\n  onRowContextmenu({\n    event,\n    row\n  }) {\n    this.tableContextmenu.emit({\n      event,\n      type: ContextmenuType.body,\n      content: row\n    });\n  }\n  /**\n   * The header triggered a column resize event.\n   */\n\n\n  onColumnResize({\n    column,\n    newValue\n  }) {\n    /* Safari/iOS 10.2 workaround */\n    if (column === undefined) {\n      return;\n    }\n\n    let idx;\n\n    const cols = this._internalColumns.map((c, i) => {\n      c = Object.assign({}, c);\n\n      if (c.$$id === column.$$id) {\n        idx = i;\n        c.width = newValue; // set this so we can force the column\n        // width distribution to be to this value\n\n        c.$$oldWidth = newValue;\n      }\n\n      return c;\n    });\n\n    this.recalculateColumns(cols, idx);\n    this._internalColumns = cols;\n    this.resize.emit({\n      column,\n      newValue\n    });\n  }\n  /**\n   * The header triggered a column re-order event.\n   */\n\n\n  onColumnReorder({\n    column,\n    newValue,\n    prevValue\n  }) {\n    const cols = this._internalColumns.map(c => {\n      return Object.assign({}, c);\n    });\n\n    if (this.swapColumns) {\n      const prevCol = cols[newValue];\n      cols[newValue] = column;\n      cols[prevValue] = prevCol;\n    } else {\n      if (newValue > prevValue) {\n        const movedCol = cols[prevValue];\n\n        for (let i = prevValue; i < newValue; i++) {\n          cols[i] = cols[i + 1];\n        }\n\n        cols[newValue] = movedCol;\n      } else {\n        const movedCol = cols[prevValue];\n\n        for (let i = prevValue; i > newValue; i--) {\n          cols[i] = cols[i - 1];\n        }\n\n        cols[newValue] = movedCol;\n      }\n    }\n\n    this._internalColumns = cols;\n    this.reorder.emit({\n      column,\n      newValue,\n      prevValue\n    });\n  }\n  /**\n   * The header triggered a column sort event.\n   */\n\n\n  onColumnSort(event) {\n    // clean selected rows\n    if (this.selectAllRowsOnPage) {\n      this.selected = [];\n      this.select.emit({\n        selected: this.selected\n      });\n    }\n\n    this.sorts = event.sorts; // this could be optimized better since it will resort\n    // the rows again on the 'push' detection...\n\n    if (this.externalSorting === false) {\n      // don't use normal setter so we don't resort\n      this.sortInternalRows();\n    } // auto group by parent on new update\n\n\n    this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation)); // Always go to first page when sorting to see the newly sorted data\n\n    this.offset = 0;\n    this.bodyComponent.updateOffsetY(this.offset);\n    this.sort.emit(event);\n  }\n  /**\n   * Toggle all row selection\n   */\n\n\n  onHeaderSelect(event) {\n    if (this.bodyComponent && this.selectAllRowsOnPage) {\n      // before we splice, chk if we currently have all selected\n      const first = this.bodyComponent.indexes.first;\n      const last = this.bodyComponent.indexes.last;\n      const allSelected = this.selected.length === last - first; // remove all existing either way\n\n      this.selected = []; // do the opposite here\n\n      if (!allSelected) {\n        this.selected.push(...this._internalRows.slice(first, last));\n      }\n    } else {\n      // before we splice, chk if we currently have all selected\n      const allSelected = this.selected.length === this.rows.length; // remove all existing either way\n\n      this.selected = []; // do the opposite here\n\n      if (!allSelected) {\n        this.selected.push(...this.rows);\n      }\n    }\n\n    this.select.emit({\n      selected: this.selected\n    });\n  }\n  /**\n   * A row was selected from body\n   */\n\n\n  onBodySelect(event) {\n    this.select.emit(event);\n  }\n  /**\n   * A row was expanded or collapsed for tree\n   */\n\n\n  onTreeAction(event) {\n    const row = event.row; // TODO: For duplicated items this will not work\n\n    const rowIndex = this._rows.findIndex(r => r[this.treeToRelation] === event.row[this.treeToRelation]);\n\n    this.treeAction.emit({\n      row,\n      rowIndex\n    });\n  }\n\n  ngOnDestroy() {\n    this._subscriptions.forEach(subscription => subscription.unsubscribe());\n  }\n  /**\n   * listen for changes to input bindings of all DataTableColumnDirective and\n   * trigger the columnTemplates.changes observable to emit\n   */\n\n\n  listenForColumnInputChanges() {\n    this._subscriptions.push(this.columnChangesService.columnInputChanges$.subscribe(() => {\n      if (this.columnTemplates) {\n        this.columnTemplates.notifyOnChanges();\n      }\n    }));\n  }\n\n  sortInternalRows() {\n    this._internalRows = sortRows(this._internalRows, this._internalColumns, this.sorts);\n  }\n\n}\n\nDatatableComponent.ɵfac = function DatatableComponent_Factory(t) {\n  return new (t || DatatableComponent)(i0.ɵɵdirectiveInject(ScrollbarHelper, 4), i0.ɵɵdirectiveInject(DimensionsHelper, 4), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.KeyValueDiffers), i0.ɵɵdirectiveInject(ColumnChangesService), i0.ɵɵdirectiveInject('configuration', 8));\n};\n\nDatatableComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DatatableComponent,\n  selectors: [[\"ngx-datatable\"]],\n  contentQueries: function DatatableComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, DatatableRowDetailDirective, 5);\n      i0.ɵɵcontentQuery(dirIndex, DatatableGroupHeaderDirective, 5);\n      i0.ɵɵcontentQuery(dirIndex, DatatableFooterDirective, 5);\n      i0.ɵɵcontentQuery(dirIndex, DataTableColumnDirective, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.rowDetail = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.groupHeader = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.footer = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columnTemplates = _t);\n    }\n  },\n  viewQuery: function DatatableComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(DataTableBodyComponent, 5);\n      i0.ɵɵviewQuery(DataTableHeaderComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.bodyComponent = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.headerComponent = _t.first);\n    }\n  },\n  hostAttrs: [1, \"ngx-datatable\"],\n  hostVars: 22,\n  hostBindings: function DatatableComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"resize\", function DatatableComponent_resize_HostBindingHandler() {\n        return ctx.onWindowResize();\n      }, false, i0.ɵɵresolveWindow);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"fixed-header\", ctx.isFixedHeader)(\"fixed-row\", ctx.isFixedRow)(\"scroll-vertical\", ctx.isVertScroll)(\"virtualized\", ctx.isVirtualized)(\"scroll-horz\", ctx.isHorScroll)(\"selectable\", ctx.isSelectable)(\"checkbox-selection\", ctx.isCheckboxSelection)(\"cell-selection\", ctx.isCellSelection)(\"single-selection\", ctx.isSingleSelection)(\"multi-selection\", ctx.isMultiSelection)(\"multi-click-selection\", ctx.isMultiClickSelection);\n    }\n  },\n  inputs: {\n    targetMarkerTemplate: \"targetMarkerTemplate\",\n    rows: \"rows\",\n    groupRowsBy: \"groupRowsBy\",\n    groupedRows: \"groupedRows\",\n    columns: \"columns\",\n    selected: \"selected\",\n    scrollbarV: \"scrollbarV\",\n    scrollbarH: \"scrollbarH\",\n    rowHeight: \"rowHeight\",\n    columnMode: \"columnMode\",\n    headerHeight: \"headerHeight\",\n    footerHeight: \"footerHeight\",\n    externalPaging: \"externalPaging\",\n    externalSorting: \"externalSorting\",\n    limit: \"limit\",\n    count: \"count\",\n    offset: \"offset\",\n    loadingIndicator: \"loadingIndicator\",\n    selectionType: \"selectionType\",\n    reorderable: \"reorderable\",\n    swapColumns: \"swapColumns\",\n    sortType: \"sortType\",\n    sorts: \"sorts\",\n    cssClasses: \"cssClasses\",\n    messages: \"messages\",\n    rowClass: \"rowClass\",\n    selectCheck: \"selectCheck\",\n    displayCheck: \"displayCheck\",\n    groupExpansionDefault: \"groupExpansionDefault\",\n    trackByProp: \"trackByProp\",\n    selectAllRowsOnPage: \"selectAllRowsOnPage\",\n    virtualization: \"virtualization\",\n    treeFromRelation: \"treeFromRelation\",\n    treeToRelation: \"treeToRelation\",\n    summaryRow: \"summaryRow\",\n    summaryHeight: \"summaryHeight\",\n    summaryPosition: \"summaryPosition\",\n    rowIdentity: \"rowIdentity\"\n  },\n  outputs: {\n    scroll: \"scroll\",\n    activate: \"activate\",\n    select: \"select\",\n    sort: \"sort\",\n    page: \"page\",\n    reorder: \"reorder\",\n    resize: \"resize\",\n    tableContextmenu: \"tableContextmenu\",\n    treeAction: \"treeAction\"\n  },\n  decls: 5,\n  vars: 34,\n  consts: [[\"role\", \"table\", \"visibilityObserver\", \"\", 3, \"visible\"], [\"role\", \"rowgroup\", 3, \"sorts\", \"sortType\", \"scrollbarH\", \"innerWidth\", \"offsetX\", \"dealsWithGroup\", \"columns\", \"headerHeight\", \"reorderable\", \"targetMarkerTemplate\", \"sortAscendingIcon\", \"sortDescendingIcon\", \"sortUnsetIcon\", \"allRowsSelected\", \"selectionType\", \"sort\", \"resize\", \"reorder\", \"select\", \"columnContextmenu\", 4, \"ngIf\"], [\"role\", \"rowgroup\", 3, \"groupRowsBy\", \"groupedRows\", \"rows\", \"groupExpansionDefault\", \"scrollbarV\", \"scrollbarH\", \"virtualization\", \"loadingIndicator\", \"externalPaging\", \"rowHeight\", \"rowCount\", \"offset\", \"trackByProp\", \"columns\", \"pageSize\", \"offsetX\", \"rowDetail\", \"groupHeader\", \"selected\", \"innerWidth\", \"bodyHeight\", \"selectionType\", \"emptyMessage\", \"rowIdentity\", \"rowClass\", \"selectCheck\", \"displayCheck\", \"summaryRow\", \"summaryHeight\", \"summaryPosition\", \"page\", \"activate\", \"rowContextmenu\", \"select\", \"scroll\", \"treeAction\"], [3, \"rowCount\", \"pageSize\", \"offset\", \"footerHeight\", \"footerTemplate\", \"totalMessage\", \"pagerLeftArrowIcon\", \"pagerRightArrowIcon\", \"pagerPreviousIcon\", \"selectedCount\", \"selectedMessage\", \"pagerNextIcon\", \"page\", 4, \"ngIf\"], [\"role\", \"rowgroup\", 3, \"sorts\", \"sortType\", \"scrollbarH\", \"innerWidth\", \"offsetX\", \"dealsWithGroup\", \"columns\", \"headerHeight\", \"reorderable\", \"targetMarkerTemplate\", \"sortAscendingIcon\", \"sortDescendingIcon\", \"sortUnsetIcon\", \"allRowsSelected\", \"selectionType\", \"sort\", \"resize\", \"reorder\", \"select\", \"columnContextmenu\"], [3, \"rowCount\", \"pageSize\", \"offset\", \"footerHeight\", \"footerTemplate\", \"totalMessage\", \"pagerLeftArrowIcon\", \"pagerRightArrowIcon\", \"pagerPreviousIcon\", \"selectedCount\", \"selectedMessage\", \"pagerNextIcon\", \"page\"]],\n  template: function DatatableComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵlistener(\"visible\", function DatatableComponent_Template_div_visible_0_listener() {\n        return ctx.recalculate();\n      });\n      i0.ɵɵtemplate(1, DatatableComponent_datatable_header_1_Template, 2, 17, \"datatable-header\", 1);\n      i0.ɵɵelementStart(2, \"datatable-body\", 2);\n      i0.ɵɵlistener(\"page\", function DatatableComponent_Template_datatable_body_page_2_listener($event) {\n        return ctx.onBodyPage($event);\n      })(\"activate\", function DatatableComponent_Template_datatable_body_activate_2_listener($event) {\n        return ctx.activate.emit($event);\n      })(\"rowContextmenu\", function DatatableComponent_Template_datatable_body_rowContextmenu_2_listener($event) {\n        return ctx.onRowContextmenu($event);\n      })(\"select\", function DatatableComponent_Template_datatable_body_select_2_listener($event) {\n        return ctx.onBodySelect($event);\n      })(\"scroll\", function DatatableComponent_Template_datatable_body_scroll_2_listener($event) {\n        return ctx.onBodyScroll($event);\n      })(\"treeAction\", function DatatableComponent_Template_datatable_body_treeAction_2_listener($event) {\n        return ctx.onTreeAction($event);\n      });\n      i0.ɵɵpipe(3, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, DatatableComponent_datatable_footer_4_Template, 1, 12, \"datatable-footer\", 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.headerHeight);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"groupRowsBy\", ctx.groupRowsBy)(\"groupedRows\", ctx.groupedRows)(\"rows\", ctx._internalRows)(\"groupExpansionDefault\", ctx.groupExpansionDefault)(\"scrollbarV\", ctx.scrollbarV)(\"scrollbarH\", ctx.scrollbarH)(\"virtualization\", ctx.virtualization)(\"loadingIndicator\", ctx.loadingIndicator)(\"externalPaging\", ctx.externalPaging)(\"rowHeight\", ctx.rowHeight)(\"rowCount\", ctx.rowCount)(\"offset\", ctx.offset)(\"trackByProp\", ctx.trackByProp)(\"columns\", ctx._internalColumns)(\"pageSize\", ctx.pageSize)(\"offsetX\", i0.ɵɵpipeBind1(3, 32, ctx._offsetX))(\"rowDetail\", ctx.rowDetail)(\"groupHeader\", ctx.groupHeader)(\"selected\", ctx.selected)(\"innerWidth\", ctx._innerWidth)(\"bodyHeight\", ctx.bodyHeight)(\"selectionType\", ctx.selectionType)(\"emptyMessage\", ctx.messages.emptyMessage)(\"rowIdentity\", ctx.rowIdentity)(\"rowClass\", ctx.rowClass)(\"selectCheck\", ctx.selectCheck)(\"displayCheck\", ctx.displayCheck)(\"summaryRow\", ctx.summaryRow)(\"summaryHeight\", ctx.summaryHeight)(\"summaryPosition\", ctx.summaryPosition);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.footerHeight);\n    }\n  },\n  directives: [DataTableHeaderComponent, DataTableBodyComponent, DataTableFooterComponent, VisibilityDirective, i1.NgIf],\n  pipes: [i1.AsyncPipe],\n  styles: [\".ngx-datatable{display:block;overflow:hidden;justify-content:center;position:relative;transform:translate(0)}.ngx-datatable [hidden]{display:none!important}.ngx-datatable *,.ngx-datatable *:before,.ngx-datatable *:after{box-sizing:border-box}.ngx-datatable.scroll-vertical .datatable-body{overflow-y:auto}.ngx-datatable.scroll-vertical.virtualized .datatable-body .datatable-row-wrapper{position:absolute}.ngx-datatable.scroll-horz .datatable-body{overflow-x:auto;-webkit-overflow-scrolling:touch}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner{white-space:nowrap}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner .datatable-header-cell{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ngx-datatable.fixed-row .datatable-scroll,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row{white-space:nowrap}.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-cell,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-group-cell{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.ngx-datatable .datatable-body-row,.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-header-inner{display:flex;flex-direction:row;-o-flex-flow:row;flex-flow:row}.ngx-datatable .datatable-body-cell,.ngx-datatable .datatable-header-cell{overflow-x:hidden;vertical-align:top;display:inline-block;line-height:1.625}.ngx-datatable .datatable-body-cell:focus,.ngx-datatable .datatable-header-cell:focus{outline:none}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{z-index:9}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-row-group,.ngx-datatable .datatable-row-right{position:relative}.ngx-datatable .datatable-header{display:block;overflow:hidden}.ngx-datatable .datatable-header .datatable-header-inner{align-items:stretch;-webkit-align-items:stretch}.ngx-datatable .datatable-header .datatable-header-cell{position:relative;display:inline-block}.ngx-datatable .datatable-header .datatable-header-cell.sortable .datatable-header-cell-wrapper{cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell.longpress .datatable-header-cell-wrapper{cursor:move}.ngx-datatable .datatable-header .datatable-header-cell .sort-btn{line-height:100%;vertical-align:middle;display:inline-block;cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell .resize-handle--not-resizable{display:inline-block;position:absolute;right:0;top:0;bottom:0;width:5px;padding:0 4px;visibility:hidden}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle{cursor:ew-resize}.ngx-datatable .datatable-header .datatable-header-cell.resizeable:hover .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell:hover .resize-handle--not-resizable{visibility:visible}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker{position:absolute;top:0;bottom:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromLeft{right:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromRight{left:0}.ngx-datatable .datatable-header .datatable-header-cell .datatable-header-cell-template-wrap{height:inherit}.ngx-datatable .datatable-body{position:relative;z-index:10;display:block}.ngx-datatable .datatable-body .datatable-scroll{display:inline-block}.ngx-datatable .datatable-body .datatable-row-detail{overflow-y:hidden}.ngx-datatable .datatable-body .datatable-row-wrapper{display:flex;flex-direction:column}.ngx-datatable .datatable-body .datatable-body-row{outline:none}.ngx-datatable .datatable-body .datatable-body-row>div{display:flex}.ngx-datatable .datatable-footer{display:block;width:100%;overflow:auto}.ngx-datatable .datatable-footer .datatable-footer-inner{display:flex;align-items:center;width:100%}.ngx-datatable .datatable-footer .selected-count .page-count{flex:1 1 40%}.ngx-datatable .datatable-footer .selected-count .datatable-pager{flex:1 1 60%}.ngx-datatable .datatable-footer .page-count{flex:1 1 20%}.ngx-datatable .datatable-footer .datatable-pager{flex:1 1 80%;text-align:right}.ngx-datatable .datatable-footer .datatable-pager .pager,.ngx-datatable .datatable-footer .datatable-pager .pager li{padding:0;margin:0;display:inline-block;list-style:none}.ngx-datatable .datatable-footer .datatable-pager .pager li,.ngx-datatable .datatable-footer .datatable-pager .pager li a{outline:none}.ngx-datatable .datatable-footer .datatable-pager .pager li a{cursor:pointer;display:inline-block}.ngx-datatable .datatable-footer .datatable-pager .pager li.disabled a{cursor:not-allowed}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n__decorate([throttleable(5)], DatatableComponent.prototype, \"onWindowResize\", null);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DatatableComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-datatable',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      host: {\n        class: 'ngx-datatable'\n      },\n      template: \"<div role=\\\"table\\\" visibilityObserver (visible)=\\\"recalculate()\\\">\\n  <datatable-header\\n    role=\\\"rowgroup\\\"\\n    *ngIf=\\\"headerHeight\\\"\\n    [sorts]=\\\"sorts\\\"\\n    [sortType]=\\\"sortType\\\"\\n    [scrollbarH]=\\\"scrollbarH\\\"\\n    [innerWidth]=\\\"_innerWidth\\\"\\n    [offsetX]=\\\"_offsetX | async\\\"\\n    [dealsWithGroup]=\\\"groupedRows !== undefined\\\"\\n    [columns]=\\\"_internalColumns\\\"\\n    [headerHeight]=\\\"headerHeight\\\"\\n    [reorderable]=\\\"reorderable\\\"\\n    [targetMarkerTemplate]=\\\"targetMarkerTemplate\\\"\\n    [sortAscendingIcon]=\\\"cssClasses.sortAscending\\\"\\n    [sortDescendingIcon]=\\\"cssClasses.sortDescending\\\"\\n    [sortUnsetIcon]=\\\"cssClasses.sortUnset\\\"\\n    [allRowsSelected]=\\\"allRowsSelected\\\"\\n    [selectionType]=\\\"selectionType\\\"\\n    (sort)=\\\"onColumnSort($event)\\\"\\n    (resize)=\\\"onColumnResize($event)\\\"\\n    (reorder)=\\\"onColumnReorder($event)\\\"\\n    (select)=\\\"onHeaderSelect($event)\\\"\\n    (columnContextmenu)=\\\"onColumnContextmenu($event)\\\"\\n  >\\n  </datatable-header>\\n  <datatable-body\\n    role=\\\"rowgroup\\\"\\n    [groupRowsBy]=\\\"groupRowsBy\\\"\\n    [groupedRows]=\\\"groupedRows\\\"\\n    [rows]=\\\"_internalRows\\\"\\n    [groupExpansionDefault]=\\\"groupExpansionDefault\\\"\\n    [scrollbarV]=\\\"scrollbarV\\\"\\n    [scrollbarH]=\\\"scrollbarH\\\"\\n    [virtualization]=\\\"virtualization\\\"\\n    [loadingIndicator]=\\\"loadingIndicator\\\"\\n    [externalPaging]=\\\"externalPaging\\\"\\n    [rowHeight]=\\\"rowHeight\\\"\\n    [rowCount]=\\\"rowCount\\\"\\n    [offset]=\\\"offset\\\"\\n    [trackByProp]=\\\"trackByProp\\\"\\n    [columns]=\\\"_internalColumns\\\"\\n    [pageSize]=\\\"pageSize\\\"\\n    [offsetX]=\\\"_offsetX | async\\\"\\n    [rowDetail]=\\\"rowDetail\\\"\\n    [groupHeader]=\\\"groupHeader\\\"\\n    [selected]=\\\"selected\\\"\\n    [innerWidth]=\\\"_innerWidth\\\"\\n    [bodyHeight]=\\\"bodyHeight\\\"\\n    [selectionType]=\\\"selectionType\\\"\\n    [emptyMessage]=\\\"messages.emptyMessage\\\"\\n    [rowIdentity]=\\\"rowIdentity\\\"\\n    [rowClass]=\\\"rowClass\\\"\\n    [selectCheck]=\\\"selectCheck\\\"\\n    [displayCheck]=\\\"displayCheck\\\"\\n    [summaryRow]=\\\"summaryRow\\\"\\n    [summaryHeight]=\\\"summaryHeight\\\"\\n    [summaryPosition]=\\\"summaryPosition\\\"\\n    (page)=\\\"onBodyPage($event)\\\"\\n    (activate)=\\\"activate.emit($event)\\\"\\n    (rowContextmenu)=\\\"onRowContextmenu($event)\\\"\\n    (select)=\\\"onBodySelect($event)\\\"\\n    (scroll)=\\\"onBodyScroll($event)\\\"\\n    (treeAction)=\\\"onTreeAction($event)\\\"\\n  >\\n  </datatable-body>\\n  <datatable-footer\\n    *ngIf=\\\"footerHeight\\\"\\n    [rowCount]=\\\"rowCount\\\"\\n    [pageSize]=\\\"pageSize\\\"\\n    [offset]=\\\"offset\\\"\\n    [footerHeight]=\\\"footerHeight\\\"\\n    [footerTemplate]=\\\"footer\\\"\\n    [totalMessage]=\\\"messages.totalMessage\\\"\\n    [pagerLeftArrowIcon]=\\\"cssClasses.pagerLeftArrow\\\"\\n    [pagerRightArrowIcon]=\\\"cssClasses.pagerRightArrow\\\"\\n    [pagerPreviousIcon]=\\\"cssClasses.pagerPrevious\\\"\\n    [selectedCount]=\\\"selected.length\\\"\\n    [selectedMessage]=\\\"!!selectionType && messages.selectedMessage\\\"\\n    [pagerNextIcon]=\\\"cssClasses.pagerNext\\\"\\n    (page)=\\\"onFooterPage($event)\\\"\\n  >\\n  </datatable-footer>\\n</div>\\n\",\n      styles: [\".ngx-datatable{display:block;overflow:hidden;justify-content:center;position:relative;transform:translate(0)}.ngx-datatable [hidden]{display:none!important}.ngx-datatable *,.ngx-datatable *:before,.ngx-datatable *:after{box-sizing:border-box}.ngx-datatable.scroll-vertical .datatable-body{overflow-y:auto}.ngx-datatable.scroll-vertical.virtualized .datatable-body .datatable-row-wrapper{position:absolute}.ngx-datatable.scroll-horz .datatable-body{overflow-x:auto;-webkit-overflow-scrolling:touch}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner{white-space:nowrap}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner .datatable-header-cell{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ngx-datatable.fixed-row .datatable-scroll,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row{white-space:nowrap}.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-cell,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-group-cell{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.ngx-datatable .datatable-body-row,.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-header-inner{display:flex;flex-direction:row;-o-flex-flow:row;flex-flow:row}.ngx-datatable .datatable-body-cell,.ngx-datatable .datatable-header-cell{overflow-x:hidden;vertical-align:top;display:inline-block;line-height:1.625}.ngx-datatable .datatable-body-cell:focus,.ngx-datatable .datatable-header-cell:focus{outline:none}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{z-index:9}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-row-group,.ngx-datatable .datatable-row-right{position:relative}.ngx-datatable .datatable-header{display:block;overflow:hidden}.ngx-datatable .datatable-header .datatable-header-inner{align-items:stretch;-webkit-align-items:stretch}.ngx-datatable .datatable-header .datatable-header-cell{position:relative;display:inline-block}.ngx-datatable .datatable-header .datatable-header-cell.sortable .datatable-header-cell-wrapper{cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell.longpress .datatable-header-cell-wrapper{cursor:move}.ngx-datatable .datatable-header .datatable-header-cell .sort-btn{line-height:100%;vertical-align:middle;display:inline-block;cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell .resize-handle--not-resizable{display:inline-block;position:absolute;right:0;top:0;bottom:0;width:5px;padding:0 4px;visibility:hidden}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle{cursor:ew-resize}.ngx-datatable .datatable-header .datatable-header-cell.resizeable:hover .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell:hover .resize-handle--not-resizable{visibility:visible}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker{position:absolute;top:0;bottom:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromLeft{right:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromRight{left:0}.ngx-datatable .datatable-header .datatable-header-cell .datatable-header-cell-template-wrap{height:inherit}.ngx-datatable .datatable-body{position:relative;z-index:10;display:block}.ngx-datatable .datatable-body .datatable-scroll{display:inline-block}.ngx-datatable .datatable-body .datatable-row-detail{overflow-y:hidden}.ngx-datatable .datatable-body .datatable-row-wrapper{display:flex;flex-direction:column}.ngx-datatable .datatable-body .datatable-body-row{outline:none}.ngx-datatable .datatable-body .datatable-body-row>div{display:flex}.ngx-datatable .datatable-footer{display:block;width:100%;overflow:auto}.ngx-datatable .datatable-footer .datatable-footer-inner{display:flex;align-items:center;width:100%}.ngx-datatable .datatable-footer .selected-count .page-count{flex:1 1 40%}.ngx-datatable .datatable-footer .selected-count .datatable-pager{flex:1 1 60%}.ngx-datatable .datatable-footer .page-count{flex:1 1 20%}.ngx-datatable .datatable-footer .datatable-pager{flex:1 1 80%;text-align:right}.ngx-datatable .datatable-footer .datatable-pager .pager,.ngx-datatable .datatable-footer .datatable-pager .pager li{padding:0;margin:0;display:inline-block;list-style:none}.ngx-datatable .datatable-footer .datatable-pager .pager li,.ngx-datatable .datatable-footer .datatable-pager .pager li a{outline:none}.ngx-datatable .datatable-footer .datatable-pager .pager li a{cursor:pointer;display:inline-block}.ngx-datatable .datatable-footer .datatable-pager .pager li.disabled a{cursor:not-allowed}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: ScrollbarHelper,\n      decorators: [{\n        type: SkipSelf\n      }]\n    }, {\n      type: DimensionsHelper,\n      decorators: [{\n        type: SkipSelf\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.KeyValueDiffers\n    }, {\n      type: ColumnChangesService\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: ['configuration']\n      }]\n    }];\n  }, {\n    targetMarkerTemplate: [{\n      type: Input\n    }],\n    rows: [{\n      type: Input\n    }],\n    groupRowsBy: [{\n      type: Input\n    }],\n    groupedRows: [{\n      type: Input\n    }],\n    columns: [{\n      type: Input\n    }],\n    selected: [{\n      type: Input\n    }],\n    scrollbarV: [{\n      type: Input\n    }],\n    scrollbarH: [{\n      type: Input\n    }],\n    rowHeight: [{\n      type: Input\n    }],\n    columnMode: [{\n      type: Input\n    }],\n    headerHeight: [{\n      type: Input\n    }],\n    footerHeight: [{\n      type: Input\n    }],\n    externalPaging: [{\n      type: Input\n    }],\n    externalSorting: [{\n      type: Input\n    }],\n    limit: [{\n      type: Input\n    }],\n    count: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    loadingIndicator: [{\n      type: Input\n    }],\n    selectionType: [{\n      type: Input\n    }],\n    reorderable: [{\n      type: Input\n    }],\n    swapColumns: [{\n      type: Input\n    }],\n    sortType: [{\n      type: Input\n    }],\n    sorts: [{\n      type: Input\n    }],\n    cssClasses: [{\n      type: Input\n    }],\n    messages: [{\n      type: Input\n    }],\n    rowClass: [{\n      type: Input\n    }],\n    selectCheck: [{\n      type: Input\n    }],\n    displayCheck: [{\n      type: Input\n    }],\n    groupExpansionDefault: [{\n      type: Input\n    }],\n    trackByProp: [{\n      type: Input\n    }],\n    selectAllRowsOnPage: [{\n      type: Input\n    }],\n    virtualization: [{\n      type: Input\n    }],\n    treeFromRelation: [{\n      type: Input\n    }],\n    treeToRelation: [{\n      type: Input\n    }],\n    summaryRow: [{\n      type: Input\n    }],\n    summaryHeight: [{\n      type: Input\n    }],\n    summaryPosition: [{\n      type: Input\n    }],\n    scroll: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    select: [{\n      type: Output\n    }],\n    sort: [{\n      type: Output\n    }],\n    page: [{\n      type: Output\n    }],\n    reorder: [{\n      type: Output\n    }],\n    resize: [{\n      type: Output\n    }],\n    tableContextmenu: [{\n      type: Output\n    }],\n    treeAction: [{\n      type: Output\n    }],\n    isFixedHeader: [{\n      type: HostBinding,\n      args: ['class.fixed-header']\n    }],\n    isFixedRow: [{\n      type: HostBinding,\n      args: ['class.fixed-row']\n    }],\n    isVertScroll: [{\n      type: HostBinding,\n      args: ['class.scroll-vertical']\n    }],\n    isVirtualized: [{\n      type: HostBinding,\n      args: ['class.virtualized']\n    }],\n    isHorScroll: [{\n      type: HostBinding,\n      args: ['class.scroll-horz']\n    }],\n    isSelectable: [{\n      type: HostBinding,\n      args: ['class.selectable']\n    }],\n    isCheckboxSelection: [{\n      type: HostBinding,\n      args: ['class.checkbox-selection']\n    }],\n    isCellSelection: [{\n      type: HostBinding,\n      args: ['class.cell-selection']\n    }],\n    isSingleSelection: [{\n      type: HostBinding,\n      args: ['class.single-selection']\n    }],\n    isMultiSelection: [{\n      type: HostBinding,\n      args: ['class.multi-selection']\n    }],\n    isMultiClickSelection: [{\n      type: HostBinding,\n      args: ['class.multi-click-selection']\n    }],\n    columnTemplates: [{\n      type: ContentChildren,\n      args: [DataTableColumnDirective]\n    }],\n    rowDetail: [{\n      type: ContentChild,\n      args: [DatatableRowDetailDirective]\n    }],\n    groupHeader: [{\n      type: ContentChild,\n      args: [DatatableGroupHeaderDirective]\n    }],\n    footer: [{\n      type: ContentChild,\n      args: [DatatableFooterDirective]\n    }],\n    bodyComponent: [{\n      type: ViewChild,\n      args: [DataTableBodyComponent]\n    }],\n    headerComponent: [{\n      type: ViewChild,\n      args: [DataTableHeaderComponent]\n    }],\n    rowIdentity: [{\n      type: Input\n    }],\n    onWindowResize: [{\n      type: HostListener,\n      args: ['window:resize']\n    }]\n  });\n})();\n\nclass NgxDatatableModule {\n  /**\n   * Configure global configuration via INgxDatatableConfig\n   * @param configuration\n   */\n  static forRoot(configuration) {\n    return {\n      ngModule: NgxDatatableModule,\n      providers: [{\n        provide: 'configuration',\n        useValue: configuration\n      }]\n    };\n  }\n\n}\n\nNgxDatatableModule.ɵfac = function NgxDatatableModule_Factory(t) {\n  return new (t || NgxDatatableModule)();\n};\n\nNgxDatatableModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxDatatableModule\n});\nNgxDatatableModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ScrollbarHelper, DimensionsHelper, ColumnChangesService],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxDatatableModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      providers: [ScrollbarHelper, DimensionsHelper, ColumnChangesService],\n      declarations: [DataTableFooterTemplateDirective, VisibilityDirective, DraggableDirective, ResizeableDirective, OrderableDirective, LongPressDirective, ScrollerComponent, DatatableComponent, DataTableColumnDirective, DataTableHeaderComponent, DataTableHeaderCellComponent, DataTableBodyComponent, DataTableFooterComponent, DataTablePagerComponent, ProgressBarComponent, DataTableBodyRowComponent, DataTableRowWrapperComponent, DatatableRowDetailDirective, DatatableGroupHeaderDirective, DatatableRowDetailTemplateDirective, DataTableBodyCellComponent, DataTableSelectionComponent, DataTableColumnHeaderDirective, DataTableColumnCellDirective, DataTableColumnCellTreeToggle, DatatableFooterDirective, DatatableGroupHeaderTemplateDirective, DataTableSummaryRowComponent],\n      exports: [DatatableComponent, DatatableRowDetailDirective, DatatableGroupHeaderDirective, DatatableRowDetailTemplateDirective, DataTableColumnDirective, DataTableColumnHeaderDirective, DataTableColumnCellDirective, DataTableColumnCellTreeToggle, DataTableFooterTemplateDirective, DatatableFooterDirective, DataTablePagerComponent, DatatableGroupHeaderTemplateDirective]\n    }]\n  }], null, null);\n})();\n\nvar ClickType;\n\n(function (ClickType) {\n  ClickType[\"single\"] = \"single\";\n  ClickType[\"double\"] = \"double\";\n})(ClickType || (ClickType = {}));\n\nif (typeof document !== 'undefined' && !document.elementsFromPoint) {\n  document.elementsFromPoint = elementsFromPoint;\n}\n/*tslint:disable*/\n\n/**\n * Polyfill for `elementsFromPoint`\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint\n * https://gist.github.com/iddan/54d5d9e58311b0495a91bf06de661380\n * https://gist.github.com/oslego/7265412\n */\n\n\nfunction elementsFromPoint(x, y) {\n  const elements = [];\n  const previousPointerEvents = [];\n  let current; // TODO: window.getComputedStyle should be used with inferred type (Element)\n\n  let i;\n  let d; //if (document === undefined) return elements;\n  // get all elements via elementFromPoint, and remove them from hit-testing in order\n\n  while ((current = document.elementFromPoint(x, y)) && elements.indexOf(current) === -1 && current != null) {\n    // push the element and its current style\n    elements.push(current);\n    previousPointerEvents.push({\n      value: current.style.getPropertyValue('pointer-events'),\n      priority: current.style.getPropertyPriority('pointer-events')\n    }); // add \"pointer-events: none\", to get to the underlying element\n\n    current.style.setProperty('pointer-events', 'none', 'important');\n  } // restore the previous pointer-events values\n\n\n  for (i = previousPointerEvents.length; d = previousPointerEvents[--i];) {\n    elements[i].style.setProperty('pointer-events', d.value ? d.value : '', d.priority);\n  } // return our results\n\n\n  return elements;\n}\n/*tslint:enable*/\n\n/*\n * Public API Surface of ngx-datatable\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ClickType, ColumnChangesService, ColumnMode, ContextmenuType, DataTableBodyCellComponent, DataTableBodyComponent, DataTableBodyRowComponent, DataTableColumnCellDirective, DataTableColumnCellTreeToggle, DataTableColumnDirective, DataTableColumnHeaderDirective, DataTableFooterComponent, DataTableFooterTemplateDirective, DataTableHeaderCellComponent, DataTableHeaderComponent, DataTablePagerComponent, DataTableRowWrapperComponent, DataTableSelectionComponent, DataTableSummaryRowComponent, DatatableComponent, DatatableFooterDirective, DatatableGroupHeaderDirective, DatatableGroupHeaderTemplateDirective, DatatableRowDetailDirective, DatatableRowDetailTemplateDirective, DimensionsHelper, DraggableDirective, Keys, LongPressDirective, NgxDatatableModule, OrderableDirective, ProgressBarComponent, ResizeableDirective, RowHeightCache, ScrollbarHelper, ScrollerComponent, SelectionType, SortDirection, SortType, VisibilityDirective, adjustColumnWidths, camelCase, columnGroupWidths, columnTotalWidth, columnsByPin, columnsByPinArr, columnsTotalWidth, deCamelCase, deepValueGetter, elementsFromPoint, emptyStringGetter, forceFillColumnWidths, getTotalFlexGrow, getVendorPrefixedName, getterForProp, groupRowsByParents, id, isNullOrUndefined, nextSortDir, numericIndexGetter, optionalGetterForProp, orderByComparator, selectRows, selectRowsBetween, setColumnDefaults, shallowValueGetter, sortRows, throttle, throttleable, translateTemplates, translateXY };","map":{"version":3,"sources":["/workspaces/testhospital1/node_modules/@swimlane/ngx-datatable/fesm2015/swimlane-ngx-datatable.mjs"],"names":["i0","Injectable","Inject","Directive","EventEmitter","HostBinding","Output","Input","HostListener","ContentChildren","Component","ChangeDetectionStrategy","TemplateRef","ContentChild","ViewContainerRef","ViewChild","SkipSelf","ViewEncapsulation","Optional","NgModule","i1","DOCUMENT","CommonModule","Subject","fromEvent","BehaviorSubject","takeUntil","__decorate","ScrollbarHelper","constructor","document","width","getWidth","outer","createElement","style","visibility","msOverflowStyle","body","appendChild","widthNoScroll","offsetWidth","overflow","inner","widthWithScroll","parentNode","removeChild","ɵfac","ɵprov","type","undefined","decorators","args","DimensionsHelper","getDimensions","element","getBoundingClientRect","ColumnChangesService","columnInputChanges","columnInputChanges$","asObservable","onInputChange","next","DataTableFooterTemplateDirective","template","ɵdir","selector","VisibilityDirective","zone","isVisible","visible","ngOnInit","runCheck","ngOnDestroy","clearTimeout","timeout","onVisibilityChange","run","emit","check","offsetHeight","nativeElement","runOutsideAngular","setTimeout","ElementRef","NgZone","DraggableDirective","dragX","dragY","dragStart","dragging","dragEnd","isDragging","ngOnChanges","changes","currentValue","dragModel","onMousedown","_destroySubscription","onMouseup","event","classList","remove","subscription","model","isDragElm","target","contains","preventDefault","mouseDownPos","x","clientX","y","clientY","mouseup","subscribe","ev","mouseMoveSub","pipe","move","add","left","top","unsubscribe","dragEventTarget","ResizeableDirective","renderer","resizeEnabled","resize","resizing","ngAfterViewInit","renderer2","resizeHandle","addClass","destroyNode","closed","clientWidth","isHandle","initialWidth","mouseDownScreenX","screenX","stopPropagation","e","movementX","newWidth","overMinWidth","minWidth","underMaxWidth","maxWidth","Renderer2","host","OrderableDirective","differs","reorder","targetChanged","differ","find","create","ngAfterContentInit","updateSubscriptions","draggables","bind","forEach","d","diffs","diff","createMapDiffs","previousValue","onDragStart","onDragging","onDragEnd","forEachAddedItem","forEachRemovedItem","positions","i","dragger","toArray","elm","parseInt","offsetLeft","toString","prop","right","index","prevPos","isTarget","lastDraggingIndex","prevIndex","newIndex","initialIndex","targets","elementsFromPoint","pos","el","reduce","acc","curr","$$id","KeyValueDiffers","descendants","LongPressDirective","pressEnabled","duration","longPressStart","longPressing","longPressEnd","mouseX","mouseY","press","pressing","isLongPress","isLongPressing","onMouseDown","which","pressModel","mouseEvent","onMouseMove","loop","xThres","Math","abs","yThres","endPress","ScrollerComponent","ngZone","scrollbarV","scrollbarH","scroll","scrollYPos","scrollXPos","prevScrollYPos","prevScrollXPos","_scrollEventListener","parentElement","onScrolled","addEventListener","removeEventListener","setOffset","offsetY","scrollTop","dom","currentTarget","requestAnimationFrame","scrollLeft","updateOffset","direction","ɵcmp","class","changeDetection","OnPush","scrollHeight","scrollWidth","DatatableGroupHeaderTemplateDirective","DatatableGroupHeaderDirective","rowHeight","toggle","_templateInput","_templateQuery","toggleExpandGroup","group","value","expandAllGroups","collapseAllGroups","read","static","emptyStringGetter","getterForProp","numericIndexGetter","indexOf","deepValueGetter","shallowValueGetter","row","obj","fieldName","path","current","split","length","optionalGetterForProp","groupRowsByParents","rows","from","to","nodeById","l","node","TreeNode","uniqIDs","arr","item","toValue","push","parent","fromValue","children","resolvedRows","flatten","level","treeStatus","f","recursive","child","apply","Array","prototype","slice","call","arguments","camelCase","str","replace","trim","toLowerCase","a","b","c","toUpperCase","deCamelCase","match","id","random","pow","setColumnDefaults","columns","treeColumnFound","column","isNullOrUndefined","name","$$valueGetter","String","hasOwnProperty","resizeable","sortable","draggable","canAutoResize","isTreeColumn","translateTemplates","templates","result","temp","col","props","Object","getOwnPropertyNames","headerTemplate","cellTemplate","summaryFunc","summaryTemplate","ColumnMode","SelectionType","SortType","ContextmenuType","DataTableColumnHeaderDirective","DataTableColumnCellDirective","DataTableColumnCellTreeToggle","DataTableColumnDirective","columnChangesService","isFirstChange","_cellTemplateInput","_cellTemplateQuery","_headerTemplateInput","_headerTemplateQuery","treeToggleTemplate","_treeToggleTemplateInput","_treeToggleTemplateQuery","frozenLeft","frozenRight","flexGrow","comparator","checkboxable","headerCheckboxable","headerClass","cellClass","treeLevelIndent","DatatableRowDetailTemplateDirective","DatatableRowDetailDirective","toggleExpandRow","expandAllRows","collapseAllRows","DatatableFooterDirective","footerHeight","totalMessage","selectedMessage","pagerLeftArrowIcon","pagerRightArrowIcon","pagerPreviousIcon","pagerNextIcon","columnsByPin","cols","ret","center","columnGroupWidths","groups","all","columnTotalWidth","total","floor","totalWidth","has","parseFloat","columnsTotalWidth","columnsByPinArr","val","colsByPinArr","colsByPin","RowHeightCache","treeArray","clearCache","initCache","details","detailRowHeight","externalVirtual","rowCount","rowIndexes","rowExpansions","isFn","isDetailFn","isNaN","Error","n","currentRowHeight","expanded","get","update","getRowIndex","scrollY","calcRowIndex","atRowIndex","byRowHeight","query","atIndex","sum","queryBetween","atIndexA","atIndexB","dataLength","highestBit","blockSize","nextPos","cache","testStyle","prefix","styles","window","getComputedStyle","documentElement","join","pre","RegExp","lowercase","css","js","substr","getVendorPrefixedName","property","transform","backfaceVisibility","hasCSSTransforms","hasCSS3DTransforms","ua","navigator","userAgent","isSafari","test","translateXY","ProgressBarComponent","selectRows","selected","comparefn","selectedIndex","splice","selectRowsBetween","reverse","greater","lesser","range","start","end","Keys","DataTableSelectionComponent","activate","select","selectRow","selectEnabled","chkbox","selectionType","checkbox","multi","multiClick","shiftKey","getRowSelectedIdx","ctrlKey","metaKey","selectCheck","filter","onActivate","keyCode","return","onKeyboardFocus","shouldFocus","up","down","isCellSelection","cell","cellElement","focusRow","rowElement","focusCell","cellIndex","nextRowElement","getPrevNextRow","focus","focusElement","previousElementSibling","nextElementSibling","nextCellElement","getElementsByClassName","getRowSelected","rowId","rowIdentity","findIndex","r","SortDirection","DataTableBodyCellComponent","cd","treeAction","isFocused","onCheckboxChangeFn","onCheckboxChange","activateFn","cellContext","isSelected","rowIndex","onTreeAction","_element","_group","checkValueUpdates","markForCheck","_rowHeight","_isSelected","_expanded","_rowIndex","_column","_row","sorts","_sorts","calcSortDir","status","_treeStatus","columnCssClasses","cls","res","keys","k","sortDir","asc","desc","height","ngDoCheck","clear","userPipe","sanitizedValue","stripHtml","onFocus","onBlur","onClick","onDblClick","onKeyDown","isTargetCell","isAction","sort","s","dir","html","calcLeftMargin","levelIndent","ChangeDetectorRef","NgIf","NgTemplateOutlet","displayCheck","DataTableBodyRowComponent","scrollbarHelper","_groupStyles","_rowDiffer","_columns","recalculateColumns","buildStylesByGroup","innerWidth","colByPin","_columnGroupWidths","_innerWidth","offsetX","_offsetX","cssClass","rowClass","columnsTotalWidths","trackByGroups","colGroup","columnTrackingFn","calcStylesByGroup","widths","bodyWidth","totalDiff","offsetDiff","offset","isTargetRow","onMouseenter","_columnsByPin","NgForOf","NgStyle","defaultSumFunc","cells","cellsWithValues","some","noopSumFunc","DataTableSummaryRowComponent","summaryRow","updateInternalColumns","updateValues","_internalColumns","map","assign","cellsFromSingleColumn","sumFunc","getSummaryFunction","DataTableRowWrapperComponent","rowContextmenu","groupContext","rowContext","rowDiffer","onContextmenu","$event","getGroupHeaderStyle","rowDetail","groupHeader","groupedRows","DataTableBodyComponent","page","detailToggle","rowHeightsCache","indexes","WeakMap","getDetailRowHeight","rowTrackingFn","idx","trackByProp","pageSize","_pageSize","recalcLayout","_rows","_offset","virtualization","_rowCount","bodyHeight","_bodyHeight","listener","toggleRowExpansion","toggleAllRows","updateIndexes","updateRows","updateOffsetY","scroller","onBodyScroll","updatePage","first","ceil","last","maxRowsPerGroup","set","g","_idx","getRowHeight","getGroupHeight","getRowAndDetailHeight","getRowExpanded","getRowsStyles","getBottomSummaryRowStyles","position","hideIndicator","loadingIndicator","externalPaging","max","min","refreshRowHeightCache","Set","getAdjustedViewPortIndex","viewPortFirstRowIndex","offsetScroll","rowExpandedIdx","getRowExpandedIdx","currentIndex","stylesByGroup","groupExpansionDefault","emptyMessage","groupRowsBy","summaryPosition","summaryHeight","nextSortDir","sortType","single","orderByComparator","Date","isFinite","sortRows","dirs","rowToIndexMap","Map","cachedDirs","valueGetter","compareFn","rowA","rowB","cachedDir","propA","propB","comparison","DataTableHeaderCellComponent","columnContextmenu","sortFn","onSort","selectFn","allRowsSelected","_allRowsSelected","sortClass","calcSortClass","isCheckboxable","newValue","prevValue","sortAscendingIcon","sortDescendingIcon","sortUnsetIcon","targetMarkerTemplate","targetMarkerContext","headerHeight","DataTableHeaderComponent","_styleByGroup","destroyed","setStylesByGroup","_headerHeight","onLongPressStart","onLongPressEnd","headerWidth","onColumnResized","onColumnReordered","getColumn","onTargetChanged","oldColumn","newColumn","concat","leftColumnCount","centerColumnCount","calcNewSorts","detectChanges","dealsWithGroup","reorderable","throttle","func","wait","options","context","previous","later","leading","now","remaining","trailing","throttleable","innerDecorator","key","descriptor","configurable","enumerable","getter","defineProperty","getTotalFlexGrow","totalFlexGrow","adjustColumnWidths","allColumns","expectedWidth","columnsWidth","colsByGroup","scaleColumns","attr","hasMinWidth","remainingWidth","widthPerFlexPoint","forceFillColumnWidths","startIdx","allowBleed","defaultColWidth","columnsToResize","$$oldWidth","additionWidthPerColumn","exceedsWindow","contentWidth","getContentWidth","columnsProcessed","remainingWidthLimit","newSize","removeProcessedColumns","DataTablePagerComponent","change","_count","_page","_size","size","pages","calcPages","count","totalPages","canPrevious","canNext","prevPage","selectPage","nextPage","startPage","endPage","maxSize","isMaxSized","num","number","text","DataTableFooterComponent","selectedCount","curPage","NgClass","footerTemplate","DatatableComponent","dimensionsHelper","configuration","columnMode","standard","externalSorting","swapColumns","cssClasses","sortAscending","sortDescending","sortUnset","pagerLeftArrow","pagerRightArrow","pagerPrevious","pagerNext","messages","selectAllRowsOnPage","tableContextmenu","_subscriptions","_groupRowsBy","_internalRows","sortInternalRows","treeFromRelation","treeToRelation","recalculate","groupArrayBy","limit","_limit","isFixedHeader","isFixedRow","isVertScroll","isVirtualized","isHorScroll","isSelectable","isCheckboxSelection","isSingleSelection","isMultiSelection","isMultiClickSelection","columnTemplates","_columnTemplates","translateColumns","bodyComponent","rowsOnPage","v","listenForColumnInputChanges","originalArray","groupBy","addGroup","recalculatePages","recalculateDims","onWindowResize","forceIdx","force","flex","dims","calcPageSize","calcRowCount","onBodyPage","onFooterPage","onColumnContextmenu","header","content","onRowContextmenu","onColumnResize","onColumnReorder","prevCol","movedCol","onColumnSort","onHeaderSelect","allSelected","onBodySelect","notifyOnChanges","AsyncPipe","encapsulation","None","footer","headerComponent","NgxDatatableModule","forRoot","ngModule","providers","provide","useValue","ɵmod","ɵinj","imports","declarations","exports","ClickType","elements","previousPointerEvents","elementFromPoint","getPropertyValue","priority","getPropertyPriority","setProperty"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Inject, Directive, EventEmitter, HostBinding, Output, Input, HostListener, ContentChildren, Component, ChangeDetectionStrategy, TemplateRef, ContentChild, ViewContainerRef, ViewChild, SkipSelf, ViewEncapsulation, Optional, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Subject, fromEvent, BehaviorSubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { __decorate } from 'tslib';\n\n/**\n * Gets the width of the scrollbar.  Nesc for windows\n * http://stackoverflow.com/a/13382873/888165\n */\nclass ScrollbarHelper {\n    constructor(document) {\n        this.document = document;\n        this.width = this.getWidth();\n    }\n    getWidth() {\n        const outer = this.document.createElement('div');\n        outer.style.visibility = 'hidden';\n        outer.style.width = '100px';\n        outer.style.msOverflowStyle = 'scrollbar';\n        this.document.body.appendChild(outer);\n        const widthNoScroll = outer.offsetWidth;\n        outer.style.overflow = 'scroll';\n        const inner = this.document.createElement('div');\n        inner.style.width = '100%';\n        outer.appendChild(inner);\n        const widthWithScroll = inner.offsetWidth;\n        outer.parentNode.removeChild(outer);\n        return widthNoScroll - widthWithScroll;\n    }\n}\nScrollbarHelper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ScrollbarHelper, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollbarHelper.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ScrollbarHelper });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ScrollbarHelper, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * Gets the width of the scrollbar.  Nesc for windows\n * http://stackoverflow.com/a/13382873/888165\n */\nclass DimensionsHelper {\n    getDimensions(element) {\n        return element.getBoundingClientRect();\n    }\n}\nDimensionsHelper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DimensionsHelper, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nDimensionsHelper.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DimensionsHelper });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DimensionsHelper, decorators: [{\n            type: Injectable\n        }] });\n\n/**\n * service to make DatatableComponent aware of changes to\n * input bindings of DataTableColumnDirective\n */\nclass ColumnChangesService {\n    constructor() {\n        this.columnInputChanges = new Subject();\n    }\n    get columnInputChanges$() {\n        return this.columnInputChanges.asObservable();\n    }\n    onInputChange() {\n        this.columnInputChanges.next();\n    }\n}\nColumnChangesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ColumnChangesService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nColumnChangesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ColumnChangesService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ColumnChangesService, decorators: [{\n            type: Injectable\n        }] });\n\nclass DataTableFooterTemplateDirective {\n    constructor(template) {\n        this.template = template;\n    }\n}\nDataTableFooterTemplateDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableFooterTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nDataTableFooterTemplateDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableFooterTemplateDirective, selector: \"[ngx-datatable-footer-template]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableFooterTemplateDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[ngx-datatable-footer-template]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\n/**\n * Visibility Observer Directive\n *\n * Usage:\n *\n * \t\t<div\n * \t\t\tvisibilityObserver\n * \t\t\t(visible)=\"onVisible($event)\">\n * \t\t</div>\n *\n */\nclass VisibilityDirective {\n    constructor(element, zone) {\n        this.element = element;\n        this.zone = zone;\n        this.isVisible = false;\n        this.visible = new EventEmitter();\n    }\n    ngOnInit() {\n        this.runCheck();\n    }\n    ngOnDestroy() {\n        clearTimeout(this.timeout);\n    }\n    onVisibilityChange() {\n        // trigger zone recalc for columns\n        this.zone.run(() => {\n            this.isVisible = true;\n            this.visible.emit(true);\n        });\n    }\n    runCheck() {\n        const check = () => {\n            // https://davidwalsh.name/offsetheight-visibility\n            const { offsetHeight, offsetWidth } = this.element.nativeElement;\n            if (offsetHeight && offsetWidth) {\n                clearTimeout(this.timeout);\n                this.onVisibilityChange();\n            }\n            else {\n                clearTimeout(this.timeout);\n                this.zone.runOutsideAngular(() => {\n                    this.timeout = setTimeout(() => check(), 50);\n                });\n            }\n        };\n        this.timeout = setTimeout(() => check());\n    }\n}\nVisibilityDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: VisibilityDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nVisibilityDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: VisibilityDirective, selector: \"[visibilityObserver]\", outputs: { visible: \"visible\" }, host: { properties: { \"class.visible\": \"this.isVisible\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: VisibilityDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[visibilityObserver]' }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { isVisible: [{\n                type: HostBinding,\n                args: ['class.visible']\n            }], visible: [{\n                type: Output\n            }] } });\n\n/**\n * Draggable Directive for Angular2\n *\n * Inspiration:\n *   https://github.com/AngularClass/angular2-examples/blob/master/rx-draggable/directives/draggable.ts\n *   http://stackoverflow.com/questions/35662530/how-to-implement-drag-and-drop-in-angular2\n *\n */\nclass DraggableDirective {\n    constructor(element) {\n        this.dragX = true;\n        this.dragY = true;\n        this.dragStart = new EventEmitter();\n        this.dragging = new EventEmitter();\n        this.dragEnd = new EventEmitter();\n        this.isDragging = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        if (changes['dragEventTarget'] && changes['dragEventTarget'].currentValue && this.dragModel.dragging) {\n            this.onMousedown(changes['dragEventTarget'].currentValue);\n        }\n    }\n    ngOnDestroy() {\n        this._destroySubscription();\n    }\n    onMouseup(event) {\n        if (!this.isDragging)\n            return;\n        this.isDragging = false;\n        this.element.classList.remove('dragging');\n        if (this.subscription) {\n            this._destroySubscription();\n            this.dragEnd.emit({\n                event,\n                element: this.element,\n                model: this.dragModel\n            });\n        }\n    }\n    onMousedown(event) {\n        // we only want to drag the inner header text\n        const isDragElm = event.target.classList.contains('draggable');\n        if (isDragElm && (this.dragX || this.dragY)) {\n            event.preventDefault();\n            this.isDragging = true;\n            const mouseDownPos = { x: event.clientX, y: event.clientY };\n            const mouseup = fromEvent(document, 'mouseup');\n            this.subscription = mouseup.subscribe((ev) => this.onMouseup(ev));\n            const mouseMoveSub = fromEvent(document, 'mousemove')\n                .pipe(takeUntil(mouseup))\n                .subscribe((ev) => this.move(ev, mouseDownPos));\n            this.subscription.add(mouseMoveSub);\n            this.dragStart.emit({\n                event,\n                element: this.element,\n                model: this.dragModel\n            });\n        }\n    }\n    move(event, mouseDownPos) {\n        if (!this.isDragging)\n            return;\n        const x = event.clientX - mouseDownPos.x;\n        const y = event.clientY - mouseDownPos.y;\n        if (this.dragX)\n            this.element.style.left = `${x}px`;\n        if (this.dragY)\n            this.element.style.top = `${y}px`;\n        this.element.classList.add('dragging');\n        this.dragging.emit({\n            event,\n            element: this.element,\n            model: this.dragModel\n        });\n    }\n    _destroySubscription() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n            this.subscription = undefined;\n        }\n    }\n}\nDraggableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DraggableDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nDraggableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DraggableDirective, selector: \"[draggable]\", inputs: { dragEventTarget: \"dragEventTarget\", dragModel: \"dragModel\", dragX: \"dragX\", dragY: \"dragY\" }, outputs: { dragStart: \"dragStart\", dragging: \"dragging\", dragEnd: \"dragEnd\" }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DraggableDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[draggable]' }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { dragEventTarget: [{\n                type: Input\n            }], dragModel: [{\n                type: Input\n            }], dragX: [{\n                type: Input\n            }], dragY: [{\n                type: Input\n            }], dragStart: [{\n                type: Output\n            }], dragging: [{\n                type: Output\n            }], dragEnd: [{\n                type: Output\n            }] } });\n\nclass ResizeableDirective {\n    constructor(element, renderer) {\n        this.renderer = renderer;\n        this.resizeEnabled = true;\n        this.resize = new EventEmitter();\n        this.resizing = false;\n        this.element = element.nativeElement;\n    }\n    ngAfterViewInit() {\n        const renderer2 = this.renderer;\n        this.resizeHandle = renderer2.createElement('span');\n        if (this.resizeEnabled) {\n            renderer2.addClass(this.resizeHandle, 'resize-handle');\n        }\n        else {\n            renderer2.addClass(this.resizeHandle, 'resize-handle--not-resizable');\n        }\n        renderer2.appendChild(this.element, this.resizeHandle);\n    }\n    ngOnDestroy() {\n        this._destroySubscription();\n        if (this.renderer.destroyNode) {\n            this.renderer.destroyNode(this.resizeHandle);\n        }\n        else if (this.resizeHandle) {\n            this.renderer.removeChild(this.renderer.parentNode(this.resizeHandle), this.resizeHandle);\n        }\n    }\n    onMouseup() {\n        this.resizing = false;\n        if (this.subscription && !this.subscription.closed) {\n            this._destroySubscription();\n            this.resize.emit(this.element.clientWidth);\n        }\n    }\n    onMousedown(event) {\n        const isHandle = event.target.classList.contains('resize-handle');\n        const initialWidth = this.element.clientWidth;\n        const mouseDownScreenX = event.screenX;\n        if (isHandle) {\n            event.stopPropagation();\n            this.resizing = true;\n            const mouseup = fromEvent(document, 'mouseup');\n            this.subscription = mouseup.subscribe((ev) => this.onMouseup());\n            const mouseMoveSub = fromEvent(document, 'mousemove')\n                .pipe(takeUntil(mouseup))\n                .subscribe((e) => this.move(e, initialWidth, mouseDownScreenX));\n            this.subscription.add(mouseMoveSub);\n        }\n    }\n    move(event, initialWidth, mouseDownScreenX) {\n        const movementX = event.screenX - mouseDownScreenX;\n        const newWidth = initialWidth + movementX;\n        const overMinWidth = !this.minWidth || newWidth >= this.minWidth;\n        const underMaxWidth = !this.maxWidth || newWidth <= this.maxWidth;\n        if (overMinWidth && underMaxWidth) {\n            this.element.style.width = `${newWidth}px`;\n        }\n    }\n    _destroySubscription() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n            this.subscription = undefined;\n        }\n    }\n}\nResizeableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ResizeableDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });\nResizeableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: ResizeableDirective, selector: \"[resizeable]\", inputs: { resizeEnabled: \"resizeEnabled\", minWidth: \"minWidth\", maxWidth: \"maxWidth\" }, outputs: { resize: \"resize\" }, host: { listeners: { \"mousedown\": \"onMousedown($event)\" }, properties: { \"class.resizeable\": \"resizeEnabled\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ResizeableDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[resizeable]',\n                    host: {\n                        '[class.resizeable]': 'resizeEnabled'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { resizeEnabled: [{\n                type: Input\n            }], minWidth: [{\n                type: Input\n            }], maxWidth: [{\n                type: Input\n            }], resize: [{\n                type: Output\n            }], onMousedown: [{\n                type: HostListener,\n                args: ['mousedown', ['$event']]\n            }] } });\n\nclass OrderableDirective {\n    constructor(differs, document) {\n        this.document = document;\n        this.reorder = new EventEmitter();\n        this.targetChanged = new EventEmitter();\n        this.differ = differs.find({}).create();\n    }\n    ngAfterContentInit() {\n        // HACK: Investigate Better Way\n        this.updateSubscriptions();\n        this.draggables.changes.subscribe(this.updateSubscriptions.bind(this));\n    }\n    ngOnDestroy() {\n        this.draggables.forEach(d => {\n            d.dragStart.unsubscribe();\n            d.dragging.unsubscribe();\n            d.dragEnd.unsubscribe();\n        });\n    }\n    updateSubscriptions() {\n        const diffs = this.differ.diff(this.createMapDiffs());\n        if (diffs) {\n            const subscribe = ({ currentValue, previousValue }) => {\n                unsubscribe({ previousValue });\n                if (currentValue) {\n                    currentValue.dragStart.subscribe(this.onDragStart.bind(this));\n                    currentValue.dragging.subscribe(this.onDragging.bind(this));\n                    currentValue.dragEnd.subscribe(this.onDragEnd.bind(this));\n                }\n            };\n            const unsubscribe = ({ previousValue }) => {\n                if (previousValue) {\n                    previousValue.dragStart.unsubscribe();\n                    previousValue.dragging.unsubscribe();\n                    previousValue.dragEnd.unsubscribe();\n                }\n            };\n            diffs.forEachAddedItem(subscribe);\n            // diffs.forEachChangedItem(subscribe.bind(this));\n            diffs.forEachRemovedItem(unsubscribe);\n        }\n    }\n    onDragStart() {\n        this.positions = {};\n        let i = 0;\n        for (const dragger of this.draggables.toArray()) {\n            const elm = dragger.element;\n            const left = parseInt(elm.offsetLeft.toString(), 0);\n            this.positions[dragger.dragModel.prop] = {\n                left,\n                right: left + parseInt(elm.offsetWidth.toString(), 0),\n                index: i++,\n                element: elm\n            };\n        }\n    }\n    onDragging({ element, model, event }) {\n        const prevPos = this.positions[model.prop];\n        const target = this.isTarget(model, event);\n        if (target) {\n            if (this.lastDraggingIndex !== target.i) {\n                this.targetChanged.emit({\n                    prevIndex: this.lastDraggingIndex,\n                    newIndex: target.i,\n                    initialIndex: prevPos.index\n                });\n                this.lastDraggingIndex = target.i;\n            }\n        }\n        else if (this.lastDraggingIndex !== prevPos.index) {\n            this.targetChanged.emit({\n                prevIndex: this.lastDraggingIndex,\n                initialIndex: prevPos.index\n            });\n            this.lastDraggingIndex = prevPos.index;\n        }\n    }\n    onDragEnd({ element, model, event }) {\n        const prevPos = this.positions[model.prop];\n        const target = this.isTarget(model, event);\n        if (target) {\n            this.reorder.emit({\n                prevIndex: prevPos.index,\n                newIndex: target.i,\n                model\n            });\n        }\n        this.lastDraggingIndex = undefined;\n        element.style.left = 'auto';\n    }\n    isTarget(model, event) {\n        let i = 0;\n        const x = event.x || event.clientX;\n        const y = event.y || event.clientY;\n        const targets = this.document.elementsFromPoint(x, y);\n        for (const prop in this.positions) {\n            // current column position which throws event.\n            const pos = this.positions[prop];\n            // since we drag the inner span, we need to find it in the elements at the cursor\n            if (model.prop !== prop && targets.find((el) => el === pos.element)) {\n                return {\n                    pos,\n                    i\n                };\n            }\n            i++;\n        }\n    }\n    createMapDiffs() {\n        return this.draggables.toArray().reduce((acc, curr) => {\n            acc[curr.dragModel.$$id] = curr;\n            return acc;\n        }, {});\n    }\n}\nOrderableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: OrderableDirective, deps: [{ token: i0.KeyValueDiffers }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nOrderableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: OrderableDirective, selector: \"[orderable]\", outputs: { reorder: \"reorder\", targetChanged: \"targetChanged\" }, queries: [{ propertyName: \"draggables\", predicate: DraggableDirective, descendants: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: OrderableDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[orderable]' }]\n        }], ctorParameters: function () {\n        return [{ type: i0.KeyValueDiffers }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    }, propDecorators: { reorder: [{\n                type: Output\n            }], targetChanged: [{\n                type: Output\n            }], draggables: [{\n                type: ContentChildren,\n                args: [DraggableDirective, { descendants: true }]\n            }] } });\n\nclass LongPressDirective {\n    constructor() {\n        this.pressEnabled = true;\n        this.duration = 500;\n        this.longPressStart = new EventEmitter();\n        this.longPressing = new EventEmitter();\n        this.longPressEnd = new EventEmitter();\n        this.mouseX = 0;\n        this.mouseY = 0;\n    }\n    get press() {\n        return this.pressing;\n    }\n    get isLongPress() {\n        return this.isLongPressing;\n    }\n    onMouseDown(event) {\n        // don't do right/middle clicks\n        if (event.which !== 1 || !this.pressEnabled)\n            return;\n        // don't start drag if its on resize handle\n        const target = event.target;\n        if (target.classList.contains('resize-handle'))\n            return;\n        this.mouseX = event.clientX;\n        this.mouseY = event.clientY;\n        this.pressing = true;\n        this.isLongPressing = false;\n        const mouseup = fromEvent(document, 'mouseup');\n        this.subscription = mouseup.subscribe((ev) => this.onMouseup());\n        this.timeout = setTimeout(() => {\n            this.isLongPressing = true;\n            this.longPressStart.emit({\n                event,\n                model: this.pressModel\n            });\n            this.subscription.add(fromEvent(document, 'mousemove')\n                .pipe(takeUntil(mouseup))\n                .subscribe((mouseEvent) => this.onMouseMove(mouseEvent)));\n            this.loop(event);\n        }, this.duration);\n        this.loop(event);\n    }\n    onMouseMove(event) {\n        if (this.pressing && !this.isLongPressing) {\n            const xThres = Math.abs(event.clientX - this.mouseX) > 10;\n            const yThres = Math.abs(event.clientY - this.mouseY) > 10;\n            if (xThres || yThres) {\n                this.endPress();\n            }\n        }\n    }\n    loop(event) {\n        if (this.isLongPressing) {\n            this.timeout = setTimeout(() => {\n                this.longPressing.emit({\n                    event,\n                    model: this.pressModel\n                });\n                this.loop(event);\n            }, 50);\n        }\n    }\n    endPress() {\n        clearTimeout(this.timeout);\n        this.isLongPressing = false;\n        this.pressing = false;\n        this._destroySubscription();\n        this.longPressEnd.emit({\n            model: this.pressModel\n        });\n    }\n    onMouseup() {\n        this.endPress();\n    }\n    ngOnDestroy() {\n        this._destroySubscription();\n    }\n    _destroySubscription() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n            this.subscription = undefined;\n        }\n    }\n}\nLongPressDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: LongPressDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nLongPressDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: LongPressDirective, selector: \"[long-press]\", inputs: { pressEnabled: \"pressEnabled\", pressModel: \"pressModel\", duration: \"duration\" }, outputs: { longPressStart: \"longPressStart\", longPressing: \"longPressing\", longPressEnd: \"longPressEnd\" }, host: { listeners: { \"mousedown\": \"onMouseDown($event)\" }, properties: { \"class.press\": \"this.press\", \"class.longpress\": \"this.isLongPress\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: LongPressDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[long-press]' }]\n        }], propDecorators: { pressEnabled: [{\n                type: Input\n            }], pressModel: [{\n                type: Input\n            }], duration: [{\n                type: Input\n            }], longPressStart: [{\n                type: Output\n            }], longPressing: [{\n                type: Output\n            }], longPressEnd: [{\n                type: Output\n            }], press: [{\n                type: HostBinding,\n                args: ['class.press']\n            }], isLongPress: [{\n                type: HostBinding,\n                args: ['class.longpress']\n            }], onMouseDown: [{\n                type: HostListener,\n                args: ['mousedown', ['$event']]\n            }] } });\n\nclass ScrollerComponent {\n    constructor(ngZone, element, renderer) {\n        this.ngZone = ngZone;\n        this.renderer = renderer;\n        this.scrollbarV = false;\n        this.scrollbarH = false;\n        this.scroll = new EventEmitter();\n        this.scrollYPos = 0;\n        this.scrollXPos = 0;\n        this.prevScrollYPos = 0;\n        this.prevScrollXPos = 0;\n        this._scrollEventListener = null;\n        this.element = element.nativeElement;\n    }\n    ngOnInit() {\n        // manual bind so we don't always listen\n        if (this.scrollbarV || this.scrollbarH) {\n            const renderer = this.renderer;\n            this.parentElement = renderer.parentNode(renderer.parentNode(this.element));\n            this._scrollEventListener = this.onScrolled.bind(this);\n            this.parentElement.addEventListener('scroll', this._scrollEventListener);\n        }\n    }\n    ngOnDestroy() {\n        if (this._scrollEventListener) {\n            this.parentElement.removeEventListener('scroll', this._scrollEventListener);\n            this._scrollEventListener = null;\n        }\n    }\n    setOffset(offsetY) {\n        if (this.parentElement) {\n            this.parentElement.scrollTop = offsetY;\n        }\n    }\n    onScrolled(event) {\n        const dom = event.currentTarget;\n        requestAnimationFrame(() => {\n            this.scrollYPos = dom.scrollTop;\n            this.scrollXPos = dom.scrollLeft;\n            this.updateOffset();\n        });\n    }\n    updateOffset() {\n        let direction;\n        if (this.scrollYPos < this.prevScrollYPos) {\n            direction = 'down';\n        }\n        else if (this.scrollYPos > this.prevScrollYPos) {\n            direction = 'up';\n        }\n        this.scroll.emit({\n            direction,\n            scrollYPos: this.scrollYPos,\n            scrollXPos: this.scrollXPos\n        });\n        this.prevScrollYPos = this.scrollYPos;\n        this.prevScrollXPos = this.scrollXPos;\n    }\n}\nScrollerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ScrollerComponent, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });\nScrollerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: ScrollerComponent, selector: \"datatable-scroller\", inputs: { scrollbarV: \"scrollbarV\", scrollbarH: \"scrollbarH\", scrollHeight: \"scrollHeight\", scrollWidth: \"scrollWidth\" }, outputs: { scroll: \"scroll\" }, host: { properties: { \"style.height.px\": \"this.scrollHeight\", \"style.width.px\": \"this.scrollWidth\" }, classAttribute: \"datatable-scroll\" }, ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ScrollerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-scroller',\n                    template: ` <ng-content></ng-content> `,\n                    host: {\n                        class: 'datatable-scroll'\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { scrollbarV: [{\n                type: Input\n            }], scrollbarH: [{\n                type: Input\n            }], scrollHeight: [{\n                type: HostBinding,\n                args: ['style.height.px']\n            }, {\n                type: Input\n            }], scrollWidth: [{\n                type: HostBinding,\n                args: ['style.width.px']\n            }, {\n                type: Input\n            }], scroll: [{\n                type: Output\n            }] } });\n\nclass DatatableGroupHeaderTemplateDirective {\n    constructor(template) {\n        this.template = template;\n    }\n}\nDatatableGroupHeaderTemplateDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableGroupHeaderTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nDatatableGroupHeaderTemplateDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DatatableGroupHeaderTemplateDirective, selector: \"[ngx-datatable-group-header-template]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableGroupHeaderTemplateDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngx-datatable-group-header-template]'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\nclass DatatableGroupHeaderDirective {\n    constructor() {\n        /**\n         * Row height is required when virtual scroll is enabled.\n         */\n        this.rowHeight = 0;\n        /**\n         * Track toggling of group visibility\n         */\n        this.toggle = new EventEmitter();\n    }\n    get template() {\n        return this._templateInput || this._templateQuery;\n    }\n    /**\n     * Toggle the expansion of a group\n     */\n    toggleExpandGroup(group) {\n        this.toggle.emit({\n            type: 'group',\n            value: group\n        });\n    }\n    /**\n     * Expand all groups\n     */\n    expandAllGroups() {\n        this.toggle.emit({\n            type: 'all',\n            value: true\n        });\n    }\n    /**\n     * Collapse all groups\n     */\n    collapseAllGroups() {\n        this.toggle.emit({\n            type: 'all',\n            value: false\n        });\n    }\n}\nDatatableGroupHeaderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableGroupHeaderDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nDatatableGroupHeaderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DatatableGroupHeaderDirective, selector: \"ngx-datatable-group-header\", inputs: { rowHeight: \"rowHeight\", _templateInput: [\"template\", \"_templateInput\"] }, outputs: { toggle: \"toggle\" }, queries: [{ propertyName: \"_templateQuery\", first: true, predicate: DatatableGroupHeaderTemplateDirective, descendants: true, read: TemplateRef, static: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableGroupHeaderDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: 'ngx-datatable-group-header' }]\n        }], propDecorators: { rowHeight: [{\n                type: Input\n            }], _templateInput: [{\n                type: Input,\n                args: ['template']\n            }], _templateQuery: [{\n                type: ContentChild,\n                args: [DatatableGroupHeaderTemplateDirective, { read: TemplateRef, static: true }]\n            }], toggle: [{\n                type: Output\n            }] } });\n\n/**\n * Always returns the empty string ''\n */\nfunction emptyStringGetter() {\n    return '';\n}\n/**\n * Returns the appropriate getter function for this kind of prop.\n * If prop == null, returns the emptyStringGetter.\n */\nfunction getterForProp(prop) {\n    if (prop == null) {\n        return emptyStringGetter;\n    }\n    if (typeof prop === 'number') {\n        return numericIndexGetter;\n    }\n    else {\n        // deep or simple\n        if (prop.indexOf('.') !== -1) {\n            return deepValueGetter;\n        }\n        else {\n            return shallowValueGetter;\n        }\n    }\n}\n/**\n * Returns the value at this numeric index.\n * @param row array of values\n * @param index numeric index\n * @returns any or '' if invalid index\n */\nfunction numericIndexGetter(row, index) {\n    if (row == null) {\n        return '';\n    }\n    // mimic behavior of deepValueGetter\n    if (!row || index == null) {\n        return row;\n    }\n    const value = row[index];\n    if (value == null) {\n        return '';\n    }\n    return value;\n}\n/**\n * Returns the value of a field.\n * (more efficient than deepValueGetter)\n * @param obj object containing the field\n * @param fieldName field name string\n */\nfunction shallowValueGetter(obj, fieldName) {\n    if (obj == null) {\n        return '';\n    }\n    if (!obj || !fieldName) {\n        return obj;\n    }\n    const value = obj[fieldName];\n    if (value == null) {\n        return '';\n    }\n    return value;\n}\n/**\n * Returns a deep object given a string. zoo['animal.type']\n */\nfunction deepValueGetter(obj, path) {\n    if (obj == null) {\n        return '';\n    }\n    if (!obj || !path) {\n        return obj;\n    }\n    // check if path matches a root-level field\n    // { \"a.b.c\": 123 }\n    let current = obj[path];\n    if (current !== undefined) {\n        return current;\n    }\n    current = obj;\n    const split = path.split('.');\n    if (split.length) {\n        for (let i = 0; i < split.length; i++) {\n            current = current[split[i]];\n            // if found undefined, return empty string\n            if (current === undefined || current === null) {\n                return '';\n            }\n        }\n    }\n    return current;\n}\n\nfunction optionalGetterForProp(prop) {\n    return prop && (row => getterForProp(prop)(row, prop));\n}\n/**\n * This functions rearrange items by their parents\n * Also sets the level value to each of the items\n *\n * Note: Expecting each item has a property called parentId\n * Note: This algorithm will fail if a list has two or more items with same ID\n * NOTE: This algorithm will fail if there is a deadlock of relationship\n *\n * For example,\n *\n * Input\n *\n * id -> parent\n * 1  -> 0\n * 2  -> 0\n * 3  -> 1\n * 4  -> 1\n * 5  -> 2\n * 7  -> 8\n * 6  -> 3\n *\n *\n * Output\n * id -> level\n * 1      -> 0\n * --3    -> 1\n * ----6  -> 2\n * --4    -> 1\n * 2      -> 0\n * --5    -> 1\n * 7     -> 8\n *\n *\n * @param rows\n *\n */\nfunction groupRowsByParents(rows, from, to) {\n    if (from && to) {\n        const nodeById = {};\n        const l = rows.length;\n        let node = null;\n        nodeById[0] = new TreeNode(); // that's the root node\n        const uniqIDs = rows.reduce((arr, item) => {\n            const toValue = to(item);\n            if (arr.indexOf(toValue) === -1) {\n                arr.push(toValue);\n            }\n            return arr;\n        }, []);\n        for (let i = 0; i < l; i++) {\n            // make TreeNode objects for each item\n            nodeById[to(rows[i])] = new TreeNode(rows[i]);\n        }\n        for (let i = 0; i < l; i++) {\n            // link all TreeNode objects\n            node = nodeById[to(rows[i])];\n            let parent = 0;\n            const fromValue = from(node.row);\n            if (!!fromValue && uniqIDs.indexOf(fromValue) > -1) {\n                parent = fromValue;\n            }\n            node.parent = nodeById[parent];\n            node.row['level'] = node.parent.row['level'] + 1;\n            node.parent.children.push(node);\n        }\n        let resolvedRows = [];\n        nodeById[0].flatten(function () {\n            resolvedRows = [...resolvedRows, this.row];\n        }, true);\n        return resolvedRows;\n    }\n    else {\n        return rows;\n    }\n}\nclass TreeNode {\n    constructor(row = null) {\n        if (!row) {\n            row = {\n                level: -1,\n                treeStatus: 'expanded'\n            };\n        }\n        this.row = row;\n        this.parent = null;\n        this.children = [];\n    }\n    flatten(f, recursive) {\n        if (this.row['treeStatus'] === 'expanded') {\n            for (let i = 0, l = this.children.length; i < l; i++) {\n                const child = this.children[i];\n                f.apply(child, Array.prototype.slice.call(arguments, 2));\n                if (recursive)\n                    child.flatten.apply(child, arguments);\n            }\n        }\n    }\n}\n\n/**\n * Converts strings from something to camel case\n * http://stackoverflow.com/questions/10425287/convert-dash-separated-string-to-camelcase\n */\nfunction camelCase(str) {\n    // Replace special characters with a space\n    str = str.replace(/[^a-zA-Z0-9 ]/g, ' ');\n    // put a space before an uppercase letter\n    str = str.replace(/([a-z](?=[A-Z]))/g, '$1 ');\n    // Lower case first character and some other stuff\n    str = str\n        .replace(/([^a-zA-Z0-9 ])|^[0-9]+/g, '')\n        .trim()\n        .toLowerCase();\n    // uppercase characters preceded by a space or number\n    str = str.replace(/([ 0-9]+)([a-zA-Z])/g, function (a, b, c) {\n        return b.trim() + c.toUpperCase();\n    });\n    return str;\n}\n/**\n * Converts strings from camel case to words\n * http://stackoverflow.com/questions/7225407/convert-camelcasetext-to-camel-case-text\n */\nfunction deCamelCase(str) {\n    return str.replace(/([A-Z])/g, match => ` ${match}`).replace(/^./, match => match.toUpperCase());\n}\n\n/**\n * Creates a unique object id.\n * http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n */\nfunction id() {\n    return ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n}\n\n/**\n * Sets the column defaults\n */\nfunction setColumnDefaults(columns) {\n    if (!columns)\n        return;\n    // Only one column should hold the tree view\n    // Thus if multiple columns are provided with\n    // isTreeColumn as true we take only the first one\n    let treeColumnFound = false;\n    for (const column of columns) {\n        if (!column.$$id) {\n            column.$$id = id();\n        }\n        // prop can be numeric; zero is valid not a missing prop\n        // translate name => prop\n        if (isNullOrUndefined(column.prop) && column.name) {\n            column.prop = camelCase(column.name);\n        }\n        if (!column.$$valueGetter) {\n            column.$$valueGetter = getterForProp(column.prop);\n        }\n        // format props if no name passed\n        if (!isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\n            column.name = deCamelCase(String(column.prop));\n        }\n        if (isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\n            column.name = ''; // Fixes IE and Edge displaying `null`\n        }\n        if (!column.hasOwnProperty('resizeable')) {\n            column.resizeable = true;\n        }\n        if (!column.hasOwnProperty('sortable')) {\n            column.sortable = true;\n        }\n        if (!column.hasOwnProperty('draggable')) {\n            column.draggable = true;\n        }\n        if (!column.hasOwnProperty('canAutoResize')) {\n            column.canAutoResize = true;\n        }\n        if (!column.hasOwnProperty('width')) {\n            column.width = 150;\n        }\n        if (!column.hasOwnProperty('isTreeColumn')) {\n            column.isTreeColumn = false;\n        }\n        else {\n            if (column.isTreeColumn && !treeColumnFound) {\n                // If the first column with isTreeColumn is true found\n                // we mark that treeCoulmn is found\n                treeColumnFound = true;\n            }\n            else {\n                // After that isTreeColumn property for any other column\n                // will be set as false\n                column.isTreeColumn = false;\n            }\n        }\n    }\n}\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\n/**\n * Translates templates definitions to objects\n */\nfunction translateTemplates(templates) {\n    const result = [];\n    for (const temp of templates) {\n        const col = {};\n        const props = Object.getOwnPropertyNames(temp);\n        for (const prop of props) {\n            col[prop] = temp[prop];\n        }\n        if (temp.headerTemplate) {\n            col.headerTemplate = temp.headerTemplate;\n        }\n        if (temp.cellTemplate) {\n            col.cellTemplate = temp.cellTemplate;\n        }\n        if (temp.summaryFunc) {\n            col.summaryFunc = temp.summaryFunc;\n        }\n        if (temp.summaryTemplate) {\n            col.summaryTemplate = temp.summaryTemplate;\n        }\n        result.push(col);\n    }\n    return result;\n}\n\nvar ColumnMode;\n(function (ColumnMode) {\n    ColumnMode[\"standard\"] = \"standard\";\n    ColumnMode[\"flex\"] = \"flex\";\n    ColumnMode[\"force\"] = \"force\";\n})(ColumnMode || (ColumnMode = {}));\n\nvar SelectionType;\n(function (SelectionType) {\n    SelectionType[\"single\"] = \"single\";\n    SelectionType[\"multi\"] = \"multi\";\n    SelectionType[\"multiClick\"] = \"multiClick\";\n    SelectionType[\"cell\"] = \"cell\";\n    SelectionType[\"checkbox\"] = \"checkbox\";\n})(SelectionType || (SelectionType = {}));\n\nvar SortType;\n(function (SortType) {\n    SortType[\"single\"] = \"single\";\n    SortType[\"multi\"] = \"multi\";\n})(SortType || (SortType = {}));\n\nvar ContextmenuType;\n(function (ContextmenuType) {\n    ContextmenuType[\"header\"] = \"header\";\n    ContextmenuType[\"body\"] = \"body\";\n})(ContextmenuType || (ContextmenuType = {}));\n\nclass DataTableColumnHeaderDirective {\n    constructor(template) {\n        this.template = template;\n    }\n}\nDataTableColumnHeaderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableColumnHeaderDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nDataTableColumnHeaderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableColumnHeaderDirective, selector: \"[ngx-datatable-header-template]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableColumnHeaderDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[ngx-datatable-header-template]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\nclass DataTableColumnCellDirective {\n    constructor(template) {\n        this.template = template;\n    }\n}\nDataTableColumnCellDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableColumnCellDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nDataTableColumnCellDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableColumnCellDirective, selector: \"[ngx-datatable-cell-template]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableColumnCellDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[ngx-datatable-cell-template]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\nclass DataTableColumnCellTreeToggle {\n    constructor(template) {\n        this.template = template;\n    }\n}\nDataTableColumnCellTreeToggle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableColumnCellTreeToggle, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nDataTableColumnCellTreeToggle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableColumnCellTreeToggle, selector: \"[ngx-datatable-tree-toggle]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableColumnCellTreeToggle, decorators: [{\n            type: Directive,\n            args: [{ selector: '[ngx-datatable-tree-toggle]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\nclass DataTableColumnDirective {\n    constructor(columnChangesService) {\n        this.columnChangesService = columnChangesService;\n        this.isFirstChange = true;\n    }\n    get cellTemplate() {\n        return this._cellTemplateInput || this._cellTemplateQuery;\n    }\n    get headerTemplate() {\n        return this._headerTemplateInput || this._headerTemplateQuery;\n    }\n    get treeToggleTemplate() {\n        return this._treeToggleTemplateInput || this._treeToggleTemplateQuery;\n    }\n    ngOnChanges() {\n        if (this.isFirstChange) {\n            this.isFirstChange = false;\n        }\n        else {\n            this.columnChangesService.onInputChange();\n        }\n    }\n}\nDataTableColumnDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableColumnDirective, deps: [{ token: ColumnChangesService }], target: i0.ɵɵFactoryTarget.Directive });\nDataTableColumnDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableColumnDirective, selector: \"ngx-datatable-column\", inputs: { name: \"name\", prop: \"prop\", frozenLeft: \"frozenLeft\", frozenRight: \"frozenRight\", flexGrow: \"flexGrow\", resizeable: \"resizeable\", comparator: \"comparator\", pipe: \"pipe\", sortable: \"sortable\", draggable: \"draggable\", canAutoResize: \"canAutoResize\", minWidth: \"minWidth\", width: \"width\", maxWidth: \"maxWidth\", checkboxable: \"checkboxable\", headerCheckboxable: \"headerCheckboxable\", headerClass: \"headerClass\", cellClass: \"cellClass\", isTreeColumn: \"isTreeColumn\", treeLevelIndent: \"treeLevelIndent\", summaryFunc: \"summaryFunc\", summaryTemplate: \"summaryTemplate\", _cellTemplateInput: [\"cellTemplate\", \"_cellTemplateInput\"], _headerTemplateInput: [\"headerTemplate\", \"_headerTemplateInput\"], _treeToggleTemplateInput: [\"treeToggleTemplate\", \"_treeToggleTemplateInput\"] }, queries: [{ propertyName: \"_cellTemplateQuery\", first: true, predicate: DataTableColumnCellDirective, descendants: true, read: TemplateRef, static: true }, { propertyName: \"_headerTemplateQuery\", first: true, predicate: DataTableColumnHeaderDirective, descendants: true, read: TemplateRef, static: true }, { propertyName: \"_treeToggleTemplateQuery\", first: true, predicate: DataTableColumnCellTreeToggle, descendants: true, read: TemplateRef, static: true }], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableColumnDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: 'ngx-datatable-column' }]\n        }], ctorParameters: function () { return [{ type: ColumnChangesService }]; }, propDecorators: { name: [{\n                type: Input\n            }], prop: [{\n                type: Input\n            }], frozenLeft: [{\n                type: Input\n            }], frozenRight: [{\n                type: Input\n            }], flexGrow: [{\n                type: Input\n            }], resizeable: [{\n                type: Input\n            }], comparator: [{\n                type: Input\n            }], pipe: [{\n                type: Input\n            }], sortable: [{\n                type: Input\n            }], draggable: [{\n                type: Input\n            }], canAutoResize: [{\n                type: Input\n            }], minWidth: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], maxWidth: [{\n                type: Input\n            }], checkboxable: [{\n                type: Input\n            }], headerCheckboxable: [{\n                type: Input\n            }], headerClass: [{\n                type: Input\n            }], cellClass: [{\n                type: Input\n            }], isTreeColumn: [{\n                type: Input\n            }], treeLevelIndent: [{\n                type: Input\n            }], summaryFunc: [{\n                type: Input\n            }], summaryTemplate: [{\n                type: Input\n            }], _cellTemplateInput: [{\n                type: Input,\n                args: ['cellTemplate']\n            }], _cellTemplateQuery: [{\n                type: ContentChild,\n                args: [DataTableColumnCellDirective, { read: TemplateRef, static: true }]\n            }], _headerTemplateInput: [{\n                type: Input,\n                args: ['headerTemplate']\n            }], _headerTemplateQuery: [{\n                type: ContentChild,\n                args: [DataTableColumnHeaderDirective, { read: TemplateRef, static: true }]\n            }], _treeToggleTemplateInput: [{\n                type: Input,\n                args: ['treeToggleTemplate']\n            }], _treeToggleTemplateQuery: [{\n                type: ContentChild,\n                args: [DataTableColumnCellTreeToggle, { read: TemplateRef, static: true }]\n            }] } });\n\nclass DatatableRowDetailTemplateDirective {\n    constructor(template) {\n        this.template = template;\n    }\n}\nDatatableRowDetailTemplateDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableRowDetailTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nDatatableRowDetailTemplateDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DatatableRowDetailTemplateDirective, selector: \"[ngx-datatable-row-detail-template]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableRowDetailTemplateDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngx-datatable-row-detail-template]'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\nclass DatatableRowDetailDirective {\n    constructor() {\n        /**\n         * The detail row height is required especially\n         * when virtual scroll is enabled.\n         */\n        this.rowHeight = 0;\n        /**\n         * Row detail row visbility was toggled.\n         */\n        this.toggle = new EventEmitter();\n    }\n    get template() {\n        return this._templateInput || this._templateQuery;\n    }\n    /**\n     * Toggle the expansion of the row\n     */\n    toggleExpandRow(row) {\n        this.toggle.emit({\n            type: 'row',\n            value: row\n        });\n    }\n    /**\n     * API method to expand all the rows.\n     */\n    expandAllRows() {\n        this.toggle.emit({\n            type: 'all',\n            value: true\n        });\n    }\n    /**\n     * API method to collapse all the rows.\n     */\n    collapseAllRows() {\n        this.toggle.emit({\n            type: 'all',\n            value: false\n        });\n    }\n}\nDatatableRowDetailDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableRowDetailDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nDatatableRowDetailDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DatatableRowDetailDirective, selector: \"ngx-datatable-row-detail\", inputs: { rowHeight: \"rowHeight\", _templateInput: [\"template\", \"_templateInput\"] }, outputs: { toggle: \"toggle\" }, queries: [{ propertyName: \"_templateQuery\", first: true, predicate: DatatableRowDetailTemplateDirective, descendants: true, read: TemplateRef, static: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableRowDetailDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: 'ngx-datatable-row-detail' }]\n        }], propDecorators: { rowHeight: [{\n                type: Input\n            }], _templateInput: [{\n                type: Input,\n                args: ['template']\n            }], _templateQuery: [{\n                type: ContentChild,\n                args: [DatatableRowDetailTemplateDirective, { read: TemplateRef, static: true }]\n            }], toggle: [{\n                type: Output\n            }] } });\n\nclass DatatableFooterDirective {\n    get template() {\n        return this._templateInput || this._templateQuery;\n    }\n}\nDatatableFooterDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableFooterDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nDatatableFooterDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DatatableFooterDirective, selector: \"ngx-datatable-footer\", inputs: { footerHeight: \"footerHeight\", totalMessage: \"totalMessage\", selectedMessage: \"selectedMessage\", pagerLeftArrowIcon: \"pagerLeftArrowIcon\", pagerRightArrowIcon: \"pagerRightArrowIcon\", pagerPreviousIcon: \"pagerPreviousIcon\", pagerNextIcon: \"pagerNextIcon\", _templateInput: [\"template\", \"_templateInput\"] }, queries: [{ propertyName: \"_templateQuery\", first: true, predicate: DataTableFooterTemplateDirective, descendants: true, read: TemplateRef }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableFooterDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: 'ngx-datatable-footer' }]\n        }], propDecorators: { footerHeight: [{\n                type: Input\n            }], totalMessage: [{\n                type: Input\n            }], selectedMessage: [{\n                type: Input\n            }], pagerLeftArrowIcon: [{\n                type: Input\n            }], pagerRightArrowIcon: [{\n                type: Input\n            }], pagerPreviousIcon: [{\n                type: Input\n            }], pagerNextIcon: [{\n                type: Input\n            }], _templateInput: [{\n                type: Input,\n                args: ['template']\n            }], _templateQuery: [{\n                type: ContentChild,\n                args: [DataTableFooterTemplateDirective, { read: TemplateRef }]\n            }] } });\n\n/**\n * Returns the columns by pin.\n */\nfunction columnsByPin(cols) {\n    const ret = {\n        left: [],\n        center: [],\n        right: []\n    };\n    if (cols) {\n        for (const col of cols) {\n            if (col.frozenLeft) {\n                ret.left.push(col);\n            }\n            else if (col.frozenRight) {\n                ret.right.push(col);\n            }\n            else {\n                ret.center.push(col);\n            }\n        }\n    }\n    return ret;\n}\n/**\n * Returns the widths of all group sets of a column\n */\nfunction columnGroupWidths(groups, all) {\n    return {\n        left: columnTotalWidth(groups.left),\n        center: columnTotalWidth(groups.center),\n        right: columnTotalWidth(groups.right),\n        total: Math.floor(columnTotalWidth(all))\n    };\n}\n/**\n * Calculates the total width of all columns and their groups\n */\nfunction columnTotalWidth(columns, prop) {\n    let totalWidth = 0;\n    if (columns) {\n        for (const c of columns) {\n            const has = prop && c[prop];\n            const width = has ? c[prop] : c.width;\n            totalWidth = totalWidth + parseFloat(width);\n        }\n    }\n    return totalWidth;\n}\n/**\n * Calculates the total width of all columns and their groups\n */\nfunction columnsTotalWidth(columns, prop) {\n    let totalWidth = 0;\n    for (const column of columns) {\n        const has = prop && column[prop];\n        totalWidth = totalWidth + (has ? column[prop] : column.width);\n    }\n    return totalWidth;\n}\nfunction columnsByPinArr(val) {\n    const colsByPinArr = [];\n    const colsByPin = columnsByPin(val);\n    colsByPinArr.push({ type: 'left', columns: colsByPin['left'] });\n    colsByPinArr.push({ type: 'center', columns: colsByPin['center'] });\n    colsByPinArr.push({ type: 'right', columns: colsByPin['right'] });\n    return colsByPinArr;\n}\n\n/**\n * This object contains the cache of the various row heights that are present inside\n * the data table.   Its based on Fenwick tree data structure that helps with\n * querying sums that have time complexity of log n.\n *\n * Fenwick Tree Credits: http://petr-mitrichev.blogspot.com/2013/05/fenwick-tree-range-updates.html\n * https://github.com/mikolalysenko/fenwick-tree\n *\n */\nclass RowHeightCache {\n    constructor() {\n        /**\n         * Tree Array stores the cumulative information of the row heights to perform efficient\n         * range queries and updates.  Currently the tree is initialized to the base row\n         * height instead of the detail row height.\n         */\n        this.treeArray = [];\n    }\n    /**\n     * Clear the Tree array.\n     */\n    clearCache() {\n        this.treeArray = [];\n    }\n    /**\n     * Initialize the Fenwick tree with row Heights.\n     *\n     * @param rows The array of rows which contain the expanded status.\n     * @param rowHeight The row height.\n     * @param detailRowHeight The detail row height.\n     */\n    initCache(details) {\n        const { rows, rowHeight, detailRowHeight, externalVirtual, rowCount, rowIndexes, rowExpansions } = details;\n        const isFn = typeof rowHeight === 'function';\n        const isDetailFn = typeof detailRowHeight === 'function';\n        if (!isFn && isNaN(rowHeight)) {\n            throw new Error(`Row Height cache initialization failed. Please ensure that 'rowHeight' is a\n        valid number or function value: (${rowHeight}) when 'scrollbarV' is enabled.`);\n        }\n        // Add this additional guard in case detailRowHeight is set to 'auto' as it wont work.\n        if (!isDetailFn && isNaN(detailRowHeight)) {\n            throw new Error(`Row Height cache initialization failed. Please ensure that 'detailRowHeight' is a\n        valid number or function value: (${detailRowHeight}) when 'scrollbarV' is enabled.`);\n        }\n        const n = externalVirtual ? rowCount : rows.length;\n        this.treeArray = new Array(n);\n        for (let i = 0; i < n; ++i) {\n            this.treeArray[i] = 0;\n        }\n        for (let i = 0; i < n; ++i) {\n            const row = rows[i];\n            let currentRowHeight = rowHeight;\n            if (isFn) {\n                currentRowHeight = rowHeight(row);\n            }\n            // Add the detail row height to the already expanded rows.\n            // This is useful for the table that goes through a filter or sort.\n            const expanded = rowExpansions.has(row);\n            if (row && expanded) {\n                if (isDetailFn) {\n                    const index = rowIndexes.get(row);\n                    currentRowHeight += detailRowHeight(row, index);\n                }\n                else {\n                    currentRowHeight += detailRowHeight;\n                }\n            }\n            this.update(i, currentRowHeight);\n        }\n    }\n    /**\n     * Given the ScrollY position i.e. sum, provide the rowIndex\n     * that is present in the current view port.  Below handles edge cases.\n     */\n    getRowIndex(scrollY) {\n        if (scrollY === 0)\n            return 0;\n        return this.calcRowIndex(scrollY);\n    }\n    /**\n     * When a row is expanded or rowHeight is changed, update the height.  This can\n     * be utilized in future when Angular Data table supports dynamic row heights.\n     */\n    update(atRowIndex, byRowHeight) {\n        if (!this.treeArray.length) {\n            throw new Error(`Update at index ${atRowIndex} with value ${byRowHeight} failed:\n        Row Height cache not initialized.`);\n        }\n        const n = this.treeArray.length;\n        atRowIndex |= 0;\n        while (atRowIndex < n) {\n            this.treeArray[atRowIndex] += byRowHeight;\n            atRowIndex |= atRowIndex + 1;\n        }\n    }\n    /**\n     * Range Sum query from 1 to the rowIndex\n     */\n    query(atIndex) {\n        if (!this.treeArray.length) {\n            throw new Error(`query at index ${atIndex} failed: Fenwick tree array not initialized.`);\n        }\n        let sum = 0;\n        atIndex |= 0;\n        while (atIndex >= 0) {\n            sum += this.treeArray[atIndex];\n            atIndex = (atIndex & (atIndex + 1)) - 1;\n        }\n        return sum;\n    }\n    /**\n     * Find the total height between 2 row indexes\n     */\n    queryBetween(atIndexA, atIndexB) {\n        return this.query(atIndexB) - this.query(atIndexA - 1);\n    }\n    /**\n     * Given the ScrollY position i.e. sum, provide the rowIndex\n     * that is present in the current view port.\n     */\n    calcRowIndex(sum) {\n        if (!this.treeArray.length)\n            return 0;\n        let pos = -1;\n        const dataLength = this.treeArray.length;\n        // Get the highest bit for the block size.\n        const highestBit = Math.pow(2, dataLength.toString(2).length - 1);\n        for (let blockSize = highestBit; blockSize !== 0; blockSize >>= 1) {\n            const nextPos = pos + blockSize;\n            if (nextPos < dataLength && sum >= this.treeArray[nextPos]) {\n                sum -= this.treeArray[nextPos];\n                pos = nextPos;\n            }\n        }\n        return pos + 1;\n    }\n}\n\nconst cache = {};\nconst testStyle = typeof document !== 'undefined' ? document.createElement('div').style : undefined;\n// Get Prefix\n// http://davidwalsh.name/vendor-prefix\nconst prefix = (function () {\n    const styles = typeof window !== 'undefined' ? window.getComputedStyle(document.documentElement, '') : undefined;\n    const match = typeof styles !== 'undefined'\n        ? Array.prototype.slice\n            .call(styles)\n            .join('')\n            .match(/-(moz|webkit|ms)-/)\n        : null;\n    const pre = match !== null ? match[1] : undefined;\n    // tslint:disable-next-line: tsr-detect-non-literal-regexp\n    const dom = typeof pre !== 'undefined' ? 'WebKit|Moz|MS|O'.match(new RegExp('(' + pre + ')', 'i'))[1] : undefined;\n    return dom\n        ? {\n            dom,\n            lowercase: pre,\n            css: `-${pre}-`,\n            js: pre[0].toUpperCase() + pre.substr(1)\n        }\n        : undefined;\n})();\nfunction getVendorPrefixedName(property) {\n    const name = camelCase(property);\n    if (!cache[name]) {\n        if (prefix !== undefined && testStyle[prefix.css + property] !== undefined) {\n            cache[name] = prefix.css + property;\n        }\n        else if (testStyle[property] !== undefined) {\n            cache[name] = property;\n        }\n    }\n    return cache[name];\n}\n\n// browser detection and prefixing tools\nconst transform = typeof window !== 'undefined' ? getVendorPrefixedName('transform') : undefined;\nconst backfaceVisibility = typeof window !== 'undefined' ? getVendorPrefixedName('backfaceVisibility') : undefined;\nconst hasCSSTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('transform') : undefined;\nconst hasCSS3DTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('perspective') : undefined;\nconst ua = typeof window !== 'undefined' ? window.navigator.userAgent : 'Chrome';\nconst isSafari = /Safari\\//.test(ua) && !/Chrome\\//.test(ua);\nfunction translateXY(styles, x, y) {\n    if (typeof transform !== 'undefined' && hasCSSTransforms) {\n        if (!isSafari && hasCSS3DTransforms) {\n            styles[transform] = `translate3d(${x}px, ${y}px, 0)`;\n            styles[backfaceVisibility] = 'hidden';\n        }\n        else {\n            styles[camelCase(transform)] = `translate(${x}px, ${y}px)`;\n        }\n    }\n    else {\n        styles.top = `${y}px`;\n        styles.left = `${x}px`;\n    }\n}\n\nclass ProgressBarComponent {\n}\nProgressBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ProgressBarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nProgressBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: ProgressBarComponent, selector: \"datatable-progress\", ngImport: i0, template: `\n    <div class=\"progress-linear\" role=\"progressbar\">\n      <div class=\"container\">\n        <div class=\"bar\"></div>\n      </div>\n    </div>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ProgressBarComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-progress',\n                    template: `\n    <div class=\"progress-linear\" role=\"progressbar\">\n      <div class=\"container\">\n        <div class=\"bar\"></div>\n      </div>\n    </div>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }] });\n\nfunction selectRows(selected, row, comparefn) {\n    const selectedIndex = comparefn(row, selected);\n    if (selectedIndex > -1) {\n        selected.splice(selectedIndex, 1);\n    }\n    else {\n        selected.push(row);\n    }\n    return selected;\n}\nfunction selectRowsBetween(selected, rows, index, prevIndex, comparefn) {\n    const reverse = index < prevIndex;\n    for (let i = 0; i < rows.length; i++) {\n        const row = rows[i];\n        const greater = i >= prevIndex && i <= index;\n        const lesser = i <= prevIndex && i >= index;\n        let range = { start: 0, end: 0 };\n        if (reverse) {\n            range = {\n                start: index,\n                end: prevIndex\n            };\n        }\n        else {\n            range = {\n                start: prevIndex,\n                end: index + 1\n            };\n        }\n        if ((reverse && lesser) || (!reverse && greater)) {\n            // if in the positive range to be added to `selected`, and\n            // not already in the selected array, add it\n            if (i >= range.start && i <= range.end) {\n                selected.push(row);\n            }\n        }\n    }\n    return selected;\n}\n\nvar Keys;\n(function (Keys) {\n    Keys[Keys[\"up\"] = 38] = \"up\";\n    Keys[Keys[\"down\"] = 40] = \"down\";\n    Keys[Keys[\"return\"] = 13] = \"return\";\n    Keys[Keys[\"escape\"] = 27] = \"escape\";\n    Keys[Keys[\"left\"] = 37] = \"left\";\n    Keys[Keys[\"right\"] = 39] = \"right\";\n})(Keys || (Keys = {}));\n\nclass DataTableSelectionComponent {\n    constructor() {\n        this.activate = new EventEmitter();\n        this.select = new EventEmitter();\n    }\n    selectRow(event, index, row) {\n        if (!this.selectEnabled)\n            return;\n        const chkbox = this.selectionType === SelectionType.checkbox;\n        const multi = this.selectionType === SelectionType.multi;\n        const multiClick = this.selectionType === SelectionType.multiClick;\n        let selected = [];\n        if (multi || chkbox || multiClick) {\n            if (event.shiftKey) {\n                selected = selectRowsBetween([], this.rows, index, this.prevIndex, this.getRowSelectedIdx.bind(this));\n            }\n            else if (event.ctrlKey || event.metaKey || multiClick || chkbox) {\n                selected = selectRows([...this.selected], row, this.getRowSelectedIdx.bind(this));\n            }\n            else {\n                selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\n            }\n        }\n        else {\n            selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\n        }\n        if (typeof this.selectCheck === 'function') {\n            selected = selected.filter(this.selectCheck.bind(this));\n        }\n        this.selected.splice(0, this.selected.length);\n        this.selected.push(...selected);\n        this.prevIndex = index;\n        this.select.emit({\n            selected\n        });\n    }\n    onActivate(model, index) {\n        const { type, event, row } = model;\n        const chkbox = this.selectionType === SelectionType.checkbox;\n        const select = (!chkbox && (type === 'click' || type === 'dblclick')) || (chkbox && type === 'checkbox');\n        if (select) {\n            this.selectRow(event, index, row);\n        }\n        else if (type === 'keydown') {\n            if (event.keyCode === Keys.return) {\n                this.selectRow(event, index, row);\n            }\n            else {\n                this.onKeyboardFocus(model);\n            }\n        }\n        this.activate.emit(model);\n    }\n    onKeyboardFocus(model) {\n        const { keyCode } = model.event;\n        const shouldFocus = keyCode === Keys.up || keyCode === Keys.down || keyCode === Keys.right || keyCode === Keys.left;\n        if (shouldFocus) {\n            const isCellSelection = this.selectionType === SelectionType.cell;\n            if (!model.cellElement || !isCellSelection) {\n                this.focusRow(model.rowElement, keyCode);\n            }\n            else if (isCellSelection) {\n                this.focusCell(model.cellElement, model.rowElement, keyCode, model.cellIndex);\n            }\n        }\n    }\n    focusRow(rowElement, keyCode) {\n        const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\n        if (nextRowElement)\n            nextRowElement.focus();\n    }\n    getPrevNextRow(rowElement, keyCode) {\n        const parentElement = rowElement.parentElement;\n        if (parentElement) {\n            let focusElement;\n            if (keyCode === Keys.up) {\n                focusElement = parentElement.previousElementSibling;\n            }\n            else if (keyCode === Keys.down) {\n                focusElement = parentElement.nextElementSibling;\n            }\n            if (focusElement && focusElement.children.length) {\n                return focusElement.children[0];\n            }\n        }\n    }\n    focusCell(cellElement, rowElement, keyCode, cellIndex) {\n        let nextCellElement;\n        if (keyCode === Keys.left) {\n            nextCellElement = cellElement.previousElementSibling;\n        }\n        else if (keyCode === Keys.right) {\n            nextCellElement = cellElement.nextElementSibling;\n        }\n        else if (keyCode === Keys.up || keyCode === Keys.down) {\n            const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\n            if (nextRowElement) {\n                const children = nextRowElement.getElementsByClassName('datatable-body-cell');\n                if (children.length)\n                    nextCellElement = children[cellIndex];\n            }\n        }\n        if (nextCellElement)\n            nextCellElement.focus();\n    }\n    getRowSelected(row) {\n        return this.getRowSelectedIdx(row, this.selected) > -1;\n    }\n    getRowSelectedIdx(row, selected) {\n        if (!selected || !selected.length)\n            return -1;\n        const rowId = this.rowIdentity(row);\n        return selected.findIndex(r => {\n            const id = this.rowIdentity(r);\n            return id === rowId;\n        });\n    }\n}\nDataTableSelectionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableSelectionComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nDataTableSelectionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableSelectionComponent, selector: \"datatable-selection\", inputs: { rows: \"rows\", selected: \"selected\", selectEnabled: \"selectEnabled\", selectionType: \"selectionType\", rowIdentity: \"rowIdentity\", selectCheck: \"selectCheck\" }, outputs: { activate: \"activate\", select: \"select\" }, ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableSelectionComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-selection',\n                    template: ` <ng-content></ng-content> `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { rows: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], selectEnabled: [{\n                type: Input\n            }], selectionType: [{\n                type: Input\n            }], rowIdentity: [{\n                type: Input\n            }], selectCheck: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], select: [{\n                type: Output\n            }] } });\n\nvar SortDirection;\n(function (SortDirection) {\n    SortDirection[\"asc\"] = \"asc\";\n    SortDirection[\"desc\"] = \"desc\";\n})(SortDirection || (SortDirection = {}));\n\nclass DataTableBodyCellComponent {\n    constructor(element, cd) {\n        this.cd = cd;\n        this.activate = new EventEmitter();\n        this.treeAction = new EventEmitter();\n        this.isFocused = false;\n        this.onCheckboxChangeFn = this.onCheckboxChange.bind(this);\n        this.activateFn = this.activate.emit.bind(this.activate);\n        this.cellContext = {\n            onCheckboxChangeFn: this.onCheckboxChangeFn,\n            activateFn: this.activateFn,\n            row: this.row,\n            group: this.group,\n            value: this.value,\n            column: this.column,\n            rowHeight: this.rowHeight,\n            isSelected: this.isSelected,\n            rowIndex: this.rowIndex,\n            treeStatus: this.treeStatus,\n            onTreeAction: this.onTreeAction.bind(this)\n        };\n        this._element = element.nativeElement;\n    }\n    set group(group) {\n        this._group = group;\n        this.cellContext.group = group;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    get group() {\n        return this._group;\n    }\n    set rowHeight(val) {\n        this._rowHeight = val;\n        this.cellContext.rowHeight = val;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    get rowHeight() {\n        return this._rowHeight;\n    }\n    set isSelected(val) {\n        this._isSelected = val;\n        this.cellContext.isSelected = val;\n        this.cd.markForCheck();\n    }\n    get isSelected() {\n        return this._isSelected;\n    }\n    set expanded(val) {\n        this._expanded = val;\n        this.cellContext.expanded = val;\n        this.cd.markForCheck();\n    }\n    get expanded() {\n        return this._expanded;\n    }\n    set rowIndex(val) {\n        this._rowIndex = val;\n        this.cellContext.rowIndex = val;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    get rowIndex() {\n        return this._rowIndex;\n    }\n    set column(column) {\n        this._column = column;\n        this.cellContext.column = column;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    get column() {\n        return this._column;\n    }\n    set row(row) {\n        this._row = row;\n        this.cellContext.row = row;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    get row() {\n        return this._row;\n    }\n    set sorts(val) {\n        this._sorts = val;\n        this.calcSortDir = this.calcSortDir(val);\n    }\n    get sorts() {\n        return this._sorts;\n    }\n    set treeStatus(status) {\n        if (status !== 'collapsed' && status !== 'expanded' && status !== 'loading' && status !== 'disabled') {\n            this._treeStatus = 'collapsed';\n        }\n        else {\n            this._treeStatus = status;\n        }\n        this.cellContext.treeStatus = this._treeStatus;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    get treeStatus() {\n        return this._treeStatus;\n    }\n    get columnCssClasses() {\n        let cls = 'datatable-body-cell';\n        if (this.column.cellClass) {\n            if (typeof this.column.cellClass === 'string') {\n                cls += ' ' + this.column.cellClass;\n            }\n            else if (typeof this.column.cellClass === 'function') {\n                const res = this.column.cellClass({\n                    row: this.row,\n                    group: this.group,\n                    column: this.column,\n                    value: this.value,\n                    rowHeight: this.rowHeight\n                });\n                if (typeof res === 'string') {\n                    cls += ' ' + res;\n                }\n                else if (typeof res === 'object') {\n                    const keys = Object.keys(res);\n                    for (const k of keys) {\n                        if (res[k] === true) {\n                            cls += ` ${k}`;\n                        }\n                    }\n                }\n            }\n        }\n        if (!this.sortDir) {\n            cls += ' sort-active';\n        }\n        if (this.isFocused) {\n            cls += ' active';\n        }\n        if (this.sortDir === SortDirection.asc) {\n            cls += ' sort-asc';\n        }\n        if (this.sortDir === SortDirection.desc) {\n            cls += ' sort-desc';\n        }\n        return cls;\n    }\n    get width() {\n        return this.column.width;\n    }\n    get minWidth() {\n        return this.column.minWidth;\n    }\n    get maxWidth() {\n        return this.column.maxWidth;\n    }\n    get height() {\n        const height = this.rowHeight;\n        if (isNaN(height)) {\n            return height;\n        }\n        return height + 'px';\n    }\n    ngDoCheck() {\n        this.checkValueUpdates();\n    }\n    ngOnDestroy() {\n        if (this.cellTemplate) {\n            this.cellTemplate.clear();\n        }\n    }\n    checkValueUpdates() {\n        let value = '';\n        if (!this.row || !this.column) {\n            value = '';\n        }\n        else {\n            const val = this.column.$$valueGetter(this.row, this.column.prop);\n            const userPipe = this.column.pipe;\n            if (userPipe) {\n                value = userPipe.transform(val);\n            }\n            else if (value !== undefined) {\n                value = val;\n            }\n        }\n        if (this.value !== value) {\n            this.value = value;\n            this.cellContext.value = value;\n            this.sanitizedValue = value !== null && value !== undefined ? this.stripHtml(value) : value;\n            this.cd.markForCheck();\n        }\n    }\n    onFocus() {\n        this.isFocused = true;\n    }\n    onBlur() {\n        this.isFocused = false;\n    }\n    onClick(event) {\n        this.activate.emit({\n            type: 'click',\n            event,\n            row: this.row,\n            group: this.group,\n            rowHeight: this.rowHeight,\n            column: this.column,\n            value: this.value,\n            cellElement: this._element\n        });\n    }\n    onDblClick(event) {\n        this.activate.emit({\n            type: 'dblclick',\n            event,\n            row: this.row,\n            group: this.group,\n            rowHeight: this.rowHeight,\n            column: this.column,\n            value: this.value,\n            cellElement: this._element\n        });\n    }\n    onKeyDown(event) {\n        const keyCode = event.keyCode;\n        const isTargetCell = event.target === this._element;\n        const isAction = keyCode === Keys.return ||\n            keyCode === Keys.down ||\n            keyCode === Keys.up ||\n            keyCode === Keys.left ||\n            keyCode === Keys.right;\n        if (isAction && isTargetCell) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.activate.emit({\n                type: 'keydown',\n                event,\n                row: this.row,\n                group: this.group,\n                rowHeight: this.rowHeight,\n                column: this.column,\n                value: this.value,\n                cellElement: this._element\n            });\n        }\n    }\n    onCheckboxChange(event) {\n        this.activate.emit({\n            type: 'checkbox',\n            event,\n            row: this.row,\n            group: this.group,\n            rowHeight: this.rowHeight,\n            column: this.column,\n            value: this.value,\n            cellElement: this._element,\n            treeStatus: 'collapsed'\n        });\n    }\n    calcSortDir(sorts) {\n        if (!sorts) {\n            return;\n        }\n        const sort = sorts.find((s) => {\n            return s.prop === this.column.prop;\n        });\n        if (sort) {\n            return sort.dir;\n        }\n    }\n    stripHtml(html) {\n        if (!html.replace) {\n            return html;\n        }\n        return html.replace(/<\\/?[^>]+(>|$)/g, '');\n    }\n    onTreeAction() {\n        this.treeAction.emit(this.row);\n    }\n    calcLeftMargin(column, row) {\n        const levelIndent = column.treeLevelIndent != null ? column.treeLevelIndent : 50;\n        return column.isTreeColumn ? row.level * levelIndent : 0;\n    }\n}\nDataTableBodyCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableBodyCellComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nDataTableBodyCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableBodyCellComponent, selector: \"datatable-body-cell\", inputs: { displayCheck: \"displayCheck\", group: \"group\", rowHeight: \"rowHeight\", isSelected: \"isSelected\", expanded: \"expanded\", rowIndex: \"rowIndex\", column: \"column\", row: \"row\", sorts: \"sorts\", treeStatus: \"treeStatus\" }, outputs: { activate: \"activate\", treeAction: \"treeAction\" }, host: { listeners: { \"focus\": \"onFocus()\", \"blur\": \"onBlur()\", \"click\": \"onClick($event)\", \"dblclick\": \"onDblClick($event)\", \"keydown\": \"onKeyDown($event)\" }, properties: { \"class\": \"this.columnCssClasses\", \"style.width.px\": \"this.width\", \"style.minWidth.px\": \"this.minWidth\", \"style.maxWidth.px\": \"this.maxWidth\", \"style.height\": \"this.height\" } }, viewQueries: [{ propertyName: \"cellTemplate\", first: true, predicate: [\"cellTemplate\"], descendants: true, read: ViewContainerRef, static: true }], ngImport: i0, template: `\n    <div class=\"datatable-body-cell-label\" [style.margin-left.px]=\"calcLeftMargin(column, row)\">\n      <label\n        *ngIf=\"column.checkboxable && (!displayCheck || displayCheck(row, column, value))\"\n        class=\"datatable-checkbox\"\n      >\n        <input type=\"checkbox\" [checked]=\"isSelected\" (click)=\"onCheckboxChange($event)\" />\n      </label>\n      <ng-container *ngIf=\"column.isTreeColumn\">\n        <button\n          *ngIf=\"!column.treeToggleTemplate\"\n          class=\"datatable-tree-button\"\n          [disabled]=\"treeStatus === 'disabled'\"\n          (click)=\"onTreeAction()\"\n        >\n          <span>\n            <i *ngIf=\"treeStatus === 'loading'\" class=\"icon datatable-icon-collapse\"></i>\n            <i *ngIf=\"treeStatus === 'collapsed'\" class=\"icon datatable-icon-up\"></i>\n            <i *ngIf=\"treeStatus === 'expanded' || treeStatus === 'disabled'\" class=\"icon datatable-icon-down\"></i>\n          </span>\n        </button>\n        <ng-template\n          *ngIf=\"column.treeToggleTemplate\"\n          [ngTemplateOutlet]=\"column.treeToggleTemplate\"\n          [ngTemplateOutletContext]=\"{ cellContext: cellContext }\"\n        >\n        </ng-template>\n      </ng-container>\n\n      <span *ngIf=\"!column.cellTemplate\" [title]=\"sanitizedValue\" [innerHTML]=\"value\"> </span>\n      <ng-template\n        #cellTemplate\n        *ngIf=\"column.cellTemplate\"\n        [ngTemplateOutlet]=\"column.cellTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n    </div>\n  `, isInline: true, directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableBodyCellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-body-cell',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: `\n    <div class=\"datatable-body-cell-label\" [style.margin-left.px]=\"calcLeftMargin(column, row)\">\n      <label\n        *ngIf=\"column.checkboxable && (!displayCheck || displayCheck(row, column, value))\"\n        class=\"datatable-checkbox\"\n      >\n        <input type=\"checkbox\" [checked]=\"isSelected\" (click)=\"onCheckboxChange($event)\" />\n      </label>\n      <ng-container *ngIf=\"column.isTreeColumn\">\n        <button\n          *ngIf=\"!column.treeToggleTemplate\"\n          class=\"datatable-tree-button\"\n          [disabled]=\"treeStatus === 'disabled'\"\n          (click)=\"onTreeAction()\"\n        >\n          <span>\n            <i *ngIf=\"treeStatus === 'loading'\" class=\"icon datatable-icon-collapse\"></i>\n            <i *ngIf=\"treeStatus === 'collapsed'\" class=\"icon datatable-icon-up\"></i>\n            <i *ngIf=\"treeStatus === 'expanded' || treeStatus === 'disabled'\" class=\"icon datatable-icon-down\"></i>\n          </span>\n        </button>\n        <ng-template\n          *ngIf=\"column.treeToggleTemplate\"\n          [ngTemplateOutlet]=\"column.treeToggleTemplate\"\n          [ngTemplateOutletContext]=\"{ cellContext: cellContext }\"\n        >\n        </ng-template>\n      </ng-container>\n\n      <span *ngIf=\"!column.cellTemplate\" [title]=\"sanitizedValue\" [innerHTML]=\"value\"> </span>\n      <ng-template\n        #cellTemplate\n        *ngIf=\"column.cellTemplate\"\n        [ngTemplateOutlet]=\"column.cellTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n    </div>\n  `\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { displayCheck: [{\n                type: Input\n            }], group: [{\n                type: Input\n            }], rowHeight: [{\n                type: Input\n            }], isSelected: [{\n                type: Input\n            }], expanded: [{\n                type: Input\n            }], rowIndex: [{\n                type: Input\n            }], column: [{\n                type: Input\n            }], row: [{\n                type: Input\n            }], sorts: [{\n                type: Input\n            }], treeStatus: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], treeAction: [{\n                type: Output\n            }], cellTemplate: [{\n                type: ViewChild,\n                args: ['cellTemplate', { read: ViewContainerRef, static: true }]\n            }], columnCssClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], width: [{\n                type: HostBinding,\n                args: ['style.width.px']\n            }], minWidth: [{\n                type: HostBinding,\n                args: ['style.minWidth.px']\n            }], maxWidth: [{\n                type: HostBinding,\n                args: ['style.maxWidth.px']\n            }], height: [{\n                type: HostBinding,\n                args: ['style.height']\n            }], onFocus: [{\n                type: HostListener,\n                args: ['focus']\n            }], onBlur: [{\n                type: HostListener,\n                args: ['blur']\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onDblClick: [{\n                type: HostListener,\n                args: ['dblclick', ['$event']]\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\n\nclass DataTableBodyRowComponent {\n    constructor(differs, scrollbarHelper, cd, element) {\n        this.differs = differs;\n        this.scrollbarHelper = scrollbarHelper;\n        this.cd = cd;\n        this.treeStatus = 'collapsed';\n        this.activate = new EventEmitter();\n        this.treeAction = new EventEmitter();\n        this._groupStyles = {\n            left: {},\n            center: {},\n            right: {}\n        };\n        this._element = element.nativeElement;\n        this._rowDiffer = differs.find({}).create();\n    }\n    set columns(val) {\n        this._columns = val;\n        this.recalculateColumns(val);\n        this.buildStylesByGroup();\n    }\n    get columns() {\n        return this._columns;\n    }\n    set innerWidth(val) {\n        if (this._columns) {\n            const colByPin = columnsByPin(this._columns);\n            this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\n        }\n        this._innerWidth = val;\n        this.recalculateColumns();\n        this.buildStylesByGroup();\n    }\n    get innerWidth() {\n        return this._innerWidth;\n    }\n    set offsetX(val) {\n        this._offsetX = val;\n        this.buildStylesByGroup();\n    }\n    get offsetX() {\n        return this._offsetX;\n    }\n    get cssClass() {\n        let cls = 'datatable-body-row';\n        if (this.isSelected) {\n            cls += ' active';\n        }\n        if (this.rowIndex % 2 !== 0) {\n            cls += ' datatable-row-odd';\n        }\n        if (this.rowIndex % 2 === 0) {\n            cls += ' datatable-row-even';\n        }\n        if (this.rowClass) {\n            const res = this.rowClass(this.row);\n            if (typeof res === 'string') {\n                cls += ` ${res}`;\n            }\n            else if (typeof res === 'object') {\n                const keys = Object.keys(res);\n                for (const k of keys) {\n                    if (res[k] === true) {\n                        cls += ` ${k}`;\n                    }\n                }\n            }\n        }\n        return cls;\n    }\n    get columnsTotalWidths() {\n        return this._columnGroupWidths.total;\n    }\n    ngDoCheck() {\n        if (this._rowDiffer.diff(this.row)) {\n            this.cd.markForCheck();\n        }\n    }\n    trackByGroups(index, colGroup) {\n        return colGroup.type;\n    }\n    columnTrackingFn(index, column) {\n        return column.$$id;\n    }\n    buildStylesByGroup() {\n        this._groupStyles.left = this.calcStylesByGroup('left');\n        this._groupStyles.center = this.calcStylesByGroup('center');\n        this._groupStyles.right = this.calcStylesByGroup('right');\n        this.cd.markForCheck();\n    }\n    calcStylesByGroup(group) {\n        const widths = this._columnGroupWidths;\n        const offsetX = this.offsetX;\n        const styles = {\n            width: `${widths[group]}px`\n        };\n        if (group === 'left') {\n            translateXY(styles, offsetX, 0);\n        }\n        else if (group === 'right') {\n            const bodyWidth = parseInt(this.innerWidth + '', 0);\n            const totalDiff = widths.total - bodyWidth;\n            const offsetDiff = totalDiff - offsetX;\n            const offset = (offsetDiff + this.scrollbarHelper.width) * -1;\n            translateXY(styles, offset, 0);\n        }\n        return styles;\n    }\n    onActivate(event, index) {\n        event.cellIndex = index;\n        event.rowElement = this._element;\n        this.activate.emit(event);\n    }\n    onKeyDown(event) {\n        const keyCode = event.keyCode;\n        const isTargetRow = event.target === this._element;\n        const isAction = keyCode === Keys.return ||\n            keyCode === Keys.down ||\n            keyCode === Keys.up ||\n            keyCode === Keys.left ||\n            keyCode === Keys.right;\n        if (isAction && isTargetRow) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.activate.emit({\n                type: 'keydown',\n                event,\n                row: this.row,\n                rowElement: this._element\n            });\n        }\n    }\n    onMouseenter(event) {\n        this.activate.emit({\n            type: 'mouseenter',\n            event,\n            row: this.row,\n            rowElement: this._element\n        });\n    }\n    recalculateColumns(val = this.columns) {\n        this._columns = val;\n        const colsByPin = columnsByPin(this._columns);\n        this._columnsByPin = columnsByPinArr(this._columns);\n        this._columnGroupWidths = columnGroupWidths(colsByPin, this._columns);\n    }\n    onTreeAction() {\n        this.treeAction.emit();\n    }\n}\nDataTableBodyRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableBodyRowComponent, deps: [{ token: i0.KeyValueDiffers }, { token: ScrollbarHelper, skipSelf: true }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nDataTableBodyRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableBodyRowComponent, selector: \"datatable-body-row\", inputs: { columns: \"columns\", innerWidth: \"innerWidth\", expanded: \"expanded\", rowClass: \"rowClass\", row: \"row\", group: \"group\", isSelected: \"isSelected\", rowIndex: \"rowIndex\", displayCheck: \"displayCheck\", treeStatus: \"treeStatus\", offsetX: \"offsetX\", rowHeight: \"rowHeight\" }, outputs: { activate: \"activate\", treeAction: \"treeAction\" }, host: { listeners: { \"keydown\": \"onKeyDown($event)\", \"mouseenter\": \"onMouseenter($event)\" }, properties: { \"class\": \"this.cssClass\", \"style.height.px\": \"this.rowHeight\", \"style.width.px\": \"this.columnsTotalWidths\" } }, ngImport: i0, template: `\n    <div\n      *ngFor=\"let colGroup of _columnsByPin; let i = index; trackBy: trackByGroups\"\n      class=\"datatable-row-{{ colGroup.type }} datatable-row-group\"\n      [ngStyle]=\"_groupStyles[colGroup.type]\"\n    >\n      <datatable-body-cell\n        role=\"cell\"\n        *ngFor=\"let column of colGroup.columns; let ii = index; trackBy: columnTrackingFn\"\n        tabindex=\"-1\"\n        [row]=\"row\"\n        [group]=\"group\"\n        [expanded]=\"expanded\"\n        [isSelected]=\"isSelected\"\n        [rowIndex]=\"rowIndex\"\n        [column]=\"column\"\n        [rowHeight]=\"rowHeight\"\n        [displayCheck]=\"displayCheck\"\n        [treeStatus]=\"treeStatus\"\n        (activate)=\"onActivate($event, ii)\"\n        (treeAction)=\"onTreeAction()\"\n      >\n      </datatable-body-cell>\n    </div>\n  `, isInline: true, components: [{ type: DataTableBodyCellComponent, selector: \"datatable-body-cell\", inputs: [\"displayCheck\", \"group\", \"rowHeight\", \"isSelected\", \"expanded\", \"rowIndex\", \"column\", \"row\", \"sorts\", \"treeStatus\"], outputs: [\"activate\", \"treeAction\"] }], directives: [{ type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i1.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableBodyRowComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-body-row',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: `\n    <div\n      *ngFor=\"let colGroup of _columnsByPin; let i = index; trackBy: trackByGroups\"\n      class=\"datatable-row-{{ colGroup.type }} datatable-row-group\"\n      [ngStyle]=\"_groupStyles[colGroup.type]\"\n    >\n      <datatable-body-cell\n        role=\"cell\"\n        *ngFor=\"let column of colGroup.columns; let ii = index; trackBy: columnTrackingFn\"\n        tabindex=\"-1\"\n        [row]=\"row\"\n        [group]=\"group\"\n        [expanded]=\"expanded\"\n        [isSelected]=\"isSelected\"\n        [rowIndex]=\"rowIndex\"\n        [column]=\"column\"\n        [rowHeight]=\"rowHeight\"\n        [displayCheck]=\"displayCheck\"\n        [treeStatus]=\"treeStatus\"\n        (activate)=\"onActivate($event, ii)\"\n        (treeAction)=\"onTreeAction()\"\n      >\n      </datatable-body-cell>\n    </div>\n  `\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.KeyValueDiffers }, { type: ScrollbarHelper, decorators: [{\n                        type: SkipSelf\n                    }] }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }];\n    }, propDecorators: { columns: [{\n                type: Input\n            }], innerWidth: [{\n                type: Input\n            }], expanded: [{\n                type: Input\n            }], rowClass: [{\n                type: Input\n            }], row: [{\n                type: Input\n            }], group: [{\n                type: Input\n            }], isSelected: [{\n                type: Input\n            }], rowIndex: [{\n                type: Input\n            }], displayCheck: [{\n                type: Input\n            }], treeStatus: [{\n                type: Input\n            }], offsetX: [{\n                type: Input\n            }], cssClass: [{\n                type: HostBinding,\n                args: ['class']\n            }], rowHeight: [{\n                type: HostBinding,\n                args: ['style.height.px']\n            }, {\n                type: Input\n            }], columnsTotalWidths: [{\n                type: HostBinding,\n                args: ['style.width.px']\n            }], activate: [{\n                type: Output\n            }], treeAction: [{\n                type: Output\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }], onMouseenter: [{\n                type: HostListener,\n                args: ['mouseenter', ['$event']]\n            }] } });\n\nfunction defaultSumFunc(cells) {\n    const cellsWithValues = cells.filter(cell => !!cell);\n    if (!cellsWithValues.length) {\n        return null;\n    }\n    if (cellsWithValues.some(cell => typeof cell !== 'number')) {\n        return null;\n    }\n    return cellsWithValues.reduce((res, cell) => res + cell);\n}\nfunction noopSumFunc(cells) {\n    return null;\n}\nclass DataTableSummaryRowComponent {\n    constructor() {\n        this.summaryRow = {};\n    }\n    ngOnChanges() {\n        if (!this.columns || !this.rows) {\n            return;\n        }\n        this.updateInternalColumns();\n        this.updateValues();\n    }\n    updateInternalColumns() {\n        this._internalColumns = this.columns.map(col => (Object.assign(Object.assign({}, col), { cellTemplate: col.summaryTemplate })));\n    }\n    updateValues() {\n        this.summaryRow = {};\n        this.columns\n            .filter(col => !col.summaryTemplate)\n            .forEach(col => {\n            const cellsFromSingleColumn = this.rows.map(row => row[col.prop]);\n            const sumFunc = this.getSummaryFunction(col);\n            this.summaryRow[col.prop] = col.pipe\n                ? col.pipe.transform(sumFunc(cellsFromSingleColumn))\n                : sumFunc(cellsFromSingleColumn);\n        });\n    }\n    getSummaryFunction(column) {\n        if (column.summaryFunc === undefined) {\n            return defaultSumFunc;\n        }\n        else if (column.summaryFunc === null) {\n            return noopSumFunc;\n        }\n        else {\n            return column.summaryFunc;\n        }\n    }\n}\nDataTableSummaryRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableSummaryRowComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nDataTableSummaryRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableSummaryRowComponent, selector: \"datatable-summary-row\", inputs: { rows: \"rows\", columns: \"columns\", rowHeight: \"rowHeight\", offsetX: \"offsetX\", innerWidth: \"innerWidth\" }, host: { classAttribute: \"datatable-summary-row\" }, usesOnChanges: true, ngImport: i0, template: `\n    <datatable-body-row\n      *ngIf=\"summaryRow && _internalColumns\"\n      tabindex=\"-1\"\n      [innerWidth]=\"innerWidth\"\n      [offsetX]=\"offsetX\"\n      [columns]=\"_internalColumns\"\n      [rowHeight]=\"rowHeight\"\n      [row]=\"summaryRow\"\n      [rowIndex]=\"-1\"\n    >\n    </datatable-body-row>\n  `, isInline: true, components: [{ type: DataTableBodyRowComponent, selector: \"datatable-body-row\", inputs: [\"columns\", \"innerWidth\", \"expanded\", \"rowClass\", \"row\", \"group\", \"isSelected\", \"rowIndex\", \"displayCheck\", \"treeStatus\", \"offsetX\", \"rowHeight\"], outputs: [\"activate\", \"treeAction\"] }], directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableSummaryRowComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-summary-row',\n                    template: `\n    <datatable-body-row\n      *ngIf=\"summaryRow && _internalColumns\"\n      tabindex=\"-1\"\n      [innerWidth]=\"innerWidth\"\n      [offsetX]=\"offsetX\"\n      [columns]=\"_internalColumns\"\n      [rowHeight]=\"rowHeight\"\n      [row]=\"summaryRow\"\n      [rowIndex]=\"-1\"\n    >\n    </datatable-body-row>\n  `,\n                    host: {\n                        class: 'datatable-summary-row'\n                    }\n                }]\n        }], propDecorators: { rows: [{\n                type: Input\n            }], columns: [{\n                type: Input\n            }], rowHeight: [{\n                type: Input\n            }], offsetX: [{\n                type: Input\n            }], innerWidth: [{\n                type: Input\n            }] } });\n\nclass DataTableRowWrapperComponent {\n    constructor(cd, differs) {\n        this.cd = cd;\n        this.differs = differs;\n        this.rowContextmenu = new EventEmitter(false);\n        this._expanded = false;\n        this.groupContext = {\n            group: this.row,\n            expanded: this.expanded,\n            rowIndex: this.rowIndex\n        };\n        this.rowContext = {\n            row: this.row,\n            expanded: this.expanded,\n            rowIndex: this.rowIndex\n        };\n        this.rowDiffer = differs.find({}).create();\n    }\n    set rowIndex(val) {\n        this._rowIndex = val;\n        this.rowContext.rowIndex = val;\n        this.groupContext.rowIndex = val;\n        this.cd.markForCheck();\n    }\n    get rowIndex() {\n        return this._rowIndex;\n    }\n    set expanded(val) {\n        this._expanded = val;\n        this.groupContext.expanded = val;\n        this.rowContext.expanded = val;\n        this.cd.markForCheck();\n    }\n    get expanded() {\n        return this._expanded;\n    }\n    ngDoCheck() {\n        if (this.rowDiffer.diff(this.row)) {\n            this.rowContext.row = this.row;\n            this.groupContext.group = this.row;\n            this.cd.markForCheck();\n        }\n    }\n    onContextmenu($event) {\n        this.rowContextmenu.emit({ event: $event, row: this.row });\n    }\n    getGroupHeaderStyle() {\n        const styles = {};\n        styles['transform'] = 'translate3d(' + this.offsetX + 'px, 0px, 0px)';\n        styles['backface-visibility'] = 'hidden';\n        styles['width'] = this.innerWidth;\n        return styles;\n    }\n}\nDataTableRowWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableRowWrapperComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.KeyValueDiffers }], target: i0.ɵɵFactoryTarget.Component });\nDataTableRowWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableRowWrapperComponent, selector: \"datatable-row-wrapper\", inputs: { innerWidth: \"innerWidth\", rowDetail: \"rowDetail\", groupHeader: \"groupHeader\", offsetX: \"offsetX\", detailRowHeight: \"detailRowHeight\", row: \"row\", groupedRows: \"groupedRows\", rowIndex: \"rowIndex\", expanded: \"expanded\" }, outputs: { rowContextmenu: \"rowContextmenu\" }, host: { listeners: { \"contextmenu\": \"onContextmenu($event)\" }, classAttribute: \"datatable-row-wrapper\" }, ngImport: i0, template: `\n    <div *ngIf=\"groupHeader && groupHeader.template\" class=\"datatable-group-header\" [ngStyle]=\"getGroupHeaderStyle()\">\n      <ng-template\n        *ngIf=\"groupHeader && groupHeader.template\"\n        [ngTemplateOutlet]=\"groupHeader.template\"\n        [ngTemplateOutletContext]=\"groupContext\"\n      >\n      </ng-template>\n    </div>\n    <ng-content *ngIf=\"(groupHeader && groupHeader.template && expanded) || !groupHeader || !groupHeader.template\">\n    </ng-content>\n    <div\n      *ngIf=\"rowDetail && rowDetail.template && expanded\"\n      [style.height.px]=\"detailRowHeight\"\n      class=\"datatable-row-detail\"\n    >\n      <ng-template\n        *ngIf=\"rowDetail && rowDetail.template\"\n        [ngTemplateOutlet]=\"rowDetail.template\"\n        [ngTemplateOutletContext]=\"rowContext\"\n      >\n      </ng-template>\n    </div>\n  `, isInline: true, directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableRowWrapperComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-row-wrapper',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: `\n    <div *ngIf=\"groupHeader && groupHeader.template\" class=\"datatable-group-header\" [ngStyle]=\"getGroupHeaderStyle()\">\n      <ng-template\n        *ngIf=\"groupHeader && groupHeader.template\"\n        [ngTemplateOutlet]=\"groupHeader.template\"\n        [ngTemplateOutletContext]=\"groupContext\"\n      >\n      </ng-template>\n    </div>\n    <ng-content *ngIf=\"(groupHeader && groupHeader.template && expanded) || !groupHeader || !groupHeader.template\">\n    </ng-content>\n    <div\n      *ngIf=\"rowDetail && rowDetail.template && expanded\"\n      [style.height.px]=\"detailRowHeight\"\n      class=\"datatable-row-detail\"\n    >\n      <ng-template\n        *ngIf=\"rowDetail && rowDetail.template\"\n        [ngTemplateOutlet]=\"rowDetail.template\"\n        [ngTemplateOutletContext]=\"rowContext\"\n      >\n      </ng-template>\n    </div>\n  `,\n                    host: {\n                        class: 'datatable-row-wrapper'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.KeyValueDiffers }]; }, propDecorators: { innerWidth: [{\n                type: Input\n            }], rowDetail: [{\n                type: Input\n            }], groupHeader: [{\n                type: Input\n            }], offsetX: [{\n                type: Input\n            }], detailRowHeight: [{\n                type: Input\n            }], row: [{\n                type: Input\n            }], groupedRows: [{\n                type: Input\n            }], rowContextmenu: [{\n                type: Output\n            }], rowIndex: [{\n                type: Input\n            }], expanded: [{\n                type: Input\n            }], onContextmenu: [{\n                type: HostListener,\n                args: ['contextmenu', ['$event']]\n            }] } });\n\nclass DataTableBodyComponent {\n    /**\n     * Creates an instance of DataTableBodyComponent.\n     */\n    constructor(cd) {\n        this.cd = cd;\n        this.selected = [];\n        this.scroll = new EventEmitter();\n        this.page = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.select = new EventEmitter();\n        this.detailToggle = new EventEmitter();\n        this.rowContextmenu = new EventEmitter(false);\n        this.treeAction = new EventEmitter();\n        this.rowHeightsCache = new RowHeightCache();\n        this.temp = [];\n        this.offsetY = 0;\n        this.indexes = {};\n        this.rowIndexes = new WeakMap();\n        this.rowExpansions = [];\n        /**\n         * Get the height of the detail row.\n         */\n        this.getDetailRowHeight = (row, index) => {\n            if (!this.rowDetail) {\n                return 0;\n            }\n            const rowHeight = this.rowDetail.rowHeight;\n            return typeof rowHeight === 'function' ? rowHeight(row, index) : rowHeight;\n        };\n        // declare fn here so we can get access to the `this` property\n        this.rowTrackingFn = (index, row) => {\n            const idx = this.getRowIndex(row);\n            if (this.trackByProp) {\n                return row[this.trackByProp];\n            }\n            else {\n                return idx;\n            }\n        };\n    }\n    set pageSize(val) {\n        this._pageSize = val;\n        this.recalcLayout();\n    }\n    get pageSize() {\n        return this._pageSize;\n    }\n    set rows(val) {\n        this._rows = val;\n        this.recalcLayout();\n    }\n    get rows() {\n        return this._rows;\n    }\n    set columns(val) {\n        this._columns = val;\n        const colsByPin = columnsByPin(val);\n        this.columnGroupWidths = columnGroupWidths(colsByPin, val);\n    }\n    get columns() {\n        return this._columns;\n    }\n    set offset(val) {\n        this._offset = val;\n        if (!this.scrollbarV || (this.scrollbarV && !this.virtualization))\n            this.recalcLayout();\n    }\n    get offset() {\n        return this._offset;\n    }\n    set rowCount(val) {\n        this._rowCount = val;\n        this.recalcLayout();\n    }\n    get rowCount() {\n        return this._rowCount;\n    }\n    get bodyWidth() {\n        if (this.scrollbarH) {\n            return this.innerWidth + 'px';\n        }\n        else {\n            return '100%';\n        }\n    }\n    set bodyHeight(val) {\n        if (this.scrollbarV) {\n            this._bodyHeight = val + 'px';\n        }\n        else {\n            this._bodyHeight = 'auto';\n        }\n        this.recalcLayout();\n    }\n    get bodyHeight() {\n        return this._bodyHeight;\n    }\n    /**\n     * Returns if selection is enabled.\n     */\n    get selectEnabled() {\n        return !!this.selectionType;\n    }\n    /**\n     * Property that would calculate the height of scroll bar\n     * based on the row heights cache for virtual scroll and virtualization. Other scenarios\n     * calculate scroll height automatically (as height will be undefined).\n     */\n    get scrollHeight() {\n        if (this.scrollbarV && this.virtualization && this.rowCount) {\n            return this.rowHeightsCache.query(this.rowCount - 1);\n        }\n        // avoid TS7030: Not all code paths return a value.\n        return undefined;\n    }\n    /**\n     * Called after the constructor, initializing input properties\n     */\n    ngOnInit() {\n        if (this.rowDetail) {\n            this.listener = this.rowDetail.toggle.subscribe(({ type, value }) => {\n                if (type === 'row') {\n                    this.toggleRowExpansion(value);\n                }\n                if (type === 'all') {\n                    this.toggleAllRows(value);\n                }\n                // Refresh rows after toggle\n                // Fixes #883\n                this.updateIndexes();\n                this.updateRows();\n                this.cd.markForCheck();\n            });\n        }\n        if (this.groupHeader) {\n            this.listener = this.groupHeader.toggle.subscribe(({ type, value }) => {\n                if (type === 'group') {\n                    this.toggleRowExpansion(value);\n                }\n                if (type === 'all') {\n                    this.toggleAllRows(value);\n                }\n                // Refresh rows after toggle\n                // Fixes #883\n                this.updateIndexes();\n                this.updateRows();\n                this.cd.markForCheck();\n            });\n        }\n    }\n    /**\n     * Called once, before the instance is destroyed.\n     */\n    ngOnDestroy() {\n        if (this.rowDetail || this.groupHeader) {\n            this.listener.unsubscribe();\n        }\n    }\n    /**\n     * Updates the Y offset given a new offset.\n     */\n    updateOffsetY(offset) {\n        // scroller is missing on empty table\n        if (!this.scroller) {\n            return;\n        }\n        if (this.scrollbarV && this.virtualization && offset) {\n            // First get the row Index that we need to move to.\n            const rowIndex = this.pageSize * offset;\n            offset = this.rowHeightsCache.query(rowIndex - 1);\n        }\n        else if (this.scrollbarV && !this.virtualization) {\n            offset = 0;\n        }\n        this.scroller.setOffset(offset || 0);\n    }\n    /**\n     * Body was scrolled, this is mainly useful for\n     * when a user is server-side pagination via virtual scroll.\n     */\n    onBodyScroll(event) {\n        const scrollYPos = event.scrollYPos;\n        const scrollXPos = event.scrollXPos;\n        // if scroll change, trigger update\n        // this is mainly used for header cell positions\n        if (this.offsetY !== scrollYPos || this.offsetX !== scrollXPos) {\n            this.scroll.emit({\n                offsetY: scrollYPos,\n                offsetX: scrollXPos\n            });\n        }\n        this.offsetY = scrollYPos;\n        this.offsetX = scrollXPos;\n        this.updateIndexes();\n        this.updatePage(event.direction);\n        this.updateRows();\n    }\n    /**\n     * Updates the page given a direction.\n     */\n    updatePage(direction) {\n        let offset = this.indexes.first / this.pageSize;\n        if (direction === 'up') {\n            offset = Math.ceil(offset);\n        }\n        else if (direction === 'down') {\n            offset = Math.floor(offset);\n        }\n        if (direction !== undefined && !isNaN(offset)) {\n            this.page.emit({ offset });\n        }\n    }\n    /**\n     * Updates the rows in the view port\n     */\n    updateRows() {\n        const { first, last } = this.indexes;\n        let rowIndex = first;\n        let idx = 0;\n        const temp = [];\n        // if grouprowsby has been specified treat row paging\n        // parameters as group paging parameters ie if limit 10 has been\n        // specified treat it as 10 groups rather than 10 rows\n        if (this.groupedRows) {\n            let maxRowsPerGroup = 3;\n            // if there is only one group set the maximum number of\n            // rows per group the same as the total number of rows\n            if (this.groupedRows.length === 1) {\n                maxRowsPerGroup = this.groupedRows[0].value.length;\n            }\n            while (rowIndex < last && rowIndex < this.groupedRows.length) {\n                // Add the groups into this page\n                const group = this.groupedRows[rowIndex];\n                this.rowIndexes.set(group, rowIndex);\n                if (group.value) {\n                    // add indexes for each group item\n                    group.value.forEach((g, i) => {\n                        const _idx = `${rowIndex}-${i}`;\n                        this.rowIndexes.set(g, _idx);\n                    });\n                }\n                temp[idx] = group;\n                idx++;\n                // Group index in this context\n                rowIndex++;\n            }\n        }\n        else {\n            while (rowIndex < last && rowIndex < this.rowCount) {\n                const row = this.rows[rowIndex];\n                if (row) {\n                    // add indexes for each row\n                    this.rowIndexes.set(row, rowIndex);\n                    temp[idx] = row;\n                }\n                idx++;\n                rowIndex++;\n            }\n        }\n        this.temp = temp;\n    }\n    /**\n     * Get the row height\n     */\n    getRowHeight(row) {\n        // if its a function return it\n        if (typeof this.rowHeight === 'function') {\n            return this.rowHeight(row);\n        }\n        return this.rowHeight;\n    }\n    /**\n     * @param group the group with all rows\n     */\n    getGroupHeight(group) {\n        let rowHeight = 0;\n        if (group.value) {\n            for (let index = 0; index < group.value.length; index++) {\n                rowHeight += this.getRowAndDetailHeight(group.value[index]);\n            }\n        }\n        return rowHeight;\n    }\n    /**\n     * Calculate row height based on the expanded state of the row.\n     */\n    getRowAndDetailHeight(row) {\n        let rowHeight = this.getRowHeight(row);\n        const expanded = this.getRowExpanded(row);\n        // Adding detail row height if its expanded.\n        if (expanded) {\n            rowHeight += this.getDetailRowHeight(row);\n        }\n        return rowHeight;\n    }\n    /**\n     * Calculates the styles for the row so that the rows can be moved in 2D space\n     * during virtual scroll inside the DOM.   In the below case the Y position is\n     * manipulated.   As an example, if the height of row 0 is 30 px and row 1 is\n     * 100 px then following styles are generated:\n     *\n     * transform: translate3d(0px, 0px, 0px);    ->  row0\n     * transform: translate3d(0px, 30px, 0px);   ->  row1\n     * transform: translate3d(0px, 130px, 0px);  ->  row2\n     *\n     * Row heights have to be calculated based on the row heights cache as we wont\n     * be able to determine which row is of what height before hand.  In the above\n     * case the positionY of the translate3d for row2 would be the sum of all the\n     * heights of the rows before it (i.e. row0 and row1).\n     *\n     * @param rows the row that needs to be placed in the 2D space.\n     * @returns the CSS3 style to be applied\n     *\n     * @memberOf DataTableBodyComponent\n     */\n    getRowsStyles(rows) {\n        const styles = {};\n        // only add styles for the group if there is a group\n        if (this.groupedRows) {\n            styles.width = this.columnGroupWidths.total;\n        }\n        if (this.scrollbarV && this.virtualization) {\n            let idx = 0;\n            if (this.groupedRows) {\n                // Get the latest row rowindex in a group\n                const row = rows[rows.length - 1];\n                idx = row ? this.getRowIndex(row) : 0;\n            }\n            else {\n                idx = this.getRowIndex(rows);\n            }\n            // const pos = idx * rowHeight;\n            // The position of this row would be the sum of all row heights\n            // until the previous row position.\n            const pos = this.rowHeightsCache.query(idx - 1);\n            translateXY(styles, 0, pos);\n        }\n        return styles;\n    }\n    /**\n     * Calculate bottom summary row offset for scrollbar mode.\n     * For more information about cache and offset calculation\n     * see description for `getRowsStyles` method\n     *\n     * @returns the CSS3 style to be applied\n     *\n     * @memberOf DataTableBodyComponent\n     */\n    getBottomSummaryRowStyles() {\n        if (!this.scrollbarV || !this.rows || !this.rows.length) {\n            return null;\n        }\n        const styles = { position: 'absolute' };\n        const pos = this.rowHeightsCache.query(this.rows.length - 1);\n        translateXY(styles, 0, pos);\n        return styles;\n    }\n    /**\n     * Hides the loading indicator\n     */\n    hideIndicator() {\n        setTimeout(() => (this.loadingIndicator = false), 500);\n    }\n    /**\n     * Updates the index of the rows in the viewport\n     */\n    updateIndexes() {\n        let first = 0;\n        let last = 0;\n        if (this.scrollbarV) {\n            if (this.virtualization) {\n                // Calculation of the first and last indexes will be based on where the\n                // scrollY position would be at.  The last index would be the one\n                // that shows up inside the view port the last.\n                const height = parseInt(this.bodyHeight, 0);\n                first = this.rowHeightsCache.getRowIndex(this.offsetY);\n                last = this.rowHeightsCache.getRowIndex(height + this.offsetY) + 1;\n            }\n            else {\n                // If virtual rows are not needed\n                // We render all in one go\n                first = 0;\n                last = this.rowCount;\n            }\n        }\n        else {\n            // The server is handling paging and will pass an array that begins with the\n            // element at a specified offset.  first should always be 0 with external paging.\n            if (!this.externalPaging) {\n                first = Math.max(this.offset * this.pageSize, 0);\n            }\n            last = Math.min(first + this.pageSize, this.rowCount);\n        }\n        this.indexes = { first, last };\n    }\n    /**\n     * Refreshes the full Row Height cache.  Should be used\n     * when the entire row array state has changed.\n     */\n    refreshRowHeightCache() {\n        if (!this.scrollbarV || (this.scrollbarV && !this.virtualization)) {\n            return;\n        }\n        // clear the previous row height cache if already present.\n        // this is useful during sorts, filters where the state of the\n        // rows array is changed.\n        this.rowHeightsCache.clearCache();\n        // Initialize the tree only if there are rows inside the tree.\n        if (this.rows && this.rows.length) {\n            const rowExpansions = new Set();\n            for (const row of this.rows) {\n                if (this.getRowExpanded(row)) {\n                    rowExpansions.add(row);\n                }\n            }\n            this.rowHeightsCache.initCache({\n                rows: this.rows,\n                rowHeight: this.rowHeight,\n                detailRowHeight: this.getDetailRowHeight,\n                externalVirtual: this.scrollbarV && this.externalPaging,\n                rowCount: this.rowCount,\n                rowIndexes: this.rowIndexes,\n                rowExpansions\n            });\n        }\n    }\n    /**\n     * Gets the index for the view port\n     */\n    getAdjustedViewPortIndex() {\n        // Capture the row index of the first row that is visible on the viewport.\n        // If the scroll bar is just below the row which is highlighted then make that as the\n        // first index.\n        const viewPortFirstRowIndex = this.indexes.first;\n        if (this.scrollbarV && this.virtualization) {\n            const offsetScroll = this.rowHeightsCache.query(viewPortFirstRowIndex - 1);\n            return offsetScroll <= this.offsetY ? viewPortFirstRowIndex - 1 : viewPortFirstRowIndex;\n        }\n        return viewPortFirstRowIndex;\n    }\n    /**\n     * Toggle the Expansion of the row i.e. if the row is expanded then it will\n     * collapse and vice versa.   Note that the expanded status is stored as\n     * a part of the row object itself as we have to preserve the expanded row\n     * status in case of sorting and filtering of the row set.\n     */\n    toggleRowExpansion(row) {\n        // Capture the row index of the first row that is visible on the viewport.\n        const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\n        const rowExpandedIdx = this.getRowExpandedIdx(row, this.rowExpansions);\n        const expanded = rowExpandedIdx > -1;\n        // If the detailRowHeight is auto --> only in case of non-virtualized scroll\n        if (this.scrollbarV && this.virtualization) {\n            const detailRowHeight = this.getDetailRowHeight(row) * (expanded ? -1 : 1);\n            // const idx = this.rowIndexes.get(row) || 0;\n            const idx = this.getRowIndex(row);\n            this.rowHeightsCache.update(idx, detailRowHeight);\n        }\n        // Update the toggled row and update thive nevere heights in the cache.\n        if (expanded) {\n            this.rowExpansions.splice(rowExpandedIdx, 1);\n        }\n        else {\n            this.rowExpansions.push(row);\n        }\n        this.detailToggle.emit({\n            rows: [row],\n            currentIndex: viewPortFirstRowIndex\n        });\n    }\n    /**\n     * Expand/Collapse all the rows no matter what their state is.\n     */\n    toggleAllRows(expanded) {\n        // clear prev expansions\n        this.rowExpansions = [];\n        // Capture the row index of the first row that is visible on the viewport.\n        const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\n        if (expanded) {\n            for (const row of this.rows) {\n                this.rowExpansions.push(row);\n            }\n        }\n        if (this.scrollbarV) {\n            // Refresh the full row heights cache since every row was affected.\n            this.recalcLayout();\n        }\n        // Emit all rows that have been expanded.\n        this.detailToggle.emit({\n            rows: this.rows,\n            currentIndex: viewPortFirstRowIndex\n        });\n    }\n    /**\n     * Recalculates the table\n     */\n    recalcLayout() {\n        this.refreshRowHeightCache();\n        this.updateIndexes();\n        this.updateRows();\n    }\n    /**\n     * Tracks the column\n     */\n    columnTrackingFn(index, column) {\n        return column.$$id;\n    }\n    /**\n     * Gets the row pinning group styles\n     */\n    stylesByGroup(group) {\n        const widths = this.columnGroupWidths;\n        const offsetX = this.offsetX;\n        const styles = {\n            width: `${widths[group]}px`\n        };\n        if (group === 'left') {\n            translateXY(styles, offsetX, 0);\n        }\n        else if (group === 'right') {\n            const bodyWidth = parseInt(this.innerWidth + '', 0);\n            const totalDiff = widths.total - bodyWidth;\n            const offsetDiff = totalDiff - offsetX;\n            const offset = offsetDiff * -1;\n            translateXY(styles, offset, 0);\n        }\n        return styles;\n    }\n    /**\n     * Returns if the row was expanded and set default row expansion when row expansion is empty\n     */\n    getRowExpanded(row) {\n        if (this.rowExpansions.length === 0 && this.groupExpansionDefault) {\n            for (const group of this.groupedRows) {\n                this.rowExpansions.push(group);\n            }\n        }\n        return this.getRowExpandedIdx(row, this.rowExpansions) > -1;\n    }\n    getRowExpandedIdx(row, expanded) {\n        if (!expanded || !expanded.length)\n            return -1;\n        const rowId = this.rowIdentity(row);\n        return expanded.findIndex(r => {\n            const id = this.rowIdentity(r);\n            return id === rowId;\n        });\n    }\n    /**\n     * Gets the row index given a row\n     */\n    getRowIndex(row) {\n        return this.rowIndexes.get(row) || 0;\n    }\n    onTreeAction(row) {\n        this.treeAction.emit({ row });\n    }\n}\nDataTableBodyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableBodyComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nDataTableBodyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableBodyComponent, selector: \"datatable-body\", inputs: { scrollbarV: \"scrollbarV\", scrollbarH: \"scrollbarH\", loadingIndicator: \"loadingIndicator\", externalPaging: \"externalPaging\", rowHeight: \"rowHeight\", offsetX: \"offsetX\", emptyMessage: \"emptyMessage\", selectionType: \"selectionType\", selected: \"selected\", rowIdentity: \"rowIdentity\", rowDetail: \"rowDetail\", groupHeader: \"groupHeader\", selectCheck: \"selectCheck\", displayCheck: \"displayCheck\", trackByProp: \"trackByProp\", rowClass: \"rowClass\", groupedRows: \"groupedRows\", groupExpansionDefault: \"groupExpansionDefault\", innerWidth: \"innerWidth\", groupRowsBy: \"groupRowsBy\", virtualization: \"virtualization\", summaryRow: \"summaryRow\", summaryPosition: \"summaryPosition\", summaryHeight: \"summaryHeight\", pageSize: \"pageSize\", rows: \"rows\", columns: \"columns\", offset: \"offset\", rowCount: \"rowCount\", bodyHeight: \"bodyHeight\" }, outputs: { scroll: \"scroll\", page: \"page\", activate: \"activate\", select: \"select\", detailToggle: \"detailToggle\", rowContextmenu: \"rowContextmenu\", treeAction: \"treeAction\" }, host: { properties: { \"style.width\": \"this.bodyWidth\", \"style.height\": \"this.bodyHeight\" }, classAttribute: \"datatable-body\" }, viewQueries: [{ propertyName: \"scroller\", first: true, predicate: ScrollerComponent, descendants: true }], ngImport: i0, template: `\n    <datatable-progress *ngIf=\"loadingIndicator\"> </datatable-progress>\n    <datatable-selection\n      #selector\n      [selected]=\"selected\"\n      [rows]=\"rows\"\n      [selectCheck]=\"selectCheck\"\n      [selectEnabled]=\"selectEnabled\"\n      [selectionType]=\"selectionType\"\n      [rowIdentity]=\"rowIdentity\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n    >\n      <datatable-scroller\n        *ngIf=\"rows?.length\"\n        [scrollbarV]=\"scrollbarV\"\n        [scrollbarH]=\"scrollbarH\"\n        [scrollHeight]=\"scrollHeight\"\n        [scrollWidth]=\"columnGroupWidths?.total\"\n        (scroll)=\"onBodyScroll($event)\"\n      >\n        <datatable-summary-row\n          *ngIf=\"summaryRow && summaryPosition === 'top'\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n        <datatable-row-wrapper\n          [groupedRows]=\"groupedRows\"\n          *ngFor=\"let group of temp; let i = index; trackBy: rowTrackingFn\"\n          [innerWidth]=\"innerWidth\"\n          [ngStyle]=\"getRowsStyles(group)\"\n          [rowDetail]=\"rowDetail\"\n          [groupHeader]=\"groupHeader\"\n          [offsetX]=\"offsetX\"\n          [detailRowHeight]=\"getDetailRowHeight(group && group[i], i)\"\n          [row]=\"group\"\n          [expanded]=\"getRowExpanded(group)\"\n          [rowIndex]=\"getRowIndex(group && group[i])\"\n          (rowContextmenu)=\"rowContextmenu.emit($event)\"\n        >\n          <datatable-body-row\n            role=\"row\"\n            *ngIf=\"!groupedRows; else groupedRowsTemplate\"\n            tabindex=\"-1\"\n            [isSelected]=\"selector.getRowSelected(group)\"\n            [innerWidth]=\"innerWidth\"\n            [offsetX]=\"offsetX\"\n            [columns]=\"columns\"\n            [rowHeight]=\"getRowHeight(group)\"\n            [row]=\"group\"\n            [rowIndex]=\"getRowIndex(group)\"\n            [expanded]=\"getRowExpanded(group)\"\n            [rowClass]=\"rowClass\"\n            [displayCheck]=\"displayCheck\"\n            [treeStatus]=\"group && group.treeStatus\"\n            (treeAction)=\"onTreeAction(group)\"\n            (activate)=\"selector.onActivate($event, indexes.first + i)\"\n          >\n          </datatable-body-row>\n          <ng-template #groupedRowsTemplate>\n            <datatable-body-row\n              role=\"row\"\n              *ngFor=\"let row of group.value; let i = index; trackBy: rowTrackingFn\"\n              tabindex=\"-1\"\n              [isSelected]=\"selector.getRowSelected(row)\"\n              [innerWidth]=\"innerWidth\"\n              [offsetX]=\"offsetX\"\n              [columns]=\"columns\"\n              [rowHeight]=\"getRowHeight(row)\"\n              [row]=\"row\"\n              [group]=\"group.value\"\n              [rowIndex]=\"getRowIndex(row)\"\n              [expanded]=\"getRowExpanded(row)\"\n              [rowClass]=\"rowClass\"\n              (activate)=\"selector.onActivate($event, i)\"\n            >\n            </datatable-body-row>\n          </ng-template>\n        </datatable-row-wrapper>\n        <datatable-summary-row\n          role=\"row\"\n          *ngIf=\"summaryRow && summaryPosition === 'bottom'\"\n          [ngStyle]=\"getBottomSummaryRowStyles()\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n      </datatable-scroller>\n      <div class=\"empty-row\" *ngIf=\"!rows?.length && !loadingIndicator\" [innerHTML]=\"emptyMessage\"></div>\n    </datatable-selection>\n  `, isInline: true, components: [{ type: ProgressBarComponent, selector: \"datatable-progress\" }, { type: DataTableSelectionComponent, selector: \"datatable-selection\", inputs: [\"rows\", \"selected\", \"selectEnabled\", \"selectionType\", \"rowIdentity\", \"selectCheck\"], outputs: [\"activate\", \"select\"] }, { type: ScrollerComponent, selector: \"datatable-scroller\", inputs: [\"scrollbarV\", \"scrollbarH\", \"scrollHeight\", \"scrollWidth\"], outputs: [\"scroll\"] }, { type: DataTableSummaryRowComponent, selector: \"datatable-summary-row\", inputs: [\"rows\", \"columns\", \"rowHeight\", \"offsetX\", \"innerWidth\"] }, { type: DataTableRowWrapperComponent, selector: \"datatable-row-wrapper\", inputs: [\"innerWidth\", \"rowDetail\", \"groupHeader\", \"offsetX\", \"detailRowHeight\", \"row\", \"groupedRows\", \"rowIndex\", \"expanded\"], outputs: [\"rowContextmenu\"] }, { type: DataTableBodyRowComponent, selector: \"datatable-body-row\", inputs: [\"columns\", \"innerWidth\", \"expanded\", \"rowClass\", \"row\", \"group\", \"isSelected\", \"rowIndex\", \"displayCheck\", \"treeStatus\", \"offsetX\", \"rowHeight\"], outputs: [\"activate\", \"treeAction\"] }], directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i1.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableBodyComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-body',\n                    template: `\n    <datatable-progress *ngIf=\"loadingIndicator\"> </datatable-progress>\n    <datatable-selection\n      #selector\n      [selected]=\"selected\"\n      [rows]=\"rows\"\n      [selectCheck]=\"selectCheck\"\n      [selectEnabled]=\"selectEnabled\"\n      [selectionType]=\"selectionType\"\n      [rowIdentity]=\"rowIdentity\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n    >\n      <datatable-scroller\n        *ngIf=\"rows?.length\"\n        [scrollbarV]=\"scrollbarV\"\n        [scrollbarH]=\"scrollbarH\"\n        [scrollHeight]=\"scrollHeight\"\n        [scrollWidth]=\"columnGroupWidths?.total\"\n        (scroll)=\"onBodyScroll($event)\"\n      >\n        <datatable-summary-row\n          *ngIf=\"summaryRow && summaryPosition === 'top'\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n        <datatable-row-wrapper\n          [groupedRows]=\"groupedRows\"\n          *ngFor=\"let group of temp; let i = index; trackBy: rowTrackingFn\"\n          [innerWidth]=\"innerWidth\"\n          [ngStyle]=\"getRowsStyles(group)\"\n          [rowDetail]=\"rowDetail\"\n          [groupHeader]=\"groupHeader\"\n          [offsetX]=\"offsetX\"\n          [detailRowHeight]=\"getDetailRowHeight(group && group[i], i)\"\n          [row]=\"group\"\n          [expanded]=\"getRowExpanded(group)\"\n          [rowIndex]=\"getRowIndex(group && group[i])\"\n          (rowContextmenu)=\"rowContextmenu.emit($event)\"\n        >\n          <datatable-body-row\n            role=\"row\"\n            *ngIf=\"!groupedRows; else groupedRowsTemplate\"\n            tabindex=\"-1\"\n            [isSelected]=\"selector.getRowSelected(group)\"\n            [innerWidth]=\"innerWidth\"\n            [offsetX]=\"offsetX\"\n            [columns]=\"columns\"\n            [rowHeight]=\"getRowHeight(group)\"\n            [row]=\"group\"\n            [rowIndex]=\"getRowIndex(group)\"\n            [expanded]=\"getRowExpanded(group)\"\n            [rowClass]=\"rowClass\"\n            [displayCheck]=\"displayCheck\"\n            [treeStatus]=\"group && group.treeStatus\"\n            (treeAction)=\"onTreeAction(group)\"\n            (activate)=\"selector.onActivate($event, indexes.first + i)\"\n          >\n          </datatable-body-row>\n          <ng-template #groupedRowsTemplate>\n            <datatable-body-row\n              role=\"row\"\n              *ngFor=\"let row of group.value; let i = index; trackBy: rowTrackingFn\"\n              tabindex=\"-1\"\n              [isSelected]=\"selector.getRowSelected(row)\"\n              [innerWidth]=\"innerWidth\"\n              [offsetX]=\"offsetX\"\n              [columns]=\"columns\"\n              [rowHeight]=\"getRowHeight(row)\"\n              [row]=\"row\"\n              [group]=\"group.value\"\n              [rowIndex]=\"getRowIndex(row)\"\n              [expanded]=\"getRowExpanded(row)\"\n              [rowClass]=\"rowClass\"\n              (activate)=\"selector.onActivate($event, i)\"\n            >\n            </datatable-body-row>\n          </ng-template>\n        </datatable-row-wrapper>\n        <datatable-summary-row\n          role=\"row\"\n          *ngIf=\"summaryRow && summaryPosition === 'bottom'\"\n          [ngStyle]=\"getBottomSummaryRowStyles()\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n      </datatable-scroller>\n      <div class=\"empty-row\" *ngIf=\"!rows?.length && !loadingIndicator\" [innerHTML]=\"emptyMessage\"></div>\n    </datatable-selection>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: {\n                        class: 'datatable-body'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { scrollbarV: [{\n                type: Input\n            }], scrollbarH: [{\n                type: Input\n            }], loadingIndicator: [{\n                type: Input\n            }], externalPaging: [{\n                type: Input\n            }], rowHeight: [{\n                type: Input\n            }], offsetX: [{\n                type: Input\n            }], emptyMessage: [{\n                type: Input\n            }], selectionType: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], rowIdentity: [{\n                type: Input\n            }], rowDetail: [{\n                type: Input\n            }], groupHeader: [{\n                type: Input\n            }], selectCheck: [{\n                type: Input\n            }], displayCheck: [{\n                type: Input\n            }], trackByProp: [{\n                type: Input\n            }], rowClass: [{\n                type: Input\n            }], groupedRows: [{\n                type: Input\n            }], groupExpansionDefault: [{\n                type: Input\n            }], innerWidth: [{\n                type: Input\n            }], groupRowsBy: [{\n                type: Input\n            }], virtualization: [{\n                type: Input\n            }], summaryRow: [{\n                type: Input\n            }], summaryPosition: [{\n                type: Input\n            }], summaryHeight: [{\n                type: Input\n            }], pageSize: [{\n                type: Input\n            }], rows: [{\n                type: Input\n            }], columns: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], rowCount: [{\n                type: Input\n            }], bodyWidth: [{\n                type: HostBinding,\n                args: ['style.width']\n            }], bodyHeight: [{\n                type: Input\n            }, {\n                type: HostBinding,\n                args: ['style.height']\n            }], scroll: [{\n                type: Output\n            }], page: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], select: [{\n                type: Output\n            }], detailToggle: [{\n                type: Output\n            }], rowContextmenu: [{\n                type: Output\n            }], treeAction: [{\n                type: Output\n            }], scroller: [{\n                type: ViewChild,\n                args: [ScrollerComponent]\n            }] } });\n\n/**\n * Gets the next sort direction\n */\nfunction nextSortDir(sortType, current) {\n    if (sortType === SortType.single) {\n        if (current === SortDirection.asc) {\n            return SortDirection.desc;\n        }\n        else {\n            return SortDirection.asc;\n        }\n    }\n    else {\n        if (!current) {\n            return SortDirection.asc;\n        }\n        else if (current === SortDirection.asc) {\n            return SortDirection.desc;\n        }\n        else if (current === SortDirection.desc) {\n            return undefined;\n        }\n        // avoid TS7030: Not all code paths return a value.\n        return undefined;\n    }\n}\n/**\n * Adapted from fueld-ui on 6/216\n * https://github.com/FuelInteractive/fuel-ui/tree/master/src/pipes/OrderBy\n */\nfunction orderByComparator(a, b) {\n    if (a === null || typeof a === 'undefined')\n        a = 0;\n    if (b === null || typeof b === 'undefined')\n        b = 0;\n    if (a instanceof Date && b instanceof Date) {\n        if (a < b)\n            return -1;\n        if (a > b)\n            return 1;\n    }\n    else if (isNaN(parseFloat(a)) || !isFinite(a) || isNaN(parseFloat(b)) || !isFinite(b)) {\n        // Convert to string in case of a=0 or b=0\n        a = String(a);\n        b = String(b);\n        // Isn't a number so lowercase the string to properly compare\n        if (a.toLowerCase() < b.toLowerCase())\n            return -1;\n        if (a.toLowerCase() > b.toLowerCase())\n            return 1;\n    }\n    else {\n        // Parse strings as numbers to compare properly\n        if (parseFloat(a) < parseFloat(b))\n            return -1;\n        if (parseFloat(a) > parseFloat(b))\n            return 1;\n    }\n    // equal each other\n    return 0;\n}\n/**\n * creates a shallow copy of the `rows` input and returns the sorted copy. this function\n * does not sort the `rows` argument in place\n */\nfunction sortRows(rows, columns, dirs) {\n    if (!rows)\n        return [];\n    if (!dirs || !dirs.length || !columns)\n        return [...rows];\n    /**\n     * record the row ordering of results from prior sort operations (if applicable)\n     * this is necessary to guarantee stable sorting behavior\n     */\n    const rowToIndexMap = new Map();\n    rows.forEach((row, index) => rowToIndexMap.set(row, index));\n    const temp = [...rows];\n    const cols = columns.reduce((obj, col) => {\n        if (col.comparator && typeof col.comparator === 'function') {\n            obj[col.prop] = col.comparator;\n        }\n        return obj;\n    }, {});\n    // cache valueGetter and compareFn so that they\n    // do not need to be looked-up in the sort function body\n    const cachedDirs = dirs.map(dir => {\n        const prop = dir.prop;\n        return {\n            prop,\n            dir: dir.dir,\n            valueGetter: getterForProp(prop),\n            compareFn: cols[prop] || orderByComparator\n        };\n    });\n    return temp.sort(function (rowA, rowB) {\n        for (const cachedDir of cachedDirs) {\n            // Get property and valuegetters for column to be sorted\n            const { prop, valueGetter } = cachedDir;\n            // Get A and B cell values from rows based on properties of the columns\n            const propA = valueGetter(rowA, prop);\n            const propB = valueGetter(rowB, prop);\n            // Compare function gets five parameters:\n            // Two cell values to be compared as propA and propB\n            // Two rows corresponding to the cells as rowA and rowB\n            // Direction of the sort for this column as SortDirection\n            // Compare can be a standard JS comparison function (a,b) => -1|0|1\n            // as additional parameters are silently ignored. The whole row and sort\n            // direction enable more complex sort logic.\n            const comparison = cachedDir.dir !== SortDirection.desc\n                ? cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir)\n                : -cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir);\n            // Don't return 0 yet in case of needing to sort by next property\n            if (comparison !== 0)\n                return comparison;\n        }\n        if (!(rowToIndexMap.has(rowA) && rowToIndexMap.has(rowB)))\n            return 0;\n        /**\n         * all else being equal, preserve original order of the rows (stable sort)\n         */\n        return rowToIndexMap.get(rowA) < rowToIndexMap.get(rowB) ? -1 : 1;\n    });\n}\n\nclass DataTableHeaderCellComponent {\n    constructor(cd) {\n        this.cd = cd;\n        this.sort = new EventEmitter();\n        this.select = new EventEmitter();\n        this.columnContextmenu = new EventEmitter(false);\n        this.sortFn = this.onSort.bind(this);\n        this.selectFn = this.select.emit.bind(this.select);\n        this.cellContext = {\n            column: this.column,\n            sortDir: this.sortDir,\n            sortFn: this.sortFn,\n            allRowsSelected: this.allRowsSelected,\n            selectFn: this.selectFn\n        };\n    }\n    set allRowsSelected(value) {\n        this._allRowsSelected = value;\n        this.cellContext.allRowsSelected = value;\n    }\n    get allRowsSelected() {\n        return this._allRowsSelected;\n    }\n    set column(column) {\n        this._column = column;\n        this.cellContext.column = column;\n        this.cd.markForCheck();\n    }\n    get column() {\n        return this._column;\n    }\n    set sorts(val) {\n        this._sorts = val;\n        this.sortDir = this.calcSortDir(val);\n        this.cellContext.sortDir = this.sortDir;\n        this.sortClass = this.calcSortClass(this.sortDir);\n        this.cd.markForCheck();\n    }\n    get sorts() {\n        return this._sorts;\n    }\n    get columnCssClasses() {\n        let cls = 'datatable-header-cell';\n        if (this.column.sortable)\n            cls += ' sortable';\n        if (this.column.resizeable)\n            cls += ' resizeable';\n        if (this.column.headerClass) {\n            if (typeof this.column.headerClass === 'string') {\n                cls += ' ' + this.column.headerClass;\n            }\n            else if (typeof this.column.headerClass === 'function') {\n                const res = this.column.headerClass({\n                    column: this.column\n                });\n                if (typeof res === 'string') {\n                    cls += res;\n                }\n                else if (typeof res === 'object') {\n                    const keys = Object.keys(res);\n                    for (const k of keys) {\n                        if (res[k] === true)\n                            cls += ` ${k}`;\n                    }\n                }\n            }\n        }\n        const sortDir = this.sortDir;\n        if (sortDir) {\n            cls += ` sort-active sort-${sortDir}`;\n        }\n        return cls;\n    }\n    get name() {\n        // guaranteed to have a value by setColumnDefaults() in column-helper.ts\n        return this.column.headerTemplate === undefined ? this.column.name : undefined;\n    }\n    get minWidth() {\n        return this.column.minWidth;\n    }\n    get maxWidth() {\n        return this.column.maxWidth;\n    }\n    get width() {\n        return this.column.width;\n    }\n    get isCheckboxable() {\n        return this.column.checkboxable && this.column.headerCheckboxable && this.selectionType === SelectionType.checkbox;\n    }\n    onContextmenu($event) {\n        this.columnContextmenu.emit({ event: $event, column: this.column });\n    }\n    ngOnInit() {\n        this.sortClass = this.calcSortClass(this.sortDir);\n    }\n    calcSortDir(sorts) {\n        if (sorts && this.column) {\n            const sort = sorts.find((s) => {\n                return s.prop === this.column.prop;\n            });\n            if (sort)\n                return sort.dir;\n        }\n    }\n    onSort() {\n        if (!this.column.sortable)\n            return;\n        const newValue = nextSortDir(this.sortType, this.sortDir);\n        this.sort.emit({\n            column: this.column,\n            prevValue: this.sortDir,\n            newValue\n        });\n    }\n    calcSortClass(sortDir) {\n        if (!this.cellContext.column.sortable)\n            return;\n        if (sortDir === SortDirection.asc) {\n            return `sort-btn sort-asc ${this.sortAscendingIcon}`;\n        }\n        else if (sortDir === SortDirection.desc) {\n            return `sort-btn sort-desc ${this.sortDescendingIcon}`;\n        }\n        else {\n            return `sort-btn ${this.sortUnsetIcon}`;\n        }\n    }\n}\nDataTableHeaderCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableHeaderCellComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nDataTableHeaderCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableHeaderCellComponent, selector: \"datatable-header-cell\", inputs: { sortType: \"sortType\", sortAscendingIcon: \"sortAscendingIcon\", sortDescendingIcon: \"sortDescendingIcon\", sortUnsetIcon: \"sortUnsetIcon\", isTarget: \"isTarget\", targetMarkerTemplate: \"targetMarkerTemplate\", targetMarkerContext: \"targetMarkerContext\", allRowsSelected: \"allRowsSelected\", selectionType: \"selectionType\", column: \"column\", headerHeight: \"headerHeight\", sorts: \"sorts\" }, outputs: { sort: \"sort\", select: \"select\", columnContextmenu: \"columnContextmenu\" }, host: { listeners: { \"contextmenu\": \"onContextmenu($event)\" }, properties: { \"style.height.px\": \"this.headerHeight\", \"class\": \"this.columnCssClasses\", \"attr.title\": \"this.name\", \"style.minWidth.px\": \"this.minWidth\", \"style.maxWidth.px\": \"this.maxWidth\", \"style.width.px\": \"this.width\" }, classAttribute: \"datatable-header-cell\" }, ngImport: i0, template: `\n    <div class=\"datatable-header-cell-template-wrap\">\n      <ng-template\n        *ngIf=\"isTarget\"\n        [ngTemplateOutlet]=\"targetMarkerTemplate\"\n        [ngTemplateOutletContext]=\"targetMarkerContext\"\n      >\n      </ng-template>\n      <label *ngIf=\"isCheckboxable\" class=\"datatable-checkbox\">\n        <input type=\"checkbox\" [checked]=\"allRowsSelected\" (change)=\"select.emit(!allRowsSelected)\" />\n      </label>\n      <span *ngIf=\"!column.headerTemplate\" class=\"datatable-header-cell-wrapper\">\n        <span class=\"datatable-header-cell-label draggable\" (click)=\"onSort()\" [innerHTML]=\"name\"> </span>\n      </span>\n      <ng-template\n        *ngIf=\"column.headerTemplate\"\n        [ngTemplateOutlet]=\"column.headerTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n      <span (click)=\"onSort()\" [class]=\"sortClass\"> </span>\n    </div>\n  `, isInline: true, directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableHeaderCellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-header-cell',\n                    template: `\n    <div class=\"datatable-header-cell-template-wrap\">\n      <ng-template\n        *ngIf=\"isTarget\"\n        [ngTemplateOutlet]=\"targetMarkerTemplate\"\n        [ngTemplateOutletContext]=\"targetMarkerContext\"\n      >\n      </ng-template>\n      <label *ngIf=\"isCheckboxable\" class=\"datatable-checkbox\">\n        <input type=\"checkbox\" [checked]=\"allRowsSelected\" (change)=\"select.emit(!allRowsSelected)\" />\n      </label>\n      <span *ngIf=\"!column.headerTemplate\" class=\"datatable-header-cell-wrapper\">\n        <span class=\"datatable-header-cell-label draggable\" (click)=\"onSort()\" [innerHTML]=\"name\"> </span>\n      </span>\n      <ng-template\n        *ngIf=\"column.headerTemplate\"\n        [ngTemplateOutlet]=\"column.headerTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n      <span (click)=\"onSort()\" [class]=\"sortClass\"> </span>\n    </div>\n  `,\n                    host: {\n                        class: 'datatable-header-cell'\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { sortType: [{\n                type: Input\n            }], sortAscendingIcon: [{\n                type: Input\n            }], sortDescendingIcon: [{\n                type: Input\n            }], sortUnsetIcon: [{\n                type: Input\n            }], isTarget: [{\n                type: Input\n            }], targetMarkerTemplate: [{\n                type: Input\n            }], targetMarkerContext: [{\n                type: Input\n            }], allRowsSelected: [{\n                type: Input\n            }], selectionType: [{\n                type: Input\n            }], column: [{\n                type: Input\n            }], headerHeight: [{\n                type: HostBinding,\n                args: ['style.height.px']\n            }, {\n                type: Input\n            }], sorts: [{\n                type: Input\n            }], sort: [{\n                type: Output\n            }], select: [{\n                type: Output\n            }], columnContextmenu: [{\n                type: Output\n            }], columnCssClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], name: [{\n                type: HostBinding,\n                args: ['attr.title']\n            }], minWidth: [{\n                type: HostBinding,\n                args: ['style.minWidth.px']\n            }], maxWidth: [{\n                type: HostBinding,\n                args: ['style.maxWidth.px']\n            }], width: [{\n                type: HostBinding,\n                args: ['style.width.px']\n            }], onContextmenu: [{\n                type: HostListener,\n                args: ['contextmenu', ['$event']]\n            }] } });\n\nclass DataTableHeaderComponent {\n    constructor(cd) {\n        this.cd = cd;\n        this.sort = new EventEmitter();\n        this.reorder = new EventEmitter();\n        this.resize = new EventEmitter();\n        this.select = new EventEmitter();\n        this.columnContextmenu = new EventEmitter(false);\n        this._columnGroupWidths = {\n            total: 100\n        };\n        this._styleByGroup = {\n            left: {},\n            center: {},\n            right: {}\n        };\n        this.destroyed = false;\n    }\n    set innerWidth(val) {\n        this._innerWidth = val;\n        setTimeout(() => {\n            if (this._columns) {\n                const colByPin = columnsByPin(this._columns);\n                this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\n                this.setStylesByGroup();\n            }\n        });\n    }\n    get innerWidth() {\n        return this._innerWidth;\n    }\n    set headerHeight(val) {\n        if (val !== 'auto') {\n            this._headerHeight = `${val}px`;\n        }\n        else {\n            this._headerHeight = val;\n        }\n    }\n    get headerHeight() {\n        return this._headerHeight;\n    }\n    set columns(val) {\n        this._columns = val;\n        const colsByPin = columnsByPin(val);\n        this._columnsByPin = columnsByPinArr(val);\n        setTimeout(() => {\n            this._columnGroupWidths = columnGroupWidths(colsByPin, val);\n            this.setStylesByGroup();\n        });\n    }\n    get columns() {\n        return this._columns;\n    }\n    set offsetX(val) {\n        this._offsetX = val;\n        this.setStylesByGroup();\n    }\n    get offsetX() {\n        return this._offsetX;\n    }\n    ngOnDestroy() {\n        this.destroyed = true;\n    }\n    onLongPressStart({ event, model }) {\n        model.dragging = true;\n        this.dragEventTarget = event;\n    }\n    onLongPressEnd({ event, model }) {\n        this.dragEventTarget = event;\n        // delay resetting so sort can be\n        // prevented if we were dragging\n        setTimeout(() => {\n            // datatable component creates copies from columns on reorder\n            // set dragging to false on new objects\n            const column = this._columns.find(c => c.$$id === model.$$id);\n            if (column) {\n                column.dragging = false;\n            }\n        }, 5);\n    }\n    get headerWidth() {\n        if (this.scrollbarH) {\n            return this.innerWidth + 'px';\n        }\n        return '100%';\n    }\n    trackByGroups(index, colGroup) {\n        return colGroup.type;\n    }\n    columnTrackingFn(index, column) {\n        return column.$$id;\n    }\n    onColumnResized(width, column) {\n        if (width <= column.minWidth) {\n            width = column.minWidth;\n        }\n        else if (width >= column.maxWidth) {\n            width = column.maxWidth;\n        }\n        this.resize.emit({\n            column,\n            prevValue: column.width,\n            newValue: width\n        });\n    }\n    onColumnReordered({ prevIndex, newIndex, model }) {\n        const column = this.getColumn(newIndex);\n        column.isTarget = false;\n        column.targetMarkerContext = undefined;\n        this.reorder.emit({\n            column: model,\n            prevValue: prevIndex,\n            newValue: newIndex\n        });\n    }\n    onTargetChanged({ prevIndex, newIndex, initialIndex }) {\n        if (prevIndex || prevIndex === 0) {\n            const oldColumn = this.getColumn(prevIndex);\n            oldColumn.isTarget = false;\n            oldColumn.targetMarkerContext = undefined;\n        }\n        if (newIndex || newIndex === 0) {\n            const newColumn = this.getColumn(newIndex);\n            newColumn.isTarget = true;\n            if (initialIndex !== newIndex) {\n                newColumn.targetMarkerContext = {\n                    class: 'targetMarker '.concat(initialIndex > newIndex ? 'dragFromRight' : 'dragFromLeft')\n                };\n            }\n        }\n    }\n    getColumn(index) {\n        const leftColumnCount = this._columnsByPin[0].columns.length;\n        if (index < leftColumnCount) {\n            return this._columnsByPin[0].columns[index];\n        }\n        const centerColumnCount = this._columnsByPin[1].columns.length;\n        if (index < leftColumnCount + centerColumnCount) {\n            return this._columnsByPin[1].columns[index - leftColumnCount];\n        }\n        return this._columnsByPin[2].columns[index - leftColumnCount - centerColumnCount];\n    }\n    onSort({ column, prevValue, newValue }) {\n        // if we are dragging don't sort!\n        if (column.dragging) {\n            return;\n        }\n        const sorts = this.calcNewSorts(column, prevValue, newValue);\n        this.sort.emit({\n            sorts,\n            column,\n            prevValue,\n            newValue\n        });\n    }\n    calcNewSorts(column, prevValue, newValue) {\n        let idx = 0;\n        if (!this.sorts) {\n            this.sorts = [];\n        }\n        const sorts = this.sorts.map((s, i) => {\n            s = Object.assign({}, s);\n            if (s.prop === column.prop) {\n                idx = i;\n            }\n            return s;\n        });\n        if (newValue === undefined) {\n            sorts.splice(idx, 1);\n        }\n        else if (prevValue) {\n            sorts[idx].dir = newValue;\n        }\n        else {\n            if (this.sortType === SortType.single) {\n                sorts.splice(0, this.sorts.length);\n            }\n            sorts.push({ dir: newValue, prop: column.prop });\n        }\n        return sorts;\n    }\n    setStylesByGroup() {\n        this._styleByGroup.left = this.calcStylesByGroup('left');\n        this._styleByGroup.center = this.calcStylesByGroup('center');\n        this._styleByGroup.right = this.calcStylesByGroup('right');\n        if (!this.destroyed) {\n            this.cd.detectChanges();\n        }\n    }\n    calcStylesByGroup(group) {\n        const widths = this._columnGroupWidths;\n        const offsetX = this.offsetX;\n        const styles = {\n            width: `${widths[group]}px`\n        };\n        if (group === 'center') {\n            translateXY(styles, offsetX * -1, 0);\n        }\n        else if (group === 'right') {\n            const totalDiff = widths.total - this.innerWidth;\n            const offset = totalDiff * -1;\n            translateXY(styles, offset, 0);\n        }\n        return styles;\n    }\n}\nDataTableHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableHeaderComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nDataTableHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableHeaderComponent, selector: \"datatable-header\", inputs: { sortAscendingIcon: \"sortAscendingIcon\", sortDescendingIcon: \"sortDescendingIcon\", sortUnsetIcon: \"sortUnsetIcon\", scrollbarH: \"scrollbarH\", dealsWithGroup: \"dealsWithGroup\", targetMarkerTemplate: \"targetMarkerTemplate\", innerWidth: \"innerWidth\", sorts: \"sorts\", sortType: \"sortType\", allRowsSelected: \"allRowsSelected\", selectionType: \"selectionType\", reorderable: \"reorderable\", headerHeight: \"headerHeight\", columns: \"columns\", offsetX: \"offsetX\" }, outputs: { sort: \"sort\", reorder: \"reorder\", resize: \"resize\", select: \"select\", columnContextmenu: \"columnContextmenu\" }, host: { properties: { \"style.height\": \"this.headerHeight\", \"style.width\": \"this.headerWidth\" }, classAttribute: \"datatable-header\" }, ngImport: i0, template: `\n    <div\n      role=\"row\"\n      orderable\n      (reorder)=\"onColumnReordered($event)\"\n      (targetChanged)=\"onTargetChanged($event)\"\n      [style.width.px]=\"_columnGroupWidths.total\"\n      class=\"datatable-header-inner\"\n    >\n      <div\n        *ngFor=\"let colGroup of _columnsByPin; trackBy: trackByGroups\"\n        [class]=\"'datatable-row-' + colGroup.type\"\n        [ngStyle]=\"_styleByGroup[colGroup.type]\"\n      >\n        <datatable-header-cell\n          role=\"columnheader\"\n          *ngFor=\"let column of colGroup.columns; trackBy: columnTrackingFn\"\n          resizeable\n          [resizeEnabled]=\"column.resizeable\"\n          (resize)=\"onColumnResized($event, column)\"\n          long-press\n          [pressModel]=\"column\"\n          [pressEnabled]=\"reorderable && column.draggable\"\n          (longPressStart)=\"onLongPressStart($event)\"\n          (longPressEnd)=\"onLongPressEnd($event)\"\n          draggable\n          [dragX]=\"reorderable && column.draggable && column.dragging\"\n          [dragY]=\"false\"\n          [dragModel]=\"column\"\n          [dragEventTarget]=\"dragEventTarget\"\n          [headerHeight]=\"headerHeight\"\n          [isTarget]=\"column.isTarget\"\n          [targetMarkerTemplate]=\"targetMarkerTemplate\"\n          [targetMarkerContext]=\"column.targetMarkerContext\"\n          [column]=\"column\"\n          [sortType]=\"sortType\"\n          [sorts]=\"sorts\"\n          [selectionType]=\"selectionType\"\n          [sortAscendingIcon]=\"sortAscendingIcon\"\n          [sortDescendingIcon]=\"sortDescendingIcon\"\n          [sortUnsetIcon]=\"sortUnsetIcon\"\n          [allRowsSelected]=\"allRowsSelected\"\n          (sort)=\"onSort($event)\"\n          (select)=\"select.emit($event)\"\n          (columnContextmenu)=\"columnContextmenu.emit($event)\"\n        >\n        </datatable-header-cell>\n      </div>\n    </div>\n  `, isInline: true, components: [{ type: DataTableHeaderCellComponent, selector: \"datatable-header-cell\", inputs: [\"sortType\", \"sortAscendingIcon\", \"sortDescendingIcon\", \"sortUnsetIcon\", \"isTarget\", \"targetMarkerTemplate\", \"targetMarkerContext\", \"allRowsSelected\", \"selectionType\", \"column\", \"headerHeight\", \"sorts\"], outputs: [\"sort\", \"select\", \"columnContextmenu\"] }], directives: [{ type: OrderableDirective, selector: \"[orderable]\", outputs: [\"reorder\", \"targetChanged\"] }, { type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i1.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: ResizeableDirective, selector: \"[resizeable]\", inputs: [\"resizeEnabled\", \"minWidth\", \"maxWidth\"], outputs: [\"resize\"] }, { type: LongPressDirective, selector: \"[long-press]\", inputs: [\"pressEnabled\", \"pressModel\", \"duration\"], outputs: [\"longPressStart\", \"longPressing\", \"longPressEnd\"] }, { type: DraggableDirective, selector: \"[draggable]\", inputs: [\"dragEventTarget\", \"dragModel\", \"dragX\", \"dragY\"], outputs: [\"dragStart\", \"dragging\", \"dragEnd\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableHeaderComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-header',\n                    template: `\n    <div\n      role=\"row\"\n      orderable\n      (reorder)=\"onColumnReordered($event)\"\n      (targetChanged)=\"onTargetChanged($event)\"\n      [style.width.px]=\"_columnGroupWidths.total\"\n      class=\"datatable-header-inner\"\n    >\n      <div\n        *ngFor=\"let colGroup of _columnsByPin; trackBy: trackByGroups\"\n        [class]=\"'datatable-row-' + colGroup.type\"\n        [ngStyle]=\"_styleByGroup[colGroup.type]\"\n      >\n        <datatable-header-cell\n          role=\"columnheader\"\n          *ngFor=\"let column of colGroup.columns; trackBy: columnTrackingFn\"\n          resizeable\n          [resizeEnabled]=\"column.resizeable\"\n          (resize)=\"onColumnResized($event, column)\"\n          long-press\n          [pressModel]=\"column\"\n          [pressEnabled]=\"reorderable && column.draggable\"\n          (longPressStart)=\"onLongPressStart($event)\"\n          (longPressEnd)=\"onLongPressEnd($event)\"\n          draggable\n          [dragX]=\"reorderable && column.draggable && column.dragging\"\n          [dragY]=\"false\"\n          [dragModel]=\"column\"\n          [dragEventTarget]=\"dragEventTarget\"\n          [headerHeight]=\"headerHeight\"\n          [isTarget]=\"column.isTarget\"\n          [targetMarkerTemplate]=\"targetMarkerTemplate\"\n          [targetMarkerContext]=\"column.targetMarkerContext\"\n          [column]=\"column\"\n          [sortType]=\"sortType\"\n          [sorts]=\"sorts\"\n          [selectionType]=\"selectionType\"\n          [sortAscendingIcon]=\"sortAscendingIcon\"\n          [sortDescendingIcon]=\"sortDescendingIcon\"\n          [sortUnsetIcon]=\"sortUnsetIcon\"\n          [allRowsSelected]=\"allRowsSelected\"\n          (sort)=\"onSort($event)\"\n          (select)=\"select.emit($event)\"\n          (columnContextmenu)=\"columnContextmenu.emit($event)\"\n        >\n        </datatable-header-cell>\n      </div>\n    </div>\n  `,\n                    host: {\n                        class: 'datatable-header'\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { sortAscendingIcon: [{\n                type: Input\n            }], sortDescendingIcon: [{\n                type: Input\n            }], sortUnsetIcon: [{\n                type: Input\n            }], scrollbarH: [{\n                type: Input\n            }], dealsWithGroup: [{\n                type: Input\n            }], targetMarkerTemplate: [{\n                type: Input\n            }], innerWidth: [{\n                type: Input\n            }], sorts: [{\n                type: Input\n            }], sortType: [{\n                type: Input\n            }], allRowsSelected: [{\n                type: Input\n            }], selectionType: [{\n                type: Input\n            }], reorderable: [{\n                type: Input\n            }], headerHeight: [{\n                type: HostBinding,\n                args: ['style.height']\n            }, {\n                type: Input\n            }], columns: [{\n                type: Input\n            }], offsetX: [{\n                type: Input\n            }], sort: [{\n                type: Output\n            }], reorder: [{\n                type: Output\n            }], resize: [{\n                type: Output\n            }], select: [{\n                type: Output\n            }], columnContextmenu: [{\n                type: Output\n            }], headerWidth: [{\n                type: HostBinding,\n                args: ['style.width']\n            }] } });\n\n/**\n * Throttle a function\n */\nfunction throttle(func, wait, options) {\n    options = options || {};\n    let context;\n    let args;\n    let result;\n    let timeout = null;\n    let previous = 0;\n    function later() {\n        previous = options.leading === false ? 0 : +new Date();\n        timeout = null;\n        result = func.apply(context, args);\n    }\n    return function () {\n        const now = +new Date();\n        if (!previous && options.leading === false) {\n            previous = now;\n        }\n        const remaining = wait - (now - previous);\n        context = this;\n        args = arguments;\n        if (remaining <= 0) {\n            clearTimeout(timeout);\n            timeout = null;\n            previous = now;\n            result = func.apply(context, args);\n        }\n        else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    };\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\nfunction throttleable(duration, options) {\n    return function innerDecorator(target, key, descriptor) {\n        return {\n            configurable: true,\n            enumerable: descriptor.enumerable,\n            get: function getter() {\n                Object.defineProperty(this, key, {\n                    configurable: true,\n                    enumerable: descriptor.enumerable,\n                    value: throttle(descriptor.value, duration, options)\n                });\n                return this[key];\n            }\n        };\n    };\n}\n\n/**\n * Calculates the Total Flex Grow\n */\nfunction getTotalFlexGrow(columns) {\n    let totalFlexGrow = 0;\n    for (const c of columns) {\n        totalFlexGrow += c.flexGrow || 0;\n    }\n    return totalFlexGrow;\n}\n/**\n * Adjusts the column widths.\n * Inspired by: https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableWidthHelper.js\n */\nfunction adjustColumnWidths(allColumns, expectedWidth) {\n    const columnsWidth = columnsTotalWidth(allColumns);\n    const totalFlexGrow = getTotalFlexGrow(allColumns);\n    const colsByGroup = columnsByPin(allColumns);\n    if (columnsWidth !== expectedWidth) {\n        scaleColumns(colsByGroup, expectedWidth, totalFlexGrow);\n    }\n}\n/**\n * Resizes columns based on the flexGrow property, while respecting manually set widths\n */\nfunction scaleColumns(colsByGroup, maxWidth, totalFlexGrow) {\n    // calculate total width and flexgrow points for coulumns that can be resized\n    for (const attr in colsByGroup) {\n        for (const column of colsByGroup[attr]) {\n            if (!column.canAutoResize) {\n                maxWidth -= column.width;\n                totalFlexGrow -= column.flexGrow ? column.flexGrow : 0;\n            }\n            else {\n                column.width = 0;\n            }\n        }\n    }\n    const hasMinWidth = {};\n    let remainingWidth = maxWidth;\n    // resize columns until no width is left to be distributed\n    do {\n        const widthPerFlexPoint = remainingWidth / totalFlexGrow;\n        remainingWidth = 0;\n        for (const attr in colsByGroup) {\n            for (const column of colsByGroup[attr]) {\n                // if the column can be resize and it hasn't reached its minimum width yet\n                if (column.canAutoResize && !hasMinWidth[column.prop]) {\n                    const newWidth = column.width + column.flexGrow * widthPerFlexPoint;\n                    if (column.minWidth !== undefined && newWidth < column.minWidth) {\n                        remainingWidth += newWidth - column.minWidth;\n                        column.width = column.minWidth;\n                        hasMinWidth[column.prop] = true;\n                    }\n                    else {\n                        column.width = newWidth;\n                    }\n                }\n            }\n        }\n    } while (remainingWidth !== 0);\n}\n/**\n * Forces the width of the columns to\n * distribute equally but overflowing when necessary\n *\n * Rules:\n *\n *  - If combined withs are less than the total width of the grid,\n *    proportion the widths given the min / max / normal widths to fill the width.\n *\n *  - If the combined widths, exceed the total width of the grid,\n *    use the standard widths.\n *\n *  - If a column is resized, it should always use that width\n *\n *  - The proportional widths should never fall below min size if specified.\n *\n *  - If the grid starts off small but then becomes greater than the size ( + / - )\n *    the width should use the original width; not the newly proportioned widths.\n */\nfunction forceFillColumnWidths(allColumns, expectedWidth, startIdx, allowBleed, defaultColWidth = 300) {\n    const columnsToResize = allColumns.slice(startIdx + 1, allColumns.length).filter(c => {\n        return c.canAutoResize !== false;\n    });\n    for (const column of columnsToResize) {\n        if (!column.$$oldWidth) {\n            column.$$oldWidth = column.width;\n        }\n    }\n    let additionWidthPerColumn = 0;\n    let exceedsWindow = false;\n    let contentWidth = getContentWidth(allColumns, defaultColWidth);\n    let remainingWidth = expectedWidth - contentWidth;\n    const columnsProcessed = [];\n    const remainingWidthLimit = 1; // when to stop\n    // This loop takes care of the\n    do {\n        additionWidthPerColumn = remainingWidth / columnsToResize.length;\n        exceedsWindow = contentWidth >= expectedWidth;\n        for (const column of columnsToResize) {\n            if (exceedsWindow && allowBleed) {\n                column.width = column.$$oldWidth || column.width || defaultColWidth;\n            }\n            else {\n                const newSize = (column.width || defaultColWidth) + additionWidthPerColumn;\n                if (column.minWidth && newSize < column.minWidth) {\n                    column.width = column.minWidth;\n                    columnsProcessed.push(column);\n                }\n                else if (column.maxWidth && newSize > column.maxWidth) {\n                    column.width = column.maxWidth;\n                    columnsProcessed.push(column);\n                }\n                else {\n                    column.width = newSize;\n                }\n            }\n            column.width = Math.max(0, column.width);\n        }\n        contentWidth = getContentWidth(allColumns);\n        remainingWidth = expectedWidth - contentWidth;\n        removeProcessedColumns(columnsToResize, columnsProcessed);\n    } while (remainingWidth > remainingWidthLimit && columnsToResize.length !== 0);\n}\n/**\n * Remove the processed columns from the current active columns.\n */\nfunction removeProcessedColumns(columnsToResize, columnsProcessed) {\n    for (const column of columnsProcessed) {\n        const index = columnsToResize.indexOf(column);\n        columnsToResize.splice(index, 1);\n    }\n}\n/**\n * Gets the width of the columns\n */\nfunction getContentWidth(allColumns, defaultColWidth = 300) {\n    let contentWidth = 0;\n    for (const column of allColumns) {\n        contentWidth += column.width || defaultColWidth;\n    }\n    return contentWidth;\n}\n\nclass DataTablePagerComponent {\n    constructor() {\n        this.change = new EventEmitter();\n        this._count = 0;\n        this._page = 1;\n        this._size = 0;\n    }\n    set size(val) {\n        this._size = val;\n        this.pages = this.calcPages();\n    }\n    get size() {\n        return this._size;\n    }\n    set count(val) {\n        this._count = val;\n        this.pages = this.calcPages();\n    }\n    get count() {\n        return this._count;\n    }\n    set page(val) {\n        this._page = val;\n        this.pages = this.calcPages();\n    }\n    get page() {\n        return this._page;\n    }\n    get totalPages() {\n        const count = this.size < 1 ? 1 : Math.ceil(this.count / this.size);\n        return Math.max(count || 0, 1);\n    }\n    canPrevious() {\n        return this.page > 1;\n    }\n    canNext() {\n        return this.page < this.totalPages;\n    }\n    prevPage() {\n        this.selectPage(this.page - 1);\n    }\n    nextPage() {\n        this.selectPage(this.page + 1);\n    }\n    selectPage(page) {\n        if (page > 0 && page <= this.totalPages && page !== this.page) {\n            this.page = page;\n            this.change.emit({\n                page\n            });\n        }\n    }\n    calcPages(page) {\n        const pages = [];\n        let startPage = 1;\n        let endPage = this.totalPages;\n        const maxSize = 5;\n        const isMaxSized = maxSize < this.totalPages;\n        page = page || this.page;\n        if (isMaxSized) {\n            startPage = page - Math.floor(maxSize / 2);\n            endPage = page + Math.floor(maxSize / 2);\n            if (startPage < 1) {\n                startPage = 1;\n                endPage = Math.min(startPage + maxSize - 1, this.totalPages);\n            }\n            else if (endPage > this.totalPages) {\n                startPage = Math.max(this.totalPages - maxSize + 1, 1);\n                endPage = this.totalPages;\n            }\n        }\n        for (let num = startPage; num <= endPage; num++) {\n            pages.push({\n                number: num,\n                text: num\n            });\n        }\n        return pages;\n    }\n}\nDataTablePagerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTablePagerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nDataTablePagerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTablePagerComponent, selector: \"datatable-pager\", inputs: { pagerLeftArrowIcon: \"pagerLeftArrowIcon\", pagerRightArrowIcon: \"pagerRightArrowIcon\", pagerPreviousIcon: \"pagerPreviousIcon\", pagerNextIcon: \"pagerNextIcon\", size: \"size\", count: \"count\", page: \"page\" }, outputs: { change: \"change\" }, host: { classAttribute: \"datatable-pager\" }, ngImport: i0, template: `\n    <ul class=\"pager\">\n      <li [class.disabled]=\"!canPrevious()\">\n        <a role=\"button\" aria-label=\"go to first page\" href=\"javascript:void(0)\" (click)=\"selectPage(1)\">\n          <i class=\"{{ pagerPreviousIcon }}\"></i>\n        </a>\n      </li>\n      <li [class.disabled]=\"!canPrevious()\">\n        <a role=\"button\" aria-label=\"go to previous page\" href=\"javascript:void(0)\" (click)=\"prevPage()\">\n          <i class=\"{{ pagerLeftArrowIcon }}\"></i>\n        </a>\n      </li>\n      <li\n        role=\"button\"\n        [attr.aria-label]=\"'page ' + pg.number\"\n        class=\"pages\"\n        *ngFor=\"let pg of pages\"\n        [class.active]=\"pg.number === page\"\n      >\n        <a href=\"javascript:void(0)\" (click)=\"selectPage(pg.number)\">\n          {{ pg.text }}\n        </a>\n      </li>\n      <li [class.disabled]=\"!canNext()\">\n        <a role=\"button\" aria-label=\"go to next page\" href=\"javascript:void(0)\" (click)=\"nextPage()\">\n          <i class=\"{{ pagerRightArrowIcon }}\"></i>\n        </a>\n      </li>\n      <li [class.disabled]=\"!canNext()\">\n        <a role=\"button\" aria-label=\"go to last page\" href=\"javascript:void(0)\" (click)=\"selectPage(totalPages)\">\n          <i class=\"{{ pagerNextIcon }}\"></i>\n        </a>\n      </li>\n    </ul>\n  `, isInline: true, directives: [{ type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTablePagerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-pager',\n                    template: `\n    <ul class=\"pager\">\n      <li [class.disabled]=\"!canPrevious()\">\n        <a role=\"button\" aria-label=\"go to first page\" href=\"javascript:void(0)\" (click)=\"selectPage(1)\">\n          <i class=\"{{ pagerPreviousIcon }}\"></i>\n        </a>\n      </li>\n      <li [class.disabled]=\"!canPrevious()\">\n        <a role=\"button\" aria-label=\"go to previous page\" href=\"javascript:void(0)\" (click)=\"prevPage()\">\n          <i class=\"{{ pagerLeftArrowIcon }}\"></i>\n        </a>\n      </li>\n      <li\n        role=\"button\"\n        [attr.aria-label]=\"'page ' + pg.number\"\n        class=\"pages\"\n        *ngFor=\"let pg of pages\"\n        [class.active]=\"pg.number === page\"\n      >\n        <a href=\"javascript:void(0)\" (click)=\"selectPage(pg.number)\">\n          {{ pg.text }}\n        </a>\n      </li>\n      <li [class.disabled]=\"!canNext()\">\n        <a role=\"button\" aria-label=\"go to next page\" href=\"javascript:void(0)\" (click)=\"nextPage()\">\n          <i class=\"{{ pagerRightArrowIcon }}\"></i>\n        </a>\n      </li>\n      <li [class.disabled]=\"!canNext()\">\n        <a role=\"button\" aria-label=\"go to last page\" href=\"javascript:void(0)\" (click)=\"selectPage(totalPages)\">\n          <i class=\"{{ pagerNextIcon }}\"></i>\n        </a>\n      </li>\n    </ul>\n  `,\n                    host: {\n                        class: 'datatable-pager'\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { pagerLeftArrowIcon: [{\n                type: Input\n            }], pagerRightArrowIcon: [{\n                type: Input\n            }], pagerPreviousIcon: [{\n                type: Input\n            }], pagerNextIcon: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], count: [{\n                type: Input\n            }], page: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }] } });\n\nclass DataTableFooterComponent {\n    constructor() {\n        this.selectedCount = 0;\n        this.page = new EventEmitter();\n    }\n    get isVisible() {\n        return this.rowCount / this.pageSize > 1;\n    }\n    get curPage() {\n        return this.offset + 1;\n    }\n}\nDataTableFooterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableFooterComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nDataTableFooterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableFooterComponent, selector: \"datatable-footer\", inputs: { footerHeight: \"footerHeight\", rowCount: \"rowCount\", pageSize: \"pageSize\", offset: \"offset\", pagerLeftArrowIcon: \"pagerLeftArrowIcon\", pagerRightArrowIcon: \"pagerRightArrowIcon\", pagerPreviousIcon: \"pagerPreviousIcon\", pagerNextIcon: \"pagerNextIcon\", totalMessage: \"totalMessage\", footerTemplate: \"footerTemplate\", selectedCount: \"selectedCount\", selectedMessage: \"selectedMessage\" }, outputs: { page: \"page\" }, host: { classAttribute: \"datatable-footer\" }, ngImport: i0, template: `\n    <div\n      class=\"datatable-footer-inner\"\n      [ngClass]=\"{ 'selected-count': selectedMessage }\"\n      [style.height.px]=\"footerHeight\"\n    >\n      <ng-template\n        *ngIf=\"footerTemplate\"\n        [ngTemplateOutlet]=\"footerTemplate.template\"\n        [ngTemplateOutletContext]=\"{\n          rowCount: rowCount,\n          pageSize: pageSize,\n          selectedCount: selectedCount,\n          curPage: curPage,\n          offset: offset\n        }\"\n      >\n      </ng-template>\n      <div class=\"page-count\" *ngIf=\"!footerTemplate\">\n        <span *ngIf=\"selectedMessage\"> {{ selectedCount?.toLocaleString() }} {{ selectedMessage }} / </span>\n        {{ rowCount?.toLocaleString() }} {{ totalMessage }}\n      </div>\n      <datatable-pager\n        *ngIf=\"!footerTemplate\"\n        [pagerLeftArrowIcon]=\"pagerLeftArrowIcon\"\n        [pagerRightArrowIcon]=\"pagerRightArrowIcon\"\n        [pagerPreviousIcon]=\"pagerPreviousIcon\"\n        [pagerNextIcon]=\"pagerNextIcon\"\n        [page]=\"curPage\"\n        [size]=\"pageSize\"\n        [count]=\"rowCount\"\n        [hidden]=\"!isVisible\"\n        (change)=\"page.emit($event)\"\n      >\n      </datatable-pager>\n    </div>\n  `, isInline: true, components: [{ type: DataTablePagerComponent, selector: \"datatable-pager\", inputs: [\"pagerLeftArrowIcon\", \"pagerRightArrowIcon\", \"pagerPreviousIcon\", \"pagerNextIcon\", \"size\", \"count\", \"page\"], outputs: [\"change\"] }], directives: [{ type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableFooterComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-footer',\n                    template: `\n    <div\n      class=\"datatable-footer-inner\"\n      [ngClass]=\"{ 'selected-count': selectedMessage }\"\n      [style.height.px]=\"footerHeight\"\n    >\n      <ng-template\n        *ngIf=\"footerTemplate\"\n        [ngTemplateOutlet]=\"footerTemplate.template\"\n        [ngTemplateOutletContext]=\"{\n          rowCount: rowCount,\n          pageSize: pageSize,\n          selectedCount: selectedCount,\n          curPage: curPage,\n          offset: offset\n        }\"\n      >\n      </ng-template>\n      <div class=\"page-count\" *ngIf=\"!footerTemplate\">\n        <span *ngIf=\"selectedMessage\"> {{ selectedCount?.toLocaleString() }} {{ selectedMessage }} / </span>\n        {{ rowCount?.toLocaleString() }} {{ totalMessage }}\n      </div>\n      <datatable-pager\n        *ngIf=\"!footerTemplate\"\n        [pagerLeftArrowIcon]=\"pagerLeftArrowIcon\"\n        [pagerRightArrowIcon]=\"pagerRightArrowIcon\"\n        [pagerPreviousIcon]=\"pagerPreviousIcon\"\n        [pagerNextIcon]=\"pagerNextIcon\"\n        [page]=\"curPage\"\n        [size]=\"pageSize\"\n        [count]=\"rowCount\"\n        [hidden]=\"!isVisible\"\n        (change)=\"page.emit($event)\"\n      >\n      </datatable-pager>\n    </div>\n  `,\n                    host: {\n                        class: 'datatable-footer'\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { footerHeight: [{\n                type: Input\n            }], rowCount: [{\n                type: Input\n            }], pageSize: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], pagerLeftArrowIcon: [{\n                type: Input\n            }], pagerRightArrowIcon: [{\n                type: Input\n            }], pagerPreviousIcon: [{\n                type: Input\n            }], pagerNextIcon: [{\n                type: Input\n            }], totalMessage: [{\n                type: Input\n            }], footerTemplate: [{\n                type: Input\n            }], selectedCount: [{\n                type: Input\n            }], selectedMessage: [{\n                type: Input\n            }], page: [{\n                type: Output\n            }] } });\n\nclass DatatableComponent {\n    constructor(scrollbarHelper, dimensionsHelper, cd, element, differs, columnChangesService, configuration) {\n        this.scrollbarHelper = scrollbarHelper;\n        this.dimensionsHelper = dimensionsHelper;\n        this.cd = cd;\n        this.columnChangesService = columnChangesService;\n        this.configuration = configuration;\n        /**\n         * List of row objects that should be\n         * represented as selected in the grid.\n         * Default value: `[]`\n         */\n        this.selected = [];\n        /**\n         * Enable vertical scrollbars\n         */\n        this.scrollbarV = false;\n        /**\n         * Enable horz scrollbars\n         */\n        this.scrollbarH = false;\n        /**\n         * The row height; which is necessary\n         * to calculate the height for the lazy rendering.\n         */\n        this.rowHeight = 30;\n        /**\n         * Type of column width distribution formula.\n         * Example: flex, force, standard\n         */\n        this.columnMode = ColumnMode.standard;\n        /**\n         * The minimum header height in pixels.\n         * Pass a falsey for no header\n         */\n        this.headerHeight = 30;\n        /**\n         * The minimum footer height in pixels.\n         * Pass falsey for no footer\n         */\n        this.footerHeight = 0;\n        /**\n         * If the table should use external paging\n         * otherwise its assumed that all data is preloaded.\n         */\n        this.externalPaging = false;\n        /**\n         * If the table should use external sorting or\n         * the built-in basic sorting.\n         */\n        this.externalSorting = false;\n        /**\n         * Show the linear loading bar.\n         * Default value: `false`\n         */\n        this.loadingIndicator = false;\n        /**\n         * Enable/Disable ability to re-order columns\n         * by dragging them.\n         */\n        this.reorderable = true;\n        /**\n         * Swap columns on re-order columns or\n         * move them.\n         */\n        this.swapColumns = true;\n        /**\n         * The type of sorting\n         */\n        this.sortType = SortType.single;\n        /**\n         * Array of sorted columns by property and type.\n         * Default value: `[]`\n         */\n        this.sorts = [];\n        /**\n         * Css class overrides\n         */\n        this.cssClasses = {\n            sortAscending: 'datatable-icon-up',\n            sortDescending: 'datatable-icon-down',\n            sortUnset: 'datatable-icon-sort-unset',\n            pagerLeftArrow: 'datatable-icon-left',\n            pagerRightArrow: 'datatable-icon-right',\n            pagerPrevious: 'datatable-icon-prev',\n            pagerNext: 'datatable-icon-skip'\n        };\n        /**\n         * Message overrides for localization\n         *\n         * emptyMessage     [default] = 'No data to display'\n         * totalMessage     [default] = 'total'\n         * selectedMessage  [default] = 'selected'\n         */\n        this.messages = {\n            // Message to show when array is presented\n            // but contains no values\n            emptyMessage: 'No data to display',\n            // Footer total message\n            totalMessage: 'total',\n            // Footer selected message\n            selectedMessage: 'selected'\n        };\n        /**\n         * A boolean you can use to set the detault behaviour of rows and groups\n         * whether they will start expanded or not. If ommited the default is NOT expanded.\n         *\n         */\n        this.groupExpansionDefault = false;\n        /**\n         * Property to which you can use for determining select all\n         * rows on current page or not.\n         *\n         * @memberOf DatatableComponent\n         */\n        this.selectAllRowsOnPage = false;\n        /**\n         * A flag for row virtualization on / off\n         */\n        this.virtualization = true;\n        /**\n         * A flag for switching summary row on / off\n         */\n        this.summaryRow = false;\n        /**\n         * A height of summary row\n         */\n        this.summaryHeight = 30;\n        /**\n         * A property holds a summary row position: top/bottom\n         */\n        this.summaryPosition = 'top';\n        /**\n         * Body was scrolled typically in a `scrollbarV:true` scenario.\n         */\n        this.scroll = new EventEmitter();\n        /**\n         * A cell or row was focused via keyboard or mouse click.\n         */\n        this.activate = new EventEmitter();\n        /**\n         * A cell or row was selected.\n         */\n        this.select = new EventEmitter();\n        /**\n         * Column sort was invoked.\n         */\n        this.sort = new EventEmitter();\n        /**\n         * The table was paged either triggered by the pager or the body scroll.\n         */\n        this.page = new EventEmitter();\n        /**\n         * Columns were re-ordered.\n         */\n        this.reorder = new EventEmitter();\n        /**\n         * Column was resized.\n         */\n        this.resize = new EventEmitter();\n        /**\n         * The context menu was invoked on the table.\n         * type indicates whether the header or the body was clicked.\n         * content contains either the column or the row that was clicked.\n         */\n        this.tableContextmenu = new EventEmitter(false);\n        /**\n         * A row was expanded ot collapsed for tree\n         */\n        this.treeAction = new EventEmitter();\n        this.rowCount = 0;\n        this._offsetX = new BehaviorSubject(0);\n        this._count = 0;\n        this._offset = 0;\n        this._subscriptions = [];\n        /**\n         * This will be used when displaying or selecting rows.\n         * when tracking/comparing them, we'll use the value of this fn,\n         *\n         * (`fn(x) === fn(y)` instead of `x === y`)\n         */\n        this.rowIdentity = (x) => {\n            if (this._groupRowsBy) {\n                // each group in groupedRows are stored as {key, value: [rows]},\n                // where key is the groupRowsBy index\n                return x.key;\n            }\n            else {\n                return x;\n            }\n        };\n        // get ref to elm for measuring\n        this.element = element.nativeElement;\n        this.rowDiffer = differs.find({}).create();\n        // apply global settings from Module.forRoot\n        if (this.configuration && this.configuration.messages) {\n            this.messages = Object.assign({}, this.configuration.messages);\n        }\n    }\n    /**\n     * Rows that are displayed in the table.\n     */\n    set rows(val) {\n        this._rows = val;\n        if (val) {\n            this._internalRows = [...val];\n        }\n        // auto sort on new updates\n        if (!this.externalSorting) {\n            this.sortInternalRows();\n        }\n        // auto group by parent on new update\n        this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation));\n        // recalculate sizes/etc\n        this.recalculate();\n        if (this._rows && this._groupRowsBy) {\n            // If a column has been specified in _groupRowsBy created a new array with the data grouped by that row\n            this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\n        }\n        this.cd.markForCheck();\n    }\n    /**\n     * Gets the rows.\n     */\n    get rows() {\n        return this._rows;\n    }\n    /**\n     * This attribute allows the user to set the name of the column to group the data with\n     */\n    set groupRowsBy(val) {\n        if (val) {\n            this._groupRowsBy = val;\n            if (this._rows && this._groupRowsBy) {\n                // cretes a new array with the data grouped\n                this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\n            }\n        }\n    }\n    get groupRowsBy() {\n        return this._groupRowsBy;\n    }\n    /**\n     * Columns to be displayed.\n     */\n    set columns(val) {\n        if (val) {\n            this._internalColumns = [...val];\n            setColumnDefaults(this._internalColumns);\n            this.recalculateColumns();\n        }\n        this._columns = val;\n    }\n    /**\n     * Get the columns.\n     */\n    get columns() {\n        return this._columns;\n    }\n    /**\n     * The page size to be shown.\n     * Default value: `undefined`\n     */\n    set limit(val) {\n        this._limit = val;\n        // recalculate sizes/etc\n        this.recalculate();\n    }\n    /**\n     * Gets the limit.\n     */\n    get limit() {\n        return this._limit;\n    }\n    /**\n     * The total count of all rows.\n     * Default value: `0`\n     */\n    set count(val) {\n        this._count = val;\n        // recalculate sizes/etc\n        this.recalculate();\n    }\n    /**\n     * Gets the count.\n     */\n    get count() {\n        return this._count;\n    }\n    /**\n     * The current offset ( page - 1 ) shown.\n     * Default value: `0`\n     */\n    set offset(val) {\n        this._offset = val;\n    }\n    get offset() {\n        return Math.max(Math.min(this._offset, Math.ceil(this.rowCount / this.pageSize) - 1), 0);\n    }\n    /**\n     * CSS class applied if the header height if fixed height.\n     */\n    get isFixedHeader() {\n        const headerHeight = this.headerHeight;\n        return typeof headerHeight === 'string' ? headerHeight !== 'auto' : true;\n    }\n    /**\n     * CSS class applied to the root element if\n     * the row heights are fixed heights.\n     */\n    get isFixedRow() {\n        return this.rowHeight !== 'auto';\n    }\n    /**\n     * CSS class applied to root element if\n     * vertical scrolling is enabled.\n     */\n    get isVertScroll() {\n        return this.scrollbarV;\n    }\n    /**\n     * CSS class applied to root element if\n     * virtualization is enabled.\n     */\n    get isVirtualized() {\n        return this.virtualization;\n    }\n    /**\n     * CSS class applied to the root element\n     * if the horziontal scrolling is enabled.\n     */\n    get isHorScroll() {\n        return this.scrollbarH;\n    }\n    /**\n     * CSS class applied to root element is selectable.\n     */\n    get isSelectable() {\n        return this.selectionType !== undefined;\n    }\n    /**\n     * CSS class applied to root is checkbox selection.\n     */\n    get isCheckboxSelection() {\n        return this.selectionType === SelectionType.checkbox;\n    }\n    /**\n     * CSS class applied to root if cell selection.\n     */\n    get isCellSelection() {\n        return this.selectionType === SelectionType.cell;\n    }\n    /**\n     * CSS class applied to root if single select.\n     */\n    get isSingleSelection() {\n        return this.selectionType === SelectionType.single;\n    }\n    /**\n     * CSS class added to root element if mulit select\n     */\n    get isMultiSelection() {\n        return this.selectionType === SelectionType.multi;\n    }\n    /**\n     * CSS class added to root element if mulit click select\n     */\n    get isMultiClickSelection() {\n        return this.selectionType === SelectionType.multiClick;\n    }\n    /**\n     * Column templates gathered from `ContentChildren`\n     * if described in your markup.\n     */\n    set columnTemplates(val) {\n        this._columnTemplates = val;\n        this.translateColumns(val);\n    }\n    /**\n     * Returns the column templates.\n     */\n    get columnTemplates() {\n        return this._columnTemplates;\n    }\n    /**\n     * Returns if all rows are selected.\n     */\n    get allRowsSelected() {\n        let allRowsSelected = this.rows && this.selected && this.selected.length === this.rows.length;\n        if (this.bodyComponent && this.selectAllRowsOnPage) {\n            const indexes = this.bodyComponent.indexes;\n            const rowsOnPage = indexes.last - indexes.first;\n            allRowsSelected = this.selected.length === rowsOnPage;\n        }\n        return this.selected && this.rows && this.rows.length !== 0 && allRowsSelected;\n    }\n    /**\n     * Lifecycle hook that is called after data-bound\n     * properties of a directive are initialized.\n     */\n    ngOnInit() {\n        // need to call this immediatly to size\n        // if the table is hidden the visibility\n        // listener will invoke this itself upon show\n        this.recalculate();\n    }\n    /**\n     * Lifecycle hook that is called after a component's\n     * view has been fully initialized.\n     */\n    ngAfterViewInit() {\n        if (!this.externalSorting) {\n            this.sortInternalRows();\n        }\n        // this has to be done to prevent the change detection\n        // tree from freaking out because we are readjusting\n        if (typeof requestAnimationFrame === 'undefined') {\n            return;\n        }\n        requestAnimationFrame(() => {\n            this.recalculate();\n            // emit page for virtual server-side kickoff\n            if (this.externalPaging && this.scrollbarV) {\n                this.page.emit({\n                    count: this.count,\n                    pageSize: this.pageSize,\n                    limit: this.limit,\n                    offset: 0\n                });\n            }\n        });\n    }\n    /**\n     * Lifecycle hook that is called after a component's\n     * content has been fully initialized.\n     */\n    ngAfterContentInit() {\n        this.columnTemplates.changes.subscribe(v => this.translateColumns(v));\n        this.listenForColumnInputChanges();\n    }\n    /**\n     * Translates the templates to the column objects\n     */\n    translateColumns(val) {\n        if (val) {\n            const arr = val.toArray();\n            if (arr.length) {\n                this._internalColumns = translateTemplates(arr);\n                setColumnDefaults(this._internalColumns);\n                this.recalculateColumns();\n                this.sortInternalRows();\n                this.cd.markForCheck();\n            }\n        }\n    }\n    /**\n     * Creates a map with the data grouped by the user choice of grouping index\n     *\n     * @param originalArray the original array passed via parameter\n     * @param groupByIndex  the index of the column to group the data by\n     */\n    groupArrayBy(originalArray, groupBy) {\n        // create a map to hold groups with their corresponding results\n        const map = new Map();\n        let i = 0;\n        originalArray.forEach((item) => {\n            const key = item[groupBy];\n            if (!map.has(key)) {\n                map.set(key, [item]);\n            }\n            else {\n                map.get(key).push(item);\n            }\n            i++;\n        });\n        const addGroup = (key, value) => {\n            return { key, value };\n        };\n        // convert map back to a simple array of objects\n        return Array.from(map, x => addGroup(x[0], x[1]));\n    }\n    /*\n     * Lifecycle hook that is called when Angular dirty checks a directive.\n     */\n    ngDoCheck() {\n        if (this.rowDiffer.diff(this.rows)) {\n            if (!this.externalSorting) {\n                this.sortInternalRows();\n            }\n            else {\n                this._internalRows = [...this.rows];\n            }\n            // auto group by parent on new update\n            this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation));\n            this.recalculatePages();\n            this.cd.markForCheck();\n        }\n    }\n    /**\n     * Recalc's the sizes of the grid.\n     *\n     * Updated automatically on changes to:\n     *\n     *  - Columns\n     *  - Rows\n     *  - Paging related\n     *\n     * Also can be manually invoked or upon window resize.\n     */\n    recalculate() {\n        this.recalculateDims();\n        this.recalculateColumns();\n        this.cd.markForCheck();\n    }\n    /**\n     * Window resize handler to update sizes.\n     */\n    onWindowResize() {\n        this.recalculate();\n    }\n    /**\n     * Recalulcates the column widths based on column width\n     * distribution mode and scrollbar offsets.\n     */\n    recalculateColumns(columns = this._internalColumns, forceIdx = -1, allowBleed = this.scrollbarH) {\n        if (!columns)\n            return undefined;\n        let width = this._innerWidth;\n        if (this.scrollbarV) {\n            width = width - this.scrollbarHelper.width;\n        }\n        if (this.columnMode === ColumnMode.force) {\n            forceFillColumnWidths(columns, width, forceIdx, allowBleed);\n        }\n        else if (this.columnMode === ColumnMode.flex) {\n            adjustColumnWidths(columns, width);\n        }\n        return columns;\n    }\n    /**\n     * Recalculates the dimensions of the table size.\n     * Internally calls the page size and row count calcs too.\n     *\n     */\n    recalculateDims() {\n        const dims = this.dimensionsHelper.getDimensions(this.element);\n        this._innerWidth = Math.floor(dims.width);\n        if (this.scrollbarV) {\n            let height = dims.height;\n            if (this.headerHeight)\n                height = height - this.headerHeight;\n            if (this.footerHeight)\n                height = height - this.footerHeight;\n            this.bodyHeight = height;\n        }\n        this.recalculatePages();\n    }\n    /**\n     * Recalculates the pages after a update.\n     */\n    recalculatePages() {\n        this.pageSize = this.calcPageSize();\n        this.rowCount = this.calcRowCount();\n    }\n    /**\n     * Body triggered a page event.\n     */\n    onBodyPage({ offset }) {\n        // Avoid pagination caming from body events like scroll when the table\n        // has no virtualization and the external paging is enable.\n        // This means, let's the developer handle pagination by my him(her) self\n        if (this.externalPaging && !this.virtualization) {\n            return;\n        }\n        this.offset = offset;\n        this.page.emit({\n            count: this.count,\n            pageSize: this.pageSize,\n            limit: this.limit,\n            offset: this.offset\n        });\n    }\n    /**\n     * The body triggered a scroll event.\n     */\n    onBodyScroll(event) {\n        this._offsetX.next(event.offsetX);\n        this.scroll.emit(event);\n        this.cd.detectChanges();\n    }\n    /**\n     * The footer triggered a page event.\n     */\n    onFooterPage(event) {\n        this.offset = event.page - 1;\n        this.bodyComponent.updateOffsetY(this.offset);\n        this.page.emit({\n            count: this.count,\n            pageSize: this.pageSize,\n            limit: this.limit,\n            offset: this.offset\n        });\n        if (this.selectAllRowsOnPage) {\n            this.selected = [];\n            this.select.emit({\n                selected: this.selected\n            });\n        }\n    }\n    /**\n     * Recalculates the sizes of the page\n     */\n    calcPageSize(val = this.rows) {\n        // Keep the page size constant even if the row has been expanded.\n        // This is because an expanded row is still considered to be a child of\n        // the original row.  Hence calculation would use rowHeight only.\n        if (this.scrollbarV && this.virtualization) {\n            const size = Math.ceil(this.bodyHeight / this.rowHeight);\n            return Math.max(size, 0);\n        }\n        // if limit is passed, we are paging\n        if (this.limit !== undefined) {\n            return this.limit;\n        }\n        // otherwise use row length\n        if (val) {\n            return val.length;\n        }\n        // other empty :(\n        return 0;\n    }\n    /**\n     * Calculates the row count.\n     */\n    calcRowCount(val = this.rows) {\n        if (!this.externalPaging) {\n            if (!val)\n                return 0;\n            if (this.groupedRows) {\n                return this.groupedRows.length;\n            }\n            else if (this.treeFromRelation != null && this.treeToRelation != null) {\n                return this._internalRows.length;\n            }\n            else {\n                return val.length;\n            }\n        }\n        return this.count;\n    }\n    /**\n     * The header triggered a contextmenu event.\n     */\n    onColumnContextmenu({ event, column }) {\n        this.tableContextmenu.emit({ event, type: ContextmenuType.header, content: column });\n    }\n    /**\n     * The body triggered a contextmenu event.\n     */\n    onRowContextmenu({ event, row }) {\n        this.tableContextmenu.emit({ event, type: ContextmenuType.body, content: row });\n    }\n    /**\n     * The header triggered a column resize event.\n     */\n    onColumnResize({ column, newValue }) {\n        /* Safari/iOS 10.2 workaround */\n        if (column === undefined) {\n            return;\n        }\n        let idx;\n        const cols = this._internalColumns.map((c, i) => {\n            c = Object.assign({}, c);\n            if (c.$$id === column.$$id) {\n                idx = i;\n                c.width = newValue;\n                // set this so we can force the column\n                // width distribution to be to this value\n                c.$$oldWidth = newValue;\n            }\n            return c;\n        });\n        this.recalculateColumns(cols, idx);\n        this._internalColumns = cols;\n        this.resize.emit({\n            column,\n            newValue\n        });\n    }\n    /**\n     * The header triggered a column re-order event.\n     */\n    onColumnReorder({ column, newValue, prevValue }) {\n        const cols = this._internalColumns.map(c => {\n            return Object.assign({}, c);\n        });\n        if (this.swapColumns) {\n            const prevCol = cols[newValue];\n            cols[newValue] = column;\n            cols[prevValue] = prevCol;\n        }\n        else {\n            if (newValue > prevValue) {\n                const movedCol = cols[prevValue];\n                for (let i = prevValue; i < newValue; i++) {\n                    cols[i] = cols[i + 1];\n                }\n                cols[newValue] = movedCol;\n            }\n            else {\n                const movedCol = cols[prevValue];\n                for (let i = prevValue; i > newValue; i--) {\n                    cols[i] = cols[i - 1];\n                }\n                cols[newValue] = movedCol;\n            }\n        }\n        this._internalColumns = cols;\n        this.reorder.emit({\n            column,\n            newValue,\n            prevValue\n        });\n    }\n    /**\n     * The header triggered a column sort event.\n     */\n    onColumnSort(event) {\n        // clean selected rows\n        if (this.selectAllRowsOnPage) {\n            this.selected = [];\n            this.select.emit({\n                selected: this.selected\n            });\n        }\n        this.sorts = event.sorts;\n        // this could be optimized better since it will resort\n        // the rows again on the 'push' detection...\n        if (this.externalSorting === false) {\n            // don't use normal setter so we don't resort\n            this.sortInternalRows();\n        }\n        // auto group by parent on new update\n        this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation));\n        // Always go to first page when sorting to see the newly sorted data\n        this.offset = 0;\n        this.bodyComponent.updateOffsetY(this.offset);\n        this.sort.emit(event);\n    }\n    /**\n     * Toggle all row selection\n     */\n    onHeaderSelect(event) {\n        if (this.bodyComponent && this.selectAllRowsOnPage) {\n            // before we splice, chk if we currently have all selected\n            const first = this.bodyComponent.indexes.first;\n            const last = this.bodyComponent.indexes.last;\n            const allSelected = this.selected.length === last - first;\n            // remove all existing either way\n            this.selected = [];\n            // do the opposite here\n            if (!allSelected) {\n                this.selected.push(...this._internalRows.slice(first, last));\n            }\n        }\n        else {\n            // before we splice, chk if we currently have all selected\n            const allSelected = this.selected.length === this.rows.length;\n            // remove all existing either way\n            this.selected = [];\n            // do the opposite here\n            if (!allSelected) {\n                this.selected.push(...this.rows);\n            }\n        }\n        this.select.emit({\n            selected: this.selected\n        });\n    }\n    /**\n     * A row was selected from body\n     */\n    onBodySelect(event) {\n        this.select.emit(event);\n    }\n    /**\n     * A row was expanded or collapsed for tree\n     */\n    onTreeAction(event) {\n        const row = event.row;\n        // TODO: For duplicated items this will not work\n        const rowIndex = this._rows.findIndex(r => r[this.treeToRelation] === event.row[this.treeToRelation]);\n        this.treeAction.emit({ row, rowIndex });\n    }\n    ngOnDestroy() {\n        this._subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n    /**\n     * listen for changes to input bindings of all DataTableColumnDirective and\n     * trigger the columnTemplates.changes observable to emit\n     */\n    listenForColumnInputChanges() {\n        this._subscriptions.push(this.columnChangesService.columnInputChanges$.subscribe(() => {\n            if (this.columnTemplates) {\n                this.columnTemplates.notifyOnChanges();\n            }\n        }));\n    }\n    sortInternalRows() {\n        this._internalRows = sortRows(this._internalRows, this._internalColumns, this.sorts);\n    }\n}\nDatatableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableComponent, deps: [{ token: ScrollbarHelper, skipSelf: true }, { token: DimensionsHelper, skipSelf: true }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.KeyValueDiffers }, { token: ColumnChangesService }, { token: 'configuration', optional: true }], target: i0.ɵɵFactoryTarget.Component });\nDatatableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DatatableComponent, selector: \"ngx-datatable\", inputs: { targetMarkerTemplate: \"targetMarkerTemplate\", rows: \"rows\", groupRowsBy: \"groupRowsBy\", groupedRows: \"groupedRows\", columns: \"columns\", selected: \"selected\", scrollbarV: \"scrollbarV\", scrollbarH: \"scrollbarH\", rowHeight: \"rowHeight\", columnMode: \"columnMode\", headerHeight: \"headerHeight\", footerHeight: \"footerHeight\", externalPaging: \"externalPaging\", externalSorting: \"externalSorting\", limit: \"limit\", count: \"count\", offset: \"offset\", loadingIndicator: \"loadingIndicator\", selectionType: \"selectionType\", reorderable: \"reorderable\", swapColumns: \"swapColumns\", sortType: \"sortType\", sorts: \"sorts\", cssClasses: \"cssClasses\", messages: \"messages\", rowClass: \"rowClass\", selectCheck: \"selectCheck\", displayCheck: \"displayCheck\", groupExpansionDefault: \"groupExpansionDefault\", trackByProp: \"trackByProp\", selectAllRowsOnPage: \"selectAllRowsOnPage\", virtualization: \"virtualization\", treeFromRelation: \"treeFromRelation\", treeToRelation: \"treeToRelation\", summaryRow: \"summaryRow\", summaryHeight: \"summaryHeight\", summaryPosition: \"summaryPosition\", rowIdentity: \"rowIdentity\" }, outputs: { scroll: \"scroll\", activate: \"activate\", select: \"select\", sort: \"sort\", page: \"page\", reorder: \"reorder\", resize: \"resize\", tableContextmenu: \"tableContextmenu\", treeAction: \"treeAction\" }, host: { listeners: { \"window:resize\": \"onWindowResize()\" }, properties: { \"class.fixed-header\": \"this.isFixedHeader\", \"class.fixed-row\": \"this.isFixedRow\", \"class.scroll-vertical\": \"this.isVertScroll\", \"class.virtualized\": \"this.isVirtualized\", \"class.scroll-horz\": \"this.isHorScroll\", \"class.selectable\": \"this.isSelectable\", \"class.checkbox-selection\": \"this.isCheckboxSelection\", \"class.cell-selection\": \"this.isCellSelection\", \"class.single-selection\": \"this.isSingleSelection\", \"class.multi-selection\": \"this.isMultiSelection\", \"class.multi-click-selection\": \"this.isMultiClickSelection\" }, classAttribute: \"ngx-datatable\" }, queries: [{ propertyName: \"rowDetail\", first: true, predicate: DatatableRowDetailDirective, descendants: true }, { propertyName: \"groupHeader\", first: true, predicate: DatatableGroupHeaderDirective, descendants: true }, { propertyName: \"footer\", first: true, predicate: DatatableFooterDirective, descendants: true }, { propertyName: \"columnTemplates\", predicate: DataTableColumnDirective }], viewQueries: [{ propertyName: \"bodyComponent\", first: true, predicate: DataTableBodyComponent, descendants: true }, { propertyName: \"headerComponent\", first: true, predicate: DataTableHeaderComponent, descendants: true }], ngImport: i0, template: \"<div role=\\\"table\\\" visibilityObserver (visible)=\\\"recalculate()\\\">\\n  <datatable-header\\n    role=\\\"rowgroup\\\"\\n    *ngIf=\\\"headerHeight\\\"\\n    [sorts]=\\\"sorts\\\"\\n    [sortType]=\\\"sortType\\\"\\n    [scrollbarH]=\\\"scrollbarH\\\"\\n    [innerWidth]=\\\"_innerWidth\\\"\\n    [offsetX]=\\\"_offsetX | async\\\"\\n    [dealsWithGroup]=\\\"groupedRows !== undefined\\\"\\n    [columns]=\\\"_internalColumns\\\"\\n    [headerHeight]=\\\"headerHeight\\\"\\n    [reorderable]=\\\"reorderable\\\"\\n    [targetMarkerTemplate]=\\\"targetMarkerTemplate\\\"\\n    [sortAscendingIcon]=\\\"cssClasses.sortAscending\\\"\\n    [sortDescendingIcon]=\\\"cssClasses.sortDescending\\\"\\n    [sortUnsetIcon]=\\\"cssClasses.sortUnset\\\"\\n    [allRowsSelected]=\\\"allRowsSelected\\\"\\n    [selectionType]=\\\"selectionType\\\"\\n    (sort)=\\\"onColumnSort($event)\\\"\\n    (resize)=\\\"onColumnResize($event)\\\"\\n    (reorder)=\\\"onColumnReorder($event)\\\"\\n    (select)=\\\"onHeaderSelect($event)\\\"\\n    (columnContextmenu)=\\\"onColumnContextmenu($event)\\\"\\n  >\\n  </datatable-header>\\n  <datatable-body\\n    role=\\\"rowgroup\\\"\\n    [groupRowsBy]=\\\"groupRowsBy\\\"\\n    [groupedRows]=\\\"groupedRows\\\"\\n    [rows]=\\\"_internalRows\\\"\\n    [groupExpansionDefault]=\\\"groupExpansionDefault\\\"\\n    [scrollbarV]=\\\"scrollbarV\\\"\\n    [scrollbarH]=\\\"scrollbarH\\\"\\n    [virtualization]=\\\"virtualization\\\"\\n    [loadingIndicator]=\\\"loadingIndicator\\\"\\n    [externalPaging]=\\\"externalPaging\\\"\\n    [rowHeight]=\\\"rowHeight\\\"\\n    [rowCount]=\\\"rowCount\\\"\\n    [offset]=\\\"offset\\\"\\n    [trackByProp]=\\\"trackByProp\\\"\\n    [columns]=\\\"_internalColumns\\\"\\n    [pageSize]=\\\"pageSize\\\"\\n    [offsetX]=\\\"_offsetX | async\\\"\\n    [rowDetail]=\\\"rowDetail\\\"\\n    [groupHeader]=\\\"groupHeader\\\"\\n    [selected]=\\\"selected\\\"\\n    [innerWidth]=\\\"_innerWidth\\\"\\n    [bodyHeight]=\\\"bodyHeight\\\"\\n    [selectionType]=\\\"selectionType\\\"\\n    [emptyMessage]=\\\"messages.emptyMessage\\\"\\n    [rowIdentity]=\\\"rowIdentity\\\"\\n    [rowClass]=\\\"rowClass\\\"\\n    [selectCheck]=\\\"selectCheck\\\"\\n    [displayCheck]=\\\"displayCheck\\\"\\n    [summaryRow]=\\\"summaryRow\\\"\\n    [summaryHeight]=\\\"summaryHeight\\\"\\n    [summaryPosition]=\\\"summaryPosition\\\"\\n    (page)=\\\"onBodyPage($event)\\\"\\n    (activate)=\\\"activate.emit($event)\\\"\\n    (rowContextmenu)=\\\"onRowContextmenu($event)\\\"\\n    (select)=\\\"onBodySelect($event)\\\"\\n    (scroll)=\\\"onBodyScroll($event)\\\"\\n    (treeAction)=\\\"onTreeAction($event)\\\"\\n  >\\n  </datatable-body>\\n  <datatable-footer\\n    *ngIf=\\\"footerHeight\\\"\\n    [rowCount]=\\\"rowCount\\\"\\n    [pageSize]=\\\"pageSize\\\"\\n    [offset]=\\\"offset\\\"\\n    [footerHeight]=\\\"footerHeight\\\"\\n    [footerTemplate]=\\\"footer\\\"\\n    [totalMessage]=\\\"messages.totalMessage\\\"\\n    [pagerLeftArrowIcon]=\\\"cssClasses.pagerLeftArrow\\\"\\n    [pagerRightArrowIcon]=\\\"cssClasses.pagerRightArrow\\\"\\n    [pagerPreviousIcon]=\\\"cssClasses.pagerPrevious\\\"\\n    [selectedCount]=\\\"selected.length\\\"\\n    [selectedMessage]=\\\"!!selectionType && messages.selectedMessage\\\"\\n    [pagerNextIcon]=\\\"cssClasses.pagerNext\\\"\\n    (page)=\\\"onFooterPage($event)\\\"\\n  >\\n  </datatable-footer>\\n</div>\\n\", styles: [\".ngx-datatable{display:block;overflow:hidden;justify-content:center;position:relative;transform:translate(0)}.ngx-datatable [hidden]{display:none!important}.ngx-datatable *,.ngx-datatable *:before,.ngx-datatable *:after{box-sizing:border-box}.ngx-datatable.scroll-vertical .datatable-body{overflow-y:auto}.ngx-datatable.scroll-vertical.virtualized .datatable-body .datatable-row-wrapper{position:absolute}.ngx-datatable.scroll-horz .datatable-body{overflow-x:auto;-webkit-overflow-scrolling:touch}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner{white-space:nowrap}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner .datatable-header-cell{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ngx-datatable.fixed-row .datatable-scroll,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row{white-space:nowrap}.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-cell,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-group-cell{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.ngx-datatable .datatable-body-row,.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-header-inner{display:flex;flex-direction:row;-o-flex-flow:row;flex-flow:row}.ngx-datatable .datatable-body-cell,.ngx-datatable .datatable-header-cell{overflow-x:hidden;vertical-align:top;display:inline-block;line-height:1.625}.ngx-datatable .datatable-body-cell:focus,.ngx-datatable .datatable-header-cell:focus{outline:none}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{z-index:9}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-row-group,.ngx-datatable .datatable-row-right{position:relative}.ngx-datatable .datatable-header{display:block;overflow:hidden}.ngx-datatable .datatable-header .datatable-header-inner{align-items:stretch;-webkit-align-items:stretch}.ngx-datatable .datatable-header .datatable-header-cell{position:relative;display:inline-block}.ngx-datatable .datatable-header .datatable-header-cell.sortable .datatable-header-cell-wrapper{cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell.longpress .datatable-header-cell-wrapper{cursor:move}.ngx-datatable .datatable-header .datatable-header-cell .sort-btn{line-height:100%;vertical-align:middle;display:inline-block;cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell .resize-handle--not-resizable{display:inline-block;position:absolute;right:0;top:0;bottom:0;width:5px;padding:0 4px;visibility:hidden}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle{cursor:ew-resize}.ngx-datatable .datatable-header .datatable-header-cell.resizeable:hover .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell:hover .resize-handle--not-resizable{visibility:visible}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker{position:absolute;top:0;bottom:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromLeft{right:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromRight{left:0}.ngx-datatable .datatable-header .datatable-header-cell .datatable-header-cell-template-wrap{height:inherit}.ngx-datatable .datatable-body{position:relative;z-index:10;display:block}.ngx-datatable .datatable-body .datatable-scroll{display:inline-block}.ngx-datatable .datatable-body .datatable-row-detail{overflow-y:hidden}.ngx-datatable .datatable-body .datatable-row-wrapper{display:flex;flex-direction:column}.ngx-datatable .datatable-body .datatable-body-row{outline:none}.ngx-datatable .datatable-body .datatable-body-row>div{display:flex}.ngx-datatable .datatable-footer{display:block;width:100%;overflow:auto}.ngx-datatable .datatable-footer .datatable-footer-inner{display:flex;align-items:center;width:100%}.ngx-datatable .datatable-footer .selected-count .page-count{flex:1 1 40%}.ngx-datatable .datatable-footer .selected-count .datatable-pager{flex:1 1 60%}.ngx-datatable .datatable-footer .page-count{flex:1 1 20%}.ngx-datatable .datatable-footer .datatable-pager{flex:1 1 80%;text-align:right}.ngx-datatable .datatable-footer .datatable-pager .pager,.ngx-datatable .datatable-footer .datatable-pager .pager li{padding:0;margin:0;display:inline-block;list-style:none}.ngx-datatable .datatable-footer .datatable-pager .pager li,.ngx-datatable .datatable-footer .datatable-pager .pager li a{outline:none}.ngx-datatable .datatable-footer .datatable-pager .pager li a{cursor:pointer;display:inline-block}.ngx-datatable .datatable-footer .datatable-pager .pager li.disabled a{cursor:not-allowed}\\n\"], components: [{ type: DataTableHeaderComponent, selector: \"datatable-header\", inputs: [\"sortAscendingIcon\", \"sortDescendingIcon\", \"sortUnsetIcon\", \"scrollbarH\", \"dealsWithGroup\", \"targetMarkerTemplate\", \"innerWidth\", \"sorts\", \"sortType\", \"allRowsSelected\", \"selectionType\", \"reorderable\", \"headerHeight\", \"columns\", \"offsetX\"], outputs: [\"sort\", \"reorder\", \"resize\", \"select\", \"columnContextmenu\"] }, { type: DataTableBodyComponent, selector: \"datatable-body\", inputs: [\"scrollbarV\", \"scrollbarH\", \"loadingIndicator\", \"externalPaging\", \"rowHeight\", \"offsetX\", \"emptyMessage\", \"selectionType\", \"selected\", \"rowIdentity\", \"rowDetail\", \"groupHeader\", \"selectCheck\", \"displayCheck\", \"trackByProp\", \"rowClass\", \"groupedRows\", \"groupExpansionDefault\", \"innerWidth\", \"groupRowsBy\", \"virtualization\", \"summaryRow\", \"summaryPosition\", \"summaryHeight\", \"pageSize\", \"rows\", \"columns\", \"offset\", \"rowCount\", \"bodyHeight\"], outputs: [\"scroll\", \"page\", \"activate\", \"select\", \"detailToggle\", \"rowContextmenu\", \"treeAction\"] }, { type: DataTableFooterComponent, selector: \"datatable-footer\", inputs: [\"footerHeight\", \"rowCount\", \"pageSize\", \"offset\", \"pagerLeftArrowIcon\", \"pagerRightArrowIcon\", \"pagerPreviousIcon\", \"pagerNextIcon\", \"totalMessage\", \"footerTemplate\", \"selectedCount\", \"selectedMessage\"], outputs: [\"page\"] }], directives: [{ type: VisibilityDirective, selector: \"[visibilityObserver]\", outputs: [\"visible\"] }, { type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], pipes: { \"async\": i1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n__decorate([\n    throttleable(5)\n], DatatableComponent.prototype, \"onWindowResize\", null);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-datatable', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, host: {\n                        class: 'ngx-datatable'\n                    }, template: \"<div role=\\\"table\\\" visibilityObserver (visible)=\\\"recalculate()\\\">\\n  <datatable-header\\n    role=\\\"rowgroup\\\"\\n    *ngIf=\\\"headerHeight\\\"\\n    [sorts]=\\\"sorts\\\"\\n    [sortType]=\\\"sortType\\\"\\n    [scrollbarH]=\\\"scrollbarH\\\"\\n    [innerWidth]=\\\"_innerWidth\\\"\\n    [offsetX]=\\\"_offsetX | async\\\"\\n    [dealsWithGroup]=\\\"groupedRows !== undefined\\\"\\n    [columns]=\\\"_internalColumns\\\"\\n    [headerHeight]=\\\"headerHeight\\\"\\n    [reorderable]=\\\"reorderable\\\"\\n    [targetMarkerTemplate]=\\\"targetMarkerTemplate\\\"\\n    [sortAscendingIcon]=\\\"cssClasses.sortAscending\\\"\\n    [sortDescendingIcon]=\\\"cssClasses.sortDescending\\\"\\n    [sortUnsetIcon]=\\\"cssClasses.sortUnset\\\"\\n    [allRowsSelected]=\\\"allRowsSelected\\\"\\n    [selectionType]=\\\"selectionType\\\"\\n    (sort)=\\\"onColumnSort($event)\\\"\\n    (resize)=\\\"onColumnResize($event)\\\"\\n    (reorder)=\\\"onColumnReorder($event)\\\"\\n    (select)=\\\"onHeaderSelect($event)\\\"\\n    (columnContextmenu)=\\\"onColumnContextmenu($event)\\\"\\n  >\\n  </datatable-header>\\n  <datatable-body\\n    role=\\\"rowgroup\\\"\\n    [groupRowsBy]=\\\"groupRowsBy\\\"\\n    [groupedRows]=\\\"groupedRows\\\"\\n    [rows]=\\\"_internalRows\\\"\\n    [groupExpansionDefault]=\\\"groupExpansionDefault\\\"\\n    [scrollbarV]=\\\"scrollbarV\\\"\\n    [scrollbarH]=\\\"scrollbarH\\\"\\n    [virtualization]=\\\"virtualization\\\"\\n    [loadingIndicator]=\\\"loadingIndicator\\\"\\n    [externalPaging]=\\\"externalPaging\\\"\\n    [rowHeight]=\\\"rowHeight\\\"\\n    [rowCount]=\\\"rowCount\\\"\\n    [offset]=\\\"offset\\\"\\n    [trackByProp]=\\\"trackByProp\\\"\\n    [columns]=\\\"_internalColumns\\\"\\n    [pageSize]=\\\"pageSize\\\"\\n    [offsetX]=\\\"_offsetX | async\\\"\\n    [rowDetail]=\\\"rowDetail\\\"\\n    [groupHeader]=\\\"groupHeader\\\"\\n    [selected]=\\\"selected\\\"\\n    [innerWidth]=\\\"_innerWidth\\\"\\n    [bodyHeight]=\\\"bodyHeight\\\"\\n    [selectionType]=\\\"selectionType\\\"\\n    [emptyMessage]=\\\"messages.emptyMessage\\\"\\n    [rowIdentity]=\\\"rowIdentity\\\"\\n    [rowClass]=\\\"rowClass\\\"\\n    [selectCheck]=\\\"selectCheck\\\"\\n    [displayCheck]=\\\"displayCheck\\\"\\n    [summaryRow]=\\\"summaryRow\\\"\\n    [summaryHeight]=\\\"summaryHeight\\\"\\n    [summaryPosition]=\\\"summaryPosition\\\"\\n    (page)=\\\"onBodyPage($event)\\\"\\n    (activate)=\\\"activate.emit($event)\\\"\\n    (rowContextmenu)=\\\"onRowContextmenu($event)\\\"\\n    (select)=\\\"onBodySelect($event)\\\"\\n    (scroll)=\\\"onBodyScroll($event)\\\"\\n    (treeAction)=\\\"onTreeAction($event)\\\"\\n  >\\n  </datatable-body>\\n  <datatable-footer\\n    *ngIf=\\\"footerHeight\\\"\\n    [rowCount]=\\\"rowCount\\\"\\n    [pageSize]=\\\"pageSize\\\"\\n    [offset]=\\\"offset\\\"\\n    [footerHeight]=\\\"footerHeight\\\"\\n    [footerTemplate]=\\\"footer\\\"\\n    [totalMessage]=\\\"messages.totalMessage\\\"\\n    [pagerLeftArrowIcon]=\\\"cssClasses.pagerLeftArrow\\\"\\n    [pagerRightArrowIcon]=\\\"cssClasses.pagerRightArrow\\\"\\n    [pagerPreviousIcon]=\\\"cssClasses.pagerPrevious\\\"\\n    [selectedCount]=\\\"selected.length\\\"\\n    [selectedMessage]=\\\"!!selectionType && messages.selectedMessage\\\"\\n    [pagerNextIcon]=\\\"cssClasses.pagerNext\\\"\\n    (page)=\\\"onFooterPage($event)\\\"\\n  >\\n  </datatable-footer>\\n</div>\\n\", styles: [\".ngx-datatable{display:block;overflow:hidden;justify-content:center;position:relative;transform:translate(0)}.ngx-datatable [hidden]{display:none!important}.ngx-datatable *,.ngx-datatable *:before,.ngx-datatable *:after{box-sizing:border-box}.ngx-datatable.scroll-vertical .datatable-body{overflow-y:auto}.ngx-datatable.scroll-vertical.virtualized .datatable-body .datatable-row-wrapper{position:absolute}.ngx-datatable.scroll-horz .datatable-body{overflow-x:auto;-webkit-overflow-scrolling:touch}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner{white-space:nowrap}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner .datatable-header-cell{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ngx-datatable.fixed-row .datatable-scroll,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row{white-space:nowrap}.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-cell,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-group-cell{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.ngx-datatable .datatable-body-row,.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-header-inner{display:flex;flex-direction:row;-o-flex-flow:row;flex-flow:row}.ngx-datatable .datatable-body-cell,.ngx-datatable .datatable-header-cell{overflow-x:hidden;vertical-align:top;display:inline-block;line-height:1.625}.ngx-datatable .datatable-body-cell:focus,.ngx-datatable .datatable-header-cell:focus{outline:none}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{z-index:9}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-row-group,.ngx-datatable .datatable-row-right{position:relative}.ngx-datatable .datatable-header{display:block;overflow:hidden}.ngx-datatable .datatable-header .datatable-header-inner{align-items:stretch;-webkit-align-items:stretch}.ngx-datatable .datatable-header .datatable-header-cell{position:relative;display:inline-block}.ngx-datatable .datatable-header .datatable-header-cell.sortable .datatable-header-cell-wrapper{cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell.longpress .datatable-header-cell-wrapper{cursor:move}.ngx-datatable .datatable-header .datatable-header-cell .sort-btn{line-height:100%;vertical-align:middle;display:inline-block;cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell .resize-handle--not-resizable{display:inline-block;position:absolute;right:0;top:0;bottom:0;width:5px;padding:0 4px;visibility:hidden}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle{cursor:ew-resize}.ngx-datatable .datatable-header .datatable-header-cell.resizeable:hover .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell:hover .resize-handle--not-resizable{visibility:visible}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker{position:absolute;top:0;bottom:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromLeft{right:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromRight{left:0}.ngx-datatable .datatable-header .datatable-header-cell .datatable-header-cell-template-wrap{height:inherit}.ngx-datatable .datatable-body{position:relative;z-index:10;display:block}.ngx-datatable .datatable-body .datatable-scroll{display:inline-block}.ngx-datatable .datatable-body .datatable-row-detail{overflow-y:hidden}.ngx-datatable .datatable-body .datatable-row-wrapper{display:flex;flex-direction:column}.ngx-datatable .datatable-body .datatable-body-row{outline:none}.ngx-datatable .datatable-body .datatable-body-row>div{display:flex}.ngx-datatable .datatable-footer{display:block;width:100%;overflow:auto}.ngx-datatable .datatable-footer .datatable-footer-inner{display:flex;align-items:center;width:100%}.ngx-datatable .datatable-footer .selected-count .page-count{flex:1 1 40%}.ngx-datatable .datatable-footer .selected-count .datatable-pager{flex:1 1 60%}.ngx-datatable .datatable-footer .page-count{flex:1 1 20%}.ngx-datatable .datatable-footer .datatable-pager{flex:1 1 80%;text-align:right}.ngx-datatable .datatable-footer .datatable-pager .pager,.ngx-datatable .datatable-footer .datatable-pager .pager li{padding:0;margin:0;display:inline-block;list-style:none}.ngx-datatable .datatable-footer .datatable-pager .pager li,.ngx-datatable .datatable-footer .datatable-pager .pager li a{outline:none}.ngx-datatable .datatable-footer .datatable-pager .pager li a{cursor:pointer;display:inline-block}.ngx-datatable .datatable-footer .datatable-pager .pager li.disabled a{cursor:not-allowed}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: ScrollbarHelper, decorators: [{\n                        type: SkipSelf\n                    }] }, { type: DimensionsHelper, decorators: [{\n                        type: SkipSelf\n                    }] }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.KeyValueDiffers }, { type: ColumnChangesService }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: ['configuration']\n                    }] }];\n    }, propDecorators: { targetMarkerTemplate: [{\n                type: Input\n            }], rows: [{\n                type: Input\n            }], groupRowsBy: [{\n                type: Input\n            }], groupedRows: [{\n                type: Input\n            }], columns: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], scrollbarV: [{\n                type: Input\n            }], scrollbarH: [{\n                type: Input\n            }], rowHeight: [{\n                type: Input\n            }], columnMode: [{\n                type: Input\n            }], headerHeight: [{\n                type: Input\n            }], footerHeight: [{\n                type: Input\n            }], externalPaging: [{\n                type: Input\n            }], externalSorting: [{\n                type: Input\n            }], limit: [{\n                type: Input\n            }], count: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], loadingIndicator: [{\n                type: Input\n            }], selectionType: [{\n                type: Input\n            }], reorderable: [{\n                type: Input\n            }], swapColumns: [{\n                type: Input\n            }], sortType: [{\n                type: Input\n            }], sorts: [{\n                type: Input\n            }], cssClasses: [{\n                type: Input\n            }], messages: [{\n                type: Input\n            }], rowClass: [{\n                type: Input\n            }], selectCheck: [{\n                type: Input\n            }], displayCheck: [{\n                type: Input\n            }], groupExpansionDefault: [{\n                type: Input\n            }], trackByProp: [{\n                type: Input\n            }], selectAllRowsOnPage: [{\n                type: Input\n            }], virtualization: [{\n                type: Input\n            }], treeFromRelation: [{\n                type: Input\n            }], treeToRelation: [{\n                type: Input\n            }], summaryRow: [{\n                type: Input\n            }], summaryHeight: [{\n                type: Input\n            }], summaryPosition: [{\n                type: Input\n            }], scroll: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], select: [{\n                type: Output\n            }], sort: [{\n                type: Output\n            }], page: [{\n                type: Output\n            }], reorder: [{\n                type: Output\n            }], resize: [{\n                type: Output\n            }], tableContextmenu: [{\n                type: Output\n            }], treeAction: [{\n                type: Output\n            }], isFixedHeader: [{\n                type: HostBinding,\n                args: ['class.fixed-header']\n            }], isFixedRow: [{\n                type: HostBinding,\n                args: ['class.fixed-row']\n            }], isVertScroll: [{\n                type: HostBinding,\n                args: ['class.scroll-vertical']\n            }], isVirtualized: [{\n                type: HostBinding,\n                args: ['class.virtualized']\n            }], isHorScroll: [{\n                type: HostBinding,\n                args: ['class.scroll-horz']\n            }], isSelectable: [{\n                type: HostBinding,\n                args: ['class.selectable']\n            }], isCheckboxSelection: [{\n                type: HostBinding,\n                args: ['class.checkbox-selection']\n            }], isCellSelection: [{\n                type: HostBinding,\n                args: ['class.cell-selection']\n            }], isSingleSelection: [{\n                type: HostBinding,\n                args: ['class.single-selection']\n            }], isMultiSelection: [{\n                type: HostBinding,\n                args: ['class.multi-selection']\n            }], isMultiClickSelection: [{\n                type: HostBinding,\n                args: ['class.multi-click-selection']\n            }], columnTemplates: [{\n                type: ContentChildren,\n                args: [DataTableColumnDirective]\n            }], rowDetail: [{\n                type: ContentChild,\n                args: [DatatableRowDetailDirective]\n            }], groupHeader: [{\n                type: ContentChild,\n                args: [DatatableGroupHeaderDirective]\n            }], footer: [{\n                type: ContentChild,\n                args: [DatatableFooterDirective]\n            }], bodyComponent: [{\n                type: ViewChild,\n                args: [DataTableBodyComponent]\n            }], headerComponent: [{\n                type: ViewChild,\n                args: [DataTableHeaderComponent]\n            }], rowIdentity: [{\n                type: Input\n            }], onWindowResize: [{\n                type: HostListener,\n                args: ['window:resize']\n            }] } });\n\nclass NgxDatatableModule {\n    /**\n     * Configure global configuration via INgxDatatableConfig\n     * @param configuration\n     */\n    static forRoot(configuration) {\n        return {\n            ngModule: NgxDatatableModule,\n            providers: [{ provide: 'configuration', useValue: configuration }]\n        };\n    }\n}\nNgxDatatableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgxDatatableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxDatatableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgxDatatableModule, declarations: [DataTableFooterTemplateDirective,\n        VisibilityDirective,\n        DraggableDirective,\n        ResizeableDirective,\n        OrderableDirective,\n        LongPressDirective,\n        ScrollerComponent,\n        DatatableComponent,\n        DataTableColumnDirective,\n        DataTableHeaderComponent,\n        DataTableHeaderCellComponent,\n        DataTableBodyComponent,\n        DataTableFooterComponent,\n        DataTablePagerComponent,\n        ProgressBarComponent,\n        DataTableBodyRowComponent,\n        DataTableRowWrapperComponent,\n        DatatableRowDetailDirective,\n        DatatableGroupHeaderDirective,\n        DatatableRowDetailTemplateDirective,\n        DataTableBodyCellComponent,\n        DataTableSelectionComponent,\n        DataTableColumnHeaderDirective,\n        DataTableColumnCellDirective,\n        DataTableColumnCellTreeToggle,\n        DatatableFooterDirective,\n        DatatableGroupHeaderTemplateDirective,\n        DataTableSummaryRowComponent], imports: [CommonModule], exports: [DatatableComponent,\n        DatatableRowDetailDirective,\n        DatatableGroupHeaderDirective,\n        DatatableRowDetailTemplateDirective,\n        DataTableColumnDirective,\n        DataTableColumnHeaderDirective,\n        DataTableColumnCellDirective,\n        DataTableColumnCellTreeToggle,\n        DataTableFooterTemplateDirective,\n        DatatableFooterDirective,\n        DataTablePagerComponent,\n        DatatableGroupHeaderTemplateDirective] });\nNgxDatatableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgxDatatableModule, providers: [ScrollbarHelper, DimensionsHelper, ColumnChangesService], imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgxDatatableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    providers: [ScrollbarHelper, DimensionsHelper, ColumnChangesService],\n                    declarations: [\n                        DataTableFooterTemplateDirective,\n                        VisibilityDirective,\n                        DraggableDirective,\n                        ResizeableDirective,\n                        OrderableDirective,\n                        LongPressDirective,\n                        ScrollerComponent,\n                        DatatableComponent,\n                        DataTableColumnDirective,\n                        DataTableHeaderComponent,\n                        DataTableHeaderCellComponent,\n                        DataTableBodyComponent,\n                        DataTableFooterComponent,\n                        DataTablePagerComponent,\n                        ProgressBarComponent,\n                        DataTableBodyRowComponent,\n                        DataTableRowWrapperComponent,\n                        DatatableRowDetailDirective,\n                        DatatableGroupHeaderDirective,\n                        DatatableRowDetailTemplateDirective,\n                        DataTableBodyCellComponent,\n                        DataTableSelectionComponent,\n                        DataTableColumnHeaderDirective,\n                        DataTableColumnCellDirective,\n                        DataTableColumnCellTreeToggle,\n                        DatatableFooterDirective,\n                        DatatableGroupHeaderTemplateDirective,\n                        DataTableSummaryRowComponent\n                    ],\n                    exports: [\n                        DatatableComponent,\n                        DatatableRowDetailDirective,\n                        DatatableGroupHeaderDirective,\n                        DatatableRowDetailTemplateDirective,\n                        DataTableColumnDirective,\n                        DataTableColumnHeaderDirective,\n                        DataTableColumnCellDirective,\n                        DataTableColumnCellTreeToggle,\n                        DataTableFooterTemplateDirective,\n                        DatatableFooterDirective,\n                        DataTablePagerComponent,\n                        DatatableGroupHeaderTemplateDirective\n                    ]\n                }]\n        }] });\n\nvar ClickType;\n(function (ClickType) {\n    ClickType[\"single\"] = \"single\";\n    ClickType[\"double\"] = \"double\";\n})(ClickType || (ClickType = {}));\n\nif (typeof document !== 'undefined' && !document.elementsFromPoint) {\n    document.elementsFromPoint = elementsFromPoint;\n}\n/*tslint:disable*/\n/**\n * Polyfill for `elementsFromPoint`\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint\n * https://gist.github.com/iddan/54d5d9e58311b0495a91bf06de661380\n * https://gist.github.com/oslego/7265412\n */\nfunction elementsFromPoint(x, y) {\n    const elements = [];\n    const previousPointerEvents = [];\n    let current; // TODO: window.getComputedStyle should be used with inferred type (Element)\n    let i;\n    let d;\n    //if (document === undefined) return elements;\n    // get all elements via elementFromPoint, and remove them from hit-testing in order\n    while ((current = document.elementFromPoint(x, y)) && elements.indexOf(current) === -1 && current != null) {\n        // push the element and its current style\n        elements.push(current);\n        previousPointerEvents.push({\n            value: current.style.getPropertyValue('pointer-events'),\n            priority: current.style.getPropertyPriority('pointer-events')\n        });\n        // add \"pointer-events: none\", to get to the underlying element\n        current.style.setProperty('pointer-events', 'none', 'important');\n    }\n    // restore the previous pointer-events values\n    for (i = previousPointerEvents.length; (d = previousPointerEvents[--i]);) {\n        elements[i].style.setProperty('pointer-events', d.value ? d.value : '', d.priority);\n    }\n    // return our results\n    return elements;\n}\n/*tslint:enable*/\n\n/*\n * Public API Surface of ngx-datatable\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ClickType, ColumnChangesService, ColumnMode, ContextmenuType, DataTableBodyCellComponent, DataTableBodyComponent, DataTableBodyRowComponent, DataTableColumnCellDirective, DataTableColumnCellTreeToggle, DataTableColumnDirective, DataTableColumnHeaderDirective, DataTableFooterComponent, DataTableFooterTemplateDirective, DataTableHeaderCellComponent, DataTableHeaderComponent, DataTablePagerComponent, DataTableRowWrapperComponent, DataTableSelectionComponent, DataTableSummaryRowComponent, DatatableComponent, DatatableFooterDirective, DatatableGroupHeaderDirective, DatatableGroupHeaderTemplateDirective, DatatableRowDetailDirective, DatatableRowDetailTemplateDirective, DimensionsHelper, DraggableDirective, Keys, LongPressDirective, NgxDatatableModule, OrderableDirective, ProgressBarComponent, ResizeableDirective, RowHeightCache, ScrollbarHelper, ScrollerComponent, SelectionType, SortDirection, SortType, VisibilityDirective, adjustColumnWidths, camelCase, columnGroupWidths, columnTotalWidth, columnsByPin, columnsByPinArr, columnsTotalWidth, deCamelCase, deepValueGetter, elementsFromPoint, emptyStringGetter, forceFillColumnWidths, getTotalFlexGrow, getVendorPrefixedName, getterForProp, groupRowsByParents, id, isNullOrUndefined, nextSortDir, numericIndexGetter, optionalGetterForProp, orderByComparator, selectRows, selectRowsBetween, setColumnDefaults, shallowValueGetter, sortRows, throttle, throttleable, translateTemplates, translateXY };\n"]},"metadata":{},"sourceType":"module"}